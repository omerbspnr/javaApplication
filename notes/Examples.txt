

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının append metodu ve capacity değişimi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder(5);

		System.out.printf("Capacity:%d%n", sb.capacity());
		System.out.printf("Length:%d%n", sb.length());

		sb.append("ankara").append("istanbul").append("izmir");

		System.out.printf("Capacity:%d%n", sb.capacity());
		System.out.printf("Length:%d%n", sb.length());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının String parametreli ctor elemanı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.append("istanbul").append("izmir");

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının String parametreli ctor elemanı capacity değerini 16 + string'in karakter
	sayısı olarak belirler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("istanbul");

		System.out.printf("Capacity:%d%n", sb.capacity());
		System.out.printf("Length:%d%n", sb.length());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının charAt metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("istanbul");

		int len = sb.length();

		for (int i = 0; i < len; ++i)
			System.out.printf("%c ", sb.charAt(i));

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının delete metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.delete(0, 2); //[0, 2)

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının deleteCharAt metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.deleteCharAt(5);

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının getChars metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("Bugün hava çok güzel");

		char [] c = new char[4];

		sb.getChars(6, 10, c, 0);

		for (int i = 0; i < c.length; ++i)
			System.out.println(c[i]);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının getChars metodu ile içersindeki karakterlerin tamamından bir dizinin elde
	edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("Bugün hava çok güzel");

		char [] c = new char[sb.length()];

		sb.getChars(0, sb.length(), c, 0);

		for (int i = 0; i < c.length; ++i)
			System.out.println(c[i]);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının insert metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("Bugün hava çok güzel");

		sb.insert(6, "gerçekten ");

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının setLength metodu ile büyütme yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.setLength(10);

		System.out.println(sb + ":");
		System.out.println(sb.indexOf("\0"));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının setLength metodu ile küçültme de yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        sb.setLength(4);

        System.out.println(sb + ":");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    changeCase metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

class App {
    public static void main(String [] args)
    {
        System.out.println(StringUtil.changeCase("AnKaRa1:,"));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	ArrayUtil sınıfının reverse metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        String str = Console.read("Bir yazı giriniz:");
        char [] c = str.toCharArray();

        ArrayUtil.reverse(c);

        Console.write(new String(c));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı iki yazı için birincisi içerisinden ikinci yazıda bulunan
	karakterlerin olmadığı yazıyı  döndüren squeeze isimli metodu yazınız ve test ediniz.
	Örnek: ankara, istanbul -> kr
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;
import org.csystem.util.StringUtil;

class App {
    public static void main(String [] args)
    {
        String s1 = Console.read("Birinci yazıyı giriniz:");
        String s2 = Console.read("İkinci yazıyı giriniz:");

        Console.writeLine(StringUtil.squeeze(s1, s2));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının ensureCapacity metodu artırılacak capacity değeri artması gereken capacity değerinden
	küçükse değeri artması gereken sayı olarak belirler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        Console.writeLine("Capacity:%d", sb.capacity());

        sb.ensureCapacity(23);

        Console.writeLine("Capacity:%d", sb.capacity());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının ensureCapacity metodu artırılacak capacity değeri artması gereken capacity değerinden
	büyükse değer verilen capacity değeri olarak belirlenir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        Console.writeLine("Capacity:%d", sb.capacity());

        sb.ensureCapacity(50);

        Console.writeLine("Capacity:%d", sb.capacity());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının subSequance metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        Console.writeLine(sb.subSequence(2, sb.length()));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının trimToSize metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder();

        sb.append("ankara").append("-").append("istanbul").append("-").append("izmir");

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());

        sb.trimToSize();

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının trimToSize metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder();

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());

        sb.trimToSize();

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden girilen bir ne sayısı kadar klavyeden girilen yazıları bir dizi içerisinde
	toplatınız. Bu işlemden sonra bu dizinin içerisindeki yazıların aralarında - karakteri olacak şekilde bir
	yazı elde eden programı StringBuilder kullanarak yapınız
	ankara, istanbul, izmir, zonguldak -> ankara-istanbul-izmir-zonguldak
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.concatstringsapp.ConcatApp;

class App {
    public static void main(String [] args)
    {
        ConcatApp.run();
    }
}

package org.csystem.samples.concatstringsapp;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

public class ConcatStrings {
    private String [] m_str;
    private String m_delim;
    private String m_result;

    private void fillStr()
    {
        for (int i = 0; i < m_str.length; ++i)
            m_str[i] = Console.read("Yazı?");
    }
    public ConcatStrings(int n, char delim)
    {
        this(n, delim + "");
    }

    public ConcatStrings(int n, String delim)
    {
        m_str = new String[n];
        m_delim = delim;
        m_result = "";
    }

    public String[] getStr()
    {
        return m_str;
    }

    public String getResult()
    {
        return m_result;
    }

    public void run()
    {
        fillStr();
        m_result = ArrayUtil.join(m_str, m_delim);
    }
}

package org.csystem.samples.concatstringsapp;


import org.csystem.util.Console;

public class ConcatApp {
    public static void run()
    {
        int n = Console.readInt("Bir sayı giriniz:");
        ConcatStrings app = new ConcatStrings(n, "--");

        app.run();

        Console.writeLine(app.getResult());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfı ve add metodu aşağıdaki gibi bir kullanımda yuvarlama hatası oluşmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        BigDecimal a = new BigDecimal("0.1");
        BigDecimal b = new BigDecimal("0.2");
        BigDecimal c = a.add(b);

        Console.writeLine(c.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfının min ve max metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        BigDecimal a = BigDecimal.valueOf(0.1);
        BigDecimal b = BigDecimal.valueOf(0.2);
        BigDecimal min = a.min(b);
        BigDecimal max = a.max(b);

        Console.writeLine(min.toString());
        Console.writeLine(max.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı BigDecimal türünden bir dizinin toplamını döndüren
	sum isimli metodu ArrayUtil sınıfı içerisinde yazınız.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

import static org.csystem.util.ArrayUtil.*;

class App {
    public static void main(String [] args)
    {
        BigDecimal [] bigDecimals = {
                BigDecimal.valueOf(1.3),
                BigDecimal.valueOf(-6),
                BigDecimal.valueOf(9.567),
                BigDecimal.valueOf(5.934),
        };

        BigDecimal total = sum(bigDecimals);

        Console.writeLine(total.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfının compareTo metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        double a = Console.readDouble("Birinci sayıyı giriniz:");
        double b = Console.readDouble("İkinci sayıyı giriniz:");

        BigDecimal bda = BigDecimal.valueOf(a);
        BigDecimal bdb = BigDecimal.valueOf(b);

        Console.writeLine(bda.compareTo(bdb));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı BigDecimal türden bir dizinin en büyük elemanını döndüren max ve en küçük
	elemanını döndüren min isimli metotları ArrayUtil sınıfı içerisinde yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        BigDecimal [] bigDecimals = {
                BigDecimal.valueOf(1.3),
                BigDecimal.valueOf(-6),
                BigDecimal.valueOf(9.567),
                BigDecimal.valueOf(5.934),
        };

        Console.writeLine("min:%s", ArrayUtil.min(bigDecimals));
        Console.writeLine("max:%s", ArrayUtil.max(bigDecimals));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfının devide metodu ile bölme işleminde sonucun nasıl yuvarlanacağı ve ne kadar hassasiyet ile
	elde edileceği belirlenebilir. Çoğu zaman da belirlenmesi gerekir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;
import java.math.RoundingMode;

class App {
    public static void main(String [] args)
    {
        BigDecimal a = BigDecimal.TEN;
        BigDecimal b = BigDecimal.valueOf(3);

        BigDecimal res = a.divide(b, 10, RoundingMode.HALF_UP);

        Console.writeLine("res=%s%n", res);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı BigDecimal türden bir dizinin ortalamasını döndüren average metotlarını
	aşağıdaki açıklamaya göre yazınız.
	- Yalnızca dizi referansı parametreli metot virgülden sonra 6 basamak ve yukarı yuvarlama biçimde çalışacaktır
	- Dizi referans, scale ve RoundingMode parametreli metot ilgili değerlere göre işlem yapacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import java.math.BigDecimal;
import java.math.RoundingMode;

class App {
    public static void main(String [] args)
    {
        BigDecimal [] bigDecimals = {
                BigDecimal.valueOf(1.3),
                BigDecimal.valueOf(-6),
                BigDecimal.valueOf(9.567),
                BigDecimal.valueOf(5.934),
        };

        BigDecimal avg = ArrayUtil.average(bigDecimals, 50, RoundingMode.CEILING);

        Console.writeLine("Average=%s", avg);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	BigInteger sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigInteger;

class App {
    public static void main(String [] args)
    {
        BigInteger bi = new BigInteger("9999999999999999999999999999999999999999999999");

        Console.writeLine(bi.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigInteger sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigInteger;

class App {
    public static void main(String [] args)
    {
        BigInteger bi = new BigInteger("ABC3FDE308F5FFFABC", 16);

        Console.writeLine(bi.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: NumberUtil sınıfı içerisinde yazılmış olan isPrime isimli metodu. BigInteger parametresi için
	ayrıca yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.math.BigInteger;

public class App {
    public static void main(String[] args)
    {
        for (BigInteger i = BigInteger.ZERO; i.compareTo(BigInteger.valueOf(100)) <= 0; i = i.add(BigInteger.ONE)) {
            if (NumberUtil.isPrime(i))
                Console.write("%s ", i);
        }

        Console.writeLine();

        Console.writeLine(NumberUtil.isPrime(BigInteger.valueOf(1_000_003)) ? "Asal" : "Asal değil");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte BigInteger içerisindeki değerin yüksek anlamlı byte değerleri atılarak 4 byte'lık değer
	elde edilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigInteger;

public class App {
    public static void main(String[] args)
    {
        BigInteger bi = new BigInteger("ABCDEF10ABCD", 16);

        Console.writeLine("%X", bi.intValue());
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Değişken sayıda argüman alan metotlar (elipsis parametreli metotlar) (varargs methods)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        Util.display(10, 20);
        Util.display();
        Util.display(10);
        Util.display(new int []{10, 20});
    }
}

class Util {
    public static void display(int...a)
    {
        for (int val : a)
            System.out.printf("%d ", val);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki durumda error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

class Util {
    public static void display(int [] a) //error
    {

    }
    public static void display(int...a) //error
    {
        for (int val : a)
            System.out.printf("%d ", val);

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki durumda int parametreli display metodu çağrılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        Util.display(10);
    }
}

class Util {
    public static void display(int a)
    {
        System.out.printf("a=%d%n", a);
    }

    public static void display(int...a)
    {
        for (int val : a)
            System.out.printf("%d ", val);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun varargs parametresi diğer parametrelerin en sağında olmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        Util.display(10);
    }
}

class Util {
    public static void display(int val, int...a)
    {
        System.out.printf("val=%d%n", val);

        for (int elem : a)
            System.out.printf("%d ", elem);

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki kuralın bir sonucu olarak iki tane varargs parametreli metot yazılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

class Util {
    public static void display(double...a, int...b) //error
    {

    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki durumda int parametreli display çağrılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        short a = 10;

        Util.display(a);
    }
}

class Util {
    public static void display(int val)
    {
        System.out.println("int");
    }

    public static void display(short...a)
    {
        System.out.println("short...");
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Dizi dizileri de varargs olarak yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        int [] a= {1, 2, 3, 4, 5};
        int [] b = {1, 2, 3, 4, 7};

        Util.display(a, b, a, a, b, b, a);
    }
}

class Util {
    public static void display(int[]...a)
    {
        for (int [] array : a) {
            for (int val : array)
                System.out.printf("%02d ", val);

            System.out.println();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Elipsis atomu yalnızca parametre değişken bildirimlerinde kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        int...a = new int[10]; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden iki dizinin birlştirilmiş olduğu yeni bir dizi döndüren
	join isimli metodu ArrayUtil sınıfı içerisinde yazınız ve test ediniz. Metodun bir parametresi varargs
	biçiminde olacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;

import java.math.BigInteger;

public class App {
    public static void main(String[] args)
    {
        int []  a = {1, 2, 3, 4, 5, 6};
        int [] result = ArrayUtil.join(a, 10, 20, 30);

        ArrayUtil.display(result);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Programın komut satırı argümanları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki programda komut satırı argümanı verilmişse komut satırı argümanları verilmemişse klavyeden
	istenen değerler kullanılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

public class App {
    public static void main(String[] args)
    {
        if (args.length == 0)
            args = Console.read("Argümanları giriniz:").split("[ \t\r]+");

        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	CommandUtil sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CommandLineUtil;

public class App {
    public static void main(String[] args)
    {
        args = CommandLineUtil.getCommandLineArgs(args, "Argümanları giriniz:");

        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	CommandUtil sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.CommandLineUtil.*;

public class App {
    public static void main(String[] args)
    {
        args = getCommandLineArgs(args, "Argümanları giriniz:");
        controlForLengthEqual(args, 2, "Usage: copy src dest");

        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	var anahtar sözcüğü Java 10 le eklenmiştir. Yerel değişken bildirimlerinde kullanılan bir anahtar sözcüktür
	Java 11 ile birlikte var anahtar sözcüğü Lambda ifadelerinde de kullanılabilmektedir. Lambda ifadeleri ileride
	ele alınacaktır
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    var anahtar sözcüğü kullanım yerleri dışında anahtar sözcük olarak ele alınmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        int var;

        var = 10;

        System.out.println(var);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    var olarak bildirilen yerel değişenlere ilk değer verilmelidir. Verilen ilk değere göre türü elde edilir.
    Ve yaşamı boyunca aynı türde devam eder
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        var a = 10;

        a = 2.3; //error
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    var parametre değişkeni ve veri elemanı bildirimlerinde kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public var a; //error
    public void foo(var a) //error
    {

    }

}

/*----------------------------------------------------------------------------------------------------------------------
    var yerel değişkenler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.app.PostalCodeInfoModelFactory.*;

public class App {
    public static void main(String[] args)
    {
        var model = create(67100, "Zonguldak");

        //...
    }
}

class PostalCodeInfoModelFactory {
    public static PostalCodeInfoModel create(int code, String name)
    {
        //...
        return new PostalCodeInfoModel(code, name);
    }
}

class PostalCodeInfoModel {
    private int m_code;
    private String m_place;

    public PostalCodeInfoModel(int code, String place)
    {
        m_code = code;
        m_place = place;
    }

    public int getCode()
    {
        return m_code;
    }

    public void setCode(int code)
    {
        m_code = code;
    }

    public String getPlace()
    {
        return m_place;
    }

    public void setPlace(String place)
    {
        m_place = place;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    var yerel değişkenler for veya for-each döngü deyimlerinde de kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        var a = new int[]{1, 2, 3, 4};

        for (var val : a)
            System.out.println(val * val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    var yerel değişkenler for veya for-each döngü deyimlerinde de kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        var a = new int[]{1, 2, 3, 4};

        for (var val : a)
            System.out.println(val * val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Komut satırı argümanları ile veya komut satırı argümanı verilmemişse klavyeden istenen
    n tane yazının n-1 tanesini son verilen argümanı ayraç olarak kullanacak şekilde birleştirip yeni bir String
    elde eden programı yazınız.

    java xxx ali veli selami -
    ali-veli-selami
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import static org.csystem.util.CommandLineUtil.*;

public class App {
    public static void main(String[] args)
    {
        ConcatWithDelimApp.run(args);
    }
}

class ConcatWithDelimApp {
    private ConcatWithDelimApp() {}
    public static void run(String [] args)
    {
        args = getCommandLineArgs(args, "Birleştirilecek yazıları ve sonunda ayracı giriniz:");
        controlForLengthGreaterOrEqual(args, 3, "Geçersiz kullanım: En az üç argüman girilmelidir");
        var str = ArrayUtil.join(args, args.length - 1, args[args.length - 1]);

        Console.writeLine(str);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    ArrayUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Random;

public final class ArrayUtil {
    private ArrayUtil() {}

    public static int[][] addMatrices(int [][] a, int []...b)
    {
        if (!isMatrix(a) || !isMatrix(b) || a.length != b.length || a[0].length != b[0].length)
            throw new IllegalArgumentException("Geçersiz matris(ler)");

        var row = a.length;
        var col = a[0].length;
        var m = new int[row][col];

        for (var i = 0; i < row; ++i)
            for (var j = 0; j < col; ++j)
                m[i][j] = a[i][j] + b[i][j];

        return m;
    }

    public static BigDecimal average(BigDecimal...bigDecimals)
    {
        return average(bigDecimals, 6, RoundingMode.HALF_UP);
    }

    public static BigDecimal average(BigDecimal [] bigDecimals, int scale, RoundingMode roundingMode)
    {
        return sum(bigDecimals).divide(BigDecimal.valueOf(bigDecimals.length), scale, roundingMode);
    }

    public static double average(int...a)
    {
        return (double)sum(a) / a.length;
    }

    public static int [] copy(int [] src, int[]dest)
    {
        return copy(src, dest, src.length);
    }

    public static int [] copy(int [] src, int[]dest, int size)
    {
        for (var i = 0; i < size; ++i)
            dest[i] = src[i];

        return dest;
    }

    public static int copyIfLengthGreater(String [] src, String [] dest, int val)
    {
        var index = 0;

        for (var s : src)
            if (s.length() > val)
                dest[index++] = s;

        return index;
    }

    public static void display(int ...a)
    {
        display(1, a);
    }

    public static void display(int n, int...a)
    {
        display(n, true, a);
    }

    public static void display(int n, boolean putZero, int...a)
    {
        var fmt = putZero ? String.format("%%0%dd ", n) : String.format("%%%dd ", n);

        for (var val : a)
            System.out.printf(fmt, val);

        System.out.println();
    }

    public static void display(String...str)
    {
        display(str, str.length);
    }

    public static void display(String [] str, int n)
    {
        for (var i = 0; i < n; ++i)
            System.out.println(str[i]);
    }

    public static void display(int []...a)
    {
        display(1, a);
    }

    public static void display(int n, int[]...a)
    {
        display(n, true, a);
    }

    public static void display(int n, boolean putZero, int []...a)
    {
        for (var array : a)
            display(n, putZero, array);
    }

    public static void drawHistogram(int [] h, int n, char ch)
    {
        var maxVal = max(h);

        for (var val : h) {
            var count = Math.round(val * n / maxVal);

            while (count -- > 0)
                System.out.print(ch);

            System.out.println();
        }
    }

    public static int [] getHistogramData(int [] a, int n) //[0, n]
    {
        var hist = new int[n + 1];

        for (var val : a)
            ++hist[val];

        return hist;
    }

    public static int [] getRandomArray(int n, int min, int max) //[min, max)
    {
        return getRandomArray(new Random(), n, min, max);
    }


    public static int [] getRandomArray(Random r, int n, int min, int max) //[min, max)
    {
        var a = new int[n];

        for (var i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }

    public static int[][] getRandomMatrix(int m, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(new Random(), m, n, min, max);
    }

    public static int[][] getRandomMatrix(Random r, int m, int n, int min, int max) //[min, max)
    {
        var a = new int[m][];

        for (var i = 0; i < m; ++i)
            a[i] = getRandomArray(r, n, min, max);

        return a;
    }

    public static int[][] getRandomSquareMatrix(int n, int min, int max) //[min, max)
    {
        return getRandomSquareMatrix(new Random(), n, min, max);
    }

    public static int[][] getRandomSquareMatrix(Random r, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(r, n, n, min, max);
    }

    public static boolean isEmpty(int [] a)
    {
        return a.length == 0;
    }


    public static boolean isMatrix(int [][] a)
    {
        var col = a[0].length;

        for (var i = 1; i < a.length; ++i)
            if (a[i].length != col)
                return false;

        return true;
    }

    public static boolean isSquareMatrix(int [][] a)
    {
        return isMatrix(a) && a.length == a[0].length;
    }

    public static int [] join(int [] a, int...b)
    {
        var res = new int[a.length + b.length];
        var index = 0;

        for (var val : a)
            res[index++] = val;

        for (var val : b)
            res[index++] = val;

        return res;
    }

    public static String join(String [] s, char delim)
    {
        return join(s, delim + "");
    }

    public static String join(String [] s, String delim)
    {
        return join(s, s.length, delim);
    }

    public static String join(ArrayList<String> list, char delim)
    {
        return join(list, delim + "");
    }

    public static String join(ArrayList<String> list, String delim)
    {
        var str = "";

        for (var o : list)
            str += o + delim;

        return str.substring(0, str.length() - delim.length());
    }

    public static String join(String [] s, int n, char delim)
    {
        return join(s, n, delim + "");
    }

    public static String join(String [] s, int n, String delim)
    {
        var sb = new StringBuilder();

        for (var i = 0; i < n; ++i)
            sb.append(s[i]).append(delim);

        return sb.substring(0, sb.length() - delim.length());
    }

    public static int max(int [] a)
    {
         var maxVal = a[0];

        for (var i = 1; i < a.length; ++i)
            if (maxVal < a[i])
                maxVal = a[i];

        return maxVal;
    }

    public static int max(int [][] a)
    {
        var maxVal = Integer.MIN_VALUE;

        for (var array : a)
            for (var val : array)
                if (maxVal < val)
                    maxVal = val;

        return maxVal;
    }

    public static BigDecimal max(BigDecimal [] bigDecimals)
    {
        var res = bigDecimals[0];

        for (var i = 1; i < bigDecimals.length; ++i)
            res = res.max(bigDecimals[i]);

        return res;
    }

    public static int min(int [] a)
    {
        var minVal = a[0];

        for (var i = 1; i < a.length; ++i)
            if (minVal > a[i])
                minVal = a[i];

        return minVal;
    }

    public static int min(int [][] a)
    {
        var minVal = Integer.MAX_VALUE;

        for (var array : a)
            for (var val : array)
                if (minVal > val)
                    minVal = val;

        return minVal;
    }

    public static BigDecimal min(BigDecimal [] bigDecimals)
    {
        var res = bigDecimals[0];

        for (var i = 1; i < bigDecimals.length; ++i)
            res = res.min(bigDecimals[i]);

        return res;
    }

    public static char [] reverse(char [] a)
    {
        new StringBuilder(a.length)
                .append(a)
                .reverse()
                .getChars(0, a.length, a, 0);

        return a;
    }

    public static int[] resizeActual(int [] a, int size)
    {
        if (size == a.length)
            return a;

        if (size < a.length)
            return copy(a, new int[size], size);

        return copy(a, new int[size]);
    }

    public static int[] resize(int [] a, int size)
    {
        if (size <= a.length)
            return a;

        return copy(a, new int[size]);
    }

    public static int [] reverse(int [] a)
    {
        var halfLen = a.length / 2;

        for (var i = 0; i < halfLen; ++i) {
            var temp = a[i];

            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }

        return a;
    }


    public static int sum(int...a)
    {
        return sum(0, a);
    }

    public static int sum(int init, int...a)
    {
        var total = init;

        for (var val : a)
            total += val;

        return total;
    }

    public static int sumDiagonal(int [][] a)
    {
        if (!isSquareMatrix(a))
            throw new IllegalArgumentException("Kare matris gereklidir");

        var total = 0;

        for (var i = 0; i < a.length; ++i)
            total += a[i][i];

        return total;
    }

    public static BigDecimal sum(BigDecimal [] bigDecimals)
    {
        var result = BigDecimal.ZERO;

        for (var bigDecimal : bigDecimals)
            result = result.add(bigDecimal);

        return result;
    }

    public static int [][] transpose(int [][] a)
    {
        var t = new int[a[0].length][a.length];

        for (var i = 0; i < a.length; ++i)
            for (var j = 0; j < a[i].length; ++j)
                t[j][i] = a[i][j];

        return t;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CommandUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.util;

public final class CommandLineUtil {
    private CommandLineUtil() {}

    private static void doWorkForControl(String msg)
    {
        Console.Error.writeLine(msg);
        System.exit(-1);
    }

    public static void controlForLengthEqual(String [] args, int val, String msg)
    {
        if (args.length != val)
            doWorkForControl(msg);
    }

    public static void controlForLengthGreater(String [] args, int val, String msg)
    {
        if (args.length <= val)
            doWorkForControl(msg);
    }

    public static void controlForLengthGreaterOrEqual(String [] args, int val, String msg)
    {
        if (args.length < val)
            doWorkForControl(msg);
    }

    public static void controlForLengthLess(String [] args, int val, String msg)
    {
        if (args.length >= val)
            doWorkForControl(msg);
    }

    public static void controlForLengthLessOrEqual(String [] args, int val, String msg)
    {
        if (args.length > val)
            doWorkForControl(msg);
    }

    public static String [] getCommandLineArgs(String [] args, String msg)
    {
        if (args.length == 0)
            return Console.read(msg).split("[ \t\r]+");

        return args;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.math.BigInteger;

public final class NumberUtil {
	private static final BigInteger TWO = BigInteger.valueOf(2); // For Java versions before 9
	private static final BigInteger THREE = BigInteger.valueOf(3);
	private static final BigInteger FIVE = BigInteger.valueOf(5);
	private static final BigInteger SEVEN = BigInteger.valueOf(7);
	private static final BigInteger ELEVEN = BigInteger.valueOf(11);

	private static int [] getDigits(long val, int n)
	{
		val = Math.abs(val);
		var count = val == 0 ? 1 : (int)(Math.log10(val) / n + 1);
		var divisor = (int)Math.pow(10, n);
		var digits = new int[count];

		for (var i = count - 1; i >= 0; --i) {
			digits[i] = (int)(val % divisor);
			val /= divisor;
		}

		return digits;
	}

	private static String numToStrMax3DigitsTR(int n)
	{
		if (n == 0)
			return "sıfır";

		var ones = new String[]{"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
		var tens = new String[]{"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};
		var str = n < 0 ? "eksi" : "";

		n = Math.abs(n);

		var a = n / 100;
		var b = n / 10 % 10;
		var c = n % 10;

		if (a != 0) {
			if (a != 1)
				str += ones[a];
			str += "yüz";
		}

		if (b != 0)
			str += tens[b];

		if (c != 0)
			str += ones[c];

		return str;
	}

	private NumberUtil() {}

	public static long factorial(int n)
	{
		if (n < 0)
			return  -1;

		var result = 1L;

		for (var i = 2L; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(long val)
	{
		return getDigits(val, 1);
	}

	public static int [] getDigitsInThrees(long val)
	{
		return getDigits(val, 3);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)(Math.log10(Math.abs(val)) + 1);
	}

	public static int getDigitsSum(int val)
	{
		var sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getFibonacciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		var prev1 = 0;
		var prev2 = 1;
		var result = 0;

		for (var i = 2; i < n; ++i) {
			result = prev1 + prev2;
			prev1 = prev2;
			prev2 = result;
		}

		return result;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		var count = 0;
		var val = 0;

		for (var i = 2; count < n; ++i)
			if (isPrime(i)) {
				++count;
				val = i;
			}

		return val;
	}

	public static int [] getPrimes(int n)
	{
		var count = 0;
		var primes = new int[n];

		for (var i = 2; count < n; ++i)
			if (isPrime(i)) {
				primes[count] = i;
				++count;
			}

		return primes;
	}

	public static int getReverse(int val)
	{
		var rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		var n = getDigitsCount(val);
		var temp = val;
		var sum = 0;

		while (temp != 0) {
			sum += Math.pow(temp % 10, n);
			temp /= 10;
		}

		return sum == val;
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static boolean isPrime(BigInteger val)
	{
		if (val.compareTo(BigInteger.ONE) <= 0)
			return false;

		if (val.mod(TWO).equals(BigInteger.ZERO))
			return val.equals(TWO);

		if (val.mod(THREE).equals(BigInteger.ZERO))
			return val.equals(THREE);

		if (val.mod(FIVE).equals(BigInteger.ZERO))
			return val.equals(FIVE);

		if (val.mod(SEVEN).equals(BigInteger.ZERO))
			return val.equals(SEVEN);

		var sqrtVal = val.sqrt();

		for (var i = ELEVEN; i.compareTo(sqrtVal) <= 0; i = i.add(TWO))
			if (val.mod(i).equals(BigInteger.ZERO))
				return false;

		return true;
	}

	public static boolean isPrime(long val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		var sqrtVal = (long)Math.sqrt(val);

		for (var i = 11L; i <= sqrtVal; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPrime(int val)
	{
		return isPrime((long)val);
	}

	public static int min(int a, int b, int c)
	{
		return (a < b) ? (a < c ? a : c) : (b < c ? b : c);
	}

	public static int max(int a, int b, int c)
	{
		return (a > b) ? (a > c ? a : c) : (b > c ? b : c);
	}

	public static String numToStrTR(long n)
	{
		//TODO:Homework
		return numToStrMax3DigitsTR((int)n);
	}

}

/*----------------------------------------------------------------------------------------------------------------------
    StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public final class StringUtil {
	private static char getRandomChar(Random r, String s)
	{
		return s.charAt(r.nextInt(s.length()));
	}

	private StringUtil() {}


	public static String changeCase(String s)
	{
		var sb = new StringBuilder(s);

		var len = sb.length();

		for (var i = 0; i < len; ++i) {
			var ch = sb.charAt(i);

			if (Character.isUpperCase(ch))
				sb.setCharAt(i, Character.toLowerCase(ch));
			else if (Character.isLowerCase(ch))
				sb.setCharAt(i, Character.toUpperCase(ch));
		}

		return sb.toString();
	}

	public static int getCount(String s1, String s2)
	{
		var count = 0;
		var index = 0;

		while ((index = s1.indexOf(s2, index)) != -1) {
			++count;
			++index;
		}

		return count;
	}

	public static String getLetters(String s)
	{
		var str = "";
		var len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String getRandomString(int n, String str)
	{
		return getRandomString(new Random(), n, str);
	}

	public static String getRandomString(Random r, int n, String str)
	{
		var c = new char[n];

		for (var i = 0; i < n; ++i)
			c[i] = getRandomChar(r, str);

		return new String(c);
	}

	public static String getRandomStringTR(int n)
	{
		return getRandomStringTR(new Random(), n);
	}

	public static String getRandomStringTR(Random r, int n)
	{
		var alphabet = "ABCÇDEFGĞHIİJKLMNOÖPRSŞTUÜVYZabcçdefgğhıijklmnoöprsştuüvyz";

		return getRandomString(r, n, alphabet);
	}

	public static boolean isPalindirome(String s)
	{
		var str = getLetters(s);

		var halfLen = str.length() / 2;
		var len = str.length();

		for (var i = 0; i < halfLen; ++i) {
			var chLeft = Character.toLowerCase(str.charAt(i));
			var chRight = Character.toLowerCase(str.charAt(len - 1 - i));

			if (chLeft != chRight)
				return false;
		}

		return true;
	}

	public static boolean isPangramEN(String str)
	{
		var alphabet = "abcdefghijklmnopqrstuvwxyz";

		return isPangram(str.toLowerCase(), alphabet);
	}

	public static boolean isPangramTR(String str)
	{
		var alphabet = "abcçdefgğhıijklmnoöprsştuüvyz";

		return isPangram(str.toLowerCase(), alphabet);
	}

	public static boolean isPangram(String str, String alphabet)
	{
		var len = alphabet.length();

		for (var i = 0; i < len; ++i) {
			var ch = alphabet.charAt(i);

			if (str.indexOf(ch) == -1)
				return false;
		}

		return true;
	}

	public static String padLeft(String s, int len, char ch)
	{
		var sLen = s.length();

		if (len <= sLen)
			return s;

		return repeat(len - sLen, ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		var sLen = s.length();

		if (len <= sLen)
			return s;

		return s + repeat(len - sLen, ch);

	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeWhitespaces(String s)
	{
		var str = "";

		int len = s.length();

		for (var i = 0; i < len; ++i) {
			var ch = s.charAt(i);

			if (!Character.isWhitespace(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		return repeat(n, ch + "");
	}

	public static String repeat(int n, String s)
	{
		var len = s.length();
		var c = new char[n * len];

		for (var i = 0; i < c.length; i += len) {
			for (var k = 0; k < len; ++k)
				c[i + k] = s.charAt(k);
		}

		return new String(c);
	}

	public static String reverse(String s)
	{
		return new StringBuilder(s).reverse().toString();
	}

	public static String [] split(String str, String delim, StringSplitOptions options)
	{
		var regex = "[";

		var delimLen = delim.length();

		for (var i = 0; i < delimLen; ++i) {
			char ch = delim.charAt(i);

			regex += ch == ']' || ch == '[' ? "\\" + ch : ch;
		}

		regex += ']';
		if (StringSplitOptions.REMOVE_EMPTY_ENTRIES == options)
			regex += '+';

		return str.split(regex);
	}


	public static String squeeze(String s1, String s2)
	{
		var len = s1.length();
		var sb = new StringBuilder(len);

		for (var i = 0; i < len; ++i) {
			var ch = s1.charAt(i);

			if (s2.indexOf(ch) == -1)
				sb.append(ch);
		}

		return sb.toString();
	}

	public static String toUpper(String str)
	{
		return str.toUpperCase();
	}

	public static String trimLeft(String s)
	{
		var i = 0;
		var len = s.length();

		for (; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}

	public static String trimRight(String s)
	{
		var i = s.length() - 1;

		for (; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının fill metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = new int[10];

        Arrays.fill(a, 67);

        ArrayUtil.display(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının fill metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        boolean [] flags = new boolean[10];

        Arrays.fill(flags, true);

        for (var flag : flags)
            Console.writeLine(flag);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının fill metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        boolean [] flags = new boolean[10];

        Arrays.fill(flags, 2, 5, true); //[2, 5)

        for (var flag : flags)
            Console.writeLine(flag);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
       int [] a = ArrayUtil.getRandomArray(10, 0 ,101);

       ArrayUtil.display(2, a);

       int [] newArray = Arrays.copyOf(a, 20);

        ArrayUtil.display(2, newArray);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
       int [] a = ArrayUtil.getRandomArray(10, 0 ,101);

       ArrayUtil.display(2, a);

        a = Arrays.copyOf(a, 20);

        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları eleman sayısı küültülmüş yeni bir dizi döndürebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
       int [] a = ArrayUtil.getRandomArray(10, 0 ,101);

       ArrayUtil.display(2, a);

        a = Arrays.copyOf(a, 5);

        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları eleman sayısı küültülmüş yeni bir dizi döndürebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int n = 10;
        int newSize = 20;
        int [] a = ArrayUtil.getRandomArray(n, 0 ,101);

        ArrayUtil.display(2, a);

        a = Arrays.copyOf(a, newSize);
        Arrays.fill(a, n, newSize, -1);
        ArrayUtil.display(2, a);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metodu ile bir dizinin kopyası çıkartılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4};
        int [] b;

        b = Arrays.copyOf(a, a.length);

        ArrayUtil.display(a);
        ArrayUtil.display(b);

        Console.writeLine(a == b);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	ArrayUtil sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.app;

import org.csystem.util.ArrayUtil;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5};

        ArrayUtil.display(ArrayUtil.resize(a, 10));
        ArrayUtil.display(a);
        ArrayUtil.display(ArrayUtil.resizeActual(a, 3));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOfRange metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5, 6, 7, 8};
        int [] b;

        b = Arrays.copyOfRange(a, 2, 4);

        ArrayUtil.display(a);
        ArrayUtil.display(b);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının equals metotları ile aynı türden diziler eşitlik karşılaştırmasına sokulabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5, 6, 7, 8};
        int [] b = {1, 2, 3, 4, 5, 6, 7, 8};

        System.out.println(Arrays.equals(a, b));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: int türden iki matrisin eşit olup olmadığını test eden equals isimli metodu ArrayUtil
    sınıfına ekleyiniz. Matris olmaması durumunda metot false değerini döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

public class App {
    public static void main(String[] args)
    {
        int [][] a = {{1, 2, 3}, {4, 5, 6}};
        int [][] b = {{1, 2, 3}, {4, 5, 7}};

        Console.writeLine(ArrayUtil.equals(a, b));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir dizi dizisinin tüm satırlarını ikinci paramatresi ile aldığı varargs
    değişkene göre değerlerle dolduran fill metodunu yazınız. Satır sayısından az sayıda değer verilmesi durumunda
    verilen değerler kadar doldurulacaktır.

    int [][] a = new int[3][4];

    fill(a, 10, 20, 30)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

public class App {
    public static void main(String[] args)
    {
        int [][] a = new int[3][4];

        ArrayUtil.fill(a, 3, 5, 7);

        ArrayUtil.display(a);


    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının compare metodu dizleri karşılaştırmak için kullanılır. Birinci parametresi ile
    aldığı dizi ikinci parametresi ile aldığı diziden küçükse yani ilk farklı elemanlar elde edildiğinde birinci dizinin
    ilgili elemanı küçükse negatif, büyükse pozitif, eğer diziler eşitse sıfır değerini döndürür.
    Bu metot Java 9 ile eklenmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, -6, 3, 4, 5, 6, 7, 8};
        int [] b = {1, 3};

        System.out.println(Arrays.compare(a, b));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir dizi dizisinin Arrays sınıfının compare maetotlarının
    karşılaştırma kriterine göre en büyük dizisinin bir kopyasını döndüren getMaxComparedArray isimli metodu yazınız
    ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

public class App {
    public static void main(String[] args)
    {
        int [][] a = {{1, 2, 3}, {4, 8, 10}, {7}};

        var min = ArrayUtil.getMinComparedArray(a);
        var max = ArrayUtil.getMaxComparedArray(a);

        ArrayUtil.display(min);
        ArrayUtil.display(max);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının sort metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var a = ArrayUtil.getRandomArray(20, 1, 100);

        ArrayUtil.display(2, a);
        Arrays.sort(a);
        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının sort metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var a = ArrayUtil.getRandomArray(20, 1, 100);

        ArrayUtil.display(2, a);
        Arrays.sort(a, 2, 6);
        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının toString metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var a = ArrayUtil.getRandomArray(20, 1, 100);

        ArrayUtil.display(2, a);

        System.out.println(Arrays.toString(a));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının metotlarının bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var deviceInfo = new DeviceInfo("test", "192.168.234", 2567, 50500, 4545);

        System.out.println(deviceInfo.toString());
    }
}

class DeviceInfo {
    private String m_name;
    private String m_host;
    private int [] m_ports;

    public DeviceInfo(String name, String host, int...ports)
    {
        m_name = name;
        m_host = host;
        m_ports = Arrays.copyOf(ports, ports.length);
        Arrays.sort(m_ports);
    }

    //...

    public String toString()
    {
        return String.format("%s:%s:%s", m_name, m_host, Arrays.toString(m_ports));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının compareUnsigned metotları ile işaretsiz karşılaştırma yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {0x80000B00, 0x9000AB00};
        int [] b = {0x0000B00, 0x0000AB00};

        ArrayUtil.display(a);
        ArrayUtil.display(b);

        System.out.println(Arrays.compare(a, b));
        System.out.println(Arrays.compareUnsigned(a, b));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Integer sınıfının işaretsiz sayılar için işlem yapan parseUnsignedInt metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int val = Integer.parseUnsignedInt(kb.nextLine());

        System.out.println(val);
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Bir metodun kendini kendinisini çağırması ile (recursion) ile başka bir metodu çağırması arasında
    teknik olarak bir fark yoktur. Özyinelemeli metotlar bir şekilde sonlandırılmazas sürekli kendisi çağırdığından
    exception oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.foo();
    }
}

class Sample {
    public static void foo()
    {
        foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Özyinelemeli metotlarını çalışmasını anlatan basit bir örnek
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.foo(4);
    }
}

class Sample {
    public static void foo(int val)
    {
        System.out.printf("Giriş:%d%n", val);
        if (val == 0)
            return;

        foo(val - 1);
        System.out.printf("Çıkış:%d%n", val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    RecursionUtil sınıfının factorial metodu
        public static long factorial(int n)
        {
            long res = 1;

            if (n <= 0)
                return 1;

            res = n * factorial(n - 1);

            return res;
        }
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

public class App {
    public static void main(String[] args)
    {
        FactorialTest.run();
    }
}

class FactorialTest {
    public static void run()
    {
        for (int n = 0; n <= 17; ++n)
            System.out.printf("%d!=%d%n", n, RecursionUtil.factorial(n));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir yazının tersten iteratif yöntemle yazdırılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        WriteReverseTest.run();
    }
}

class WriteReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            Util.writeReverse(str);

            System.out.println();

            if (str.equals("exit"))
                break;
        }
    }
}

class Util {
    public static void writeReverse(String str)
    {
        int len = str.length();

        while (len -- > 0)
            System.out.print(str.charAt(len));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bir yazının tersten özyinelemeli olarak yazdırılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        WriteReverseTest.run();
    }
}

class WriteReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            RecursionUtil.writeReverse(str);

            System.out.println();

            if (str.equals("exit"))
                break;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir yazı tersyüz etme işleminin iteratif olarak yapılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        GetReverseTest.run();
    }
}

class GetReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            String s = Util.getReverse(str);

            System.out.println(s);

            if (str.equals("exit"))
                break;
        }
    }
}

class Util {
    public static String getReverse(String str)
    {
        int left = 0;
        int right = str.length() - 1;
        char [] c = str.toCharArray();

        while (left < right) {
            char temp = c[left];
            c[left++] = c[right];
            c[right--] = temp;
        }

        return new String(c);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir yazı tersyüz etme işleminin özyinelemeli olarak yapılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        GetReverseTest.run();
    }
}

class GetReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            String s = RecursionUtil.getReverse(str);

            System.out.println(s);

            if (str.equals("exit"))
                break;
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Fibonnaci sayısının bulunması işleminin özyinelemeli olarak çözümü

    Fibonacci: 0 1 1 2 3 5 8 13 21 34 ...
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        GetFibonnaciTest.run();
    }
}

class GetFibonnaciTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("n değerini giriniz:");
            int n = Integer.parseInt(kb.nextLine());
            if (n == 0)
                break;

            int val = RecursionUtil.getFibonacci(n);

            System.out.printf("%d. Fibonacci sayısı:%d%n", n, val);
        }
    }
}


/*---------------------------------------------------------------------------------------------------------------------
    Soru: Bir sayıyı System.out.write kullanarak yani sadece char ekrana basan bir metot kullanarak
    yazdıran programı yazınız (özyinelemeli çözüm)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        WriteNumberTest.run();
    }
}

class WriteNumberTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());
            RecursionUtil.writeNumber(n);
            System.out.println();

            if (n == 0)
                break;
        }
    }
}

package org.csystem.util;

import java.io.PrintStream;

public final class RecursionUtil {
    private static final PrintStream ms_out = System.out;

    private static void getReverse(char[] c, int left, int right)
    {
        if (left >= right)
            return;

        char temp;

        temp= c[left];
        c[left] = c[right];
        c[right] = temp;

        getReverse(c, left + 1, right - 1);
    }

    private static void writeReverse(String str, int i)
    {
        if (i == str.length())
            return;

        writeReverse(str, i + 1);
        ms_out.print(str.charAt(i));
    }

    private RecursionUtil()
    {}

    public static long factorial(int n)
    {
        if (n <= 0)
            return 1;

        return n * factorial(n - 1);
    }

    public static String getReverse(String str)
    {
        char [] c = str.toCharArray();

        getReverse(c, 0, c.length - 1);

        return new String(c);
    }

    public static int getFibonacci(int n)
    {
        if (n <= 2)
            return n - 1;

        return getFibonacci(n - 1) + getFibonacci(n - 2);
    }

    public static void writeNumber(int val)
    {
        if (val < 0) {
            ms_out.write('-');
            val = -val;
        }

        if (val / 10 != 0)
            writeNumber(val / 10);

        ms_out.write((char)(val % 10 + '0'));
    }

    public static void writeNumber(int val, int radix)
    {
        if (val < 0) {
            ms_out.write('-');
            val = -val;
        }

        if (val / radix != 0)
            writeNumber(val / radix, radix);

        ms_out.write((char)(val % radix >= 10 ? val % radix - 10 + 'A' : '0' + val % radix));
    }

    public static void writeReverse(String s)
    {
        writeReverse(s, 0);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Java' da içiçe tür bildirimleri geçerlidir. Sınıf içerisinde sınıf bildirimleri genel olarak Java'da
    4(dört) şekilde yapılabilir:
    1. static sınıf bildirimi (nested)
    2. non-static sınıf bildirimi (inner)
    3. Yerel sınıf bildirimi (local)
    3. İsimsiz sınıf bildirimi (anonymous)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Hiç bir tür içerisinde bulunmayan bir sınıf (top level classes) static olarak bildirilemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

static class A { //error

}

/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıf içerisinde başka bir sınıf static olarak bildirilebilir. Yani içteki sınıf dıştaki sınıfın bir
    elemanıdır (member). Dolayısıyla bir eleman static olabileceğinden (ctor hariç) sınf da static anahtar sözcüğü
    ile bildirilebilir. Tüm sınıf elemanlarında olduğu gibi içte bildirilen bir sınıf erişim belirleyici alabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    public static class B {
        //...
    }

    private static class C {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilmiş sınıflar normal sınıflarda olduğu gibi elemanlara sahip olabilirler. static bildirilmiş
    sınıflara onu kapsayan sınıf dışından kapsadığı sınıf ismi ve nokta operatörü ile erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B b = new A.B();

        b.x = 10;
        b.foo();

        A.B.bar();
    }
}

class A {
    public static class B {
        public int x;

        public void foo()
        {

        }

        public static void bar()
        {

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilmiş sınıflara erişim için import static deyimi kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.app.A.B;

class App {
    public static void main(String[] args)
    {
        B b = new B();

        b.x = 10;
        b.foo();

        B.bar();
    }
}

class A {
    public static class B {
        public int x;

        public void foo()
        {

        }

        public static void bar()
        {

        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Kapsayan sınıfta static olarak bildirilen bir sınıfın elemanlarına erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.tar(10);
    }
}

class A {
    public void tar(int val)
    {
        B x = new B();

        x.foo();
        x.x = val;

        B.bar();
    }
    public static class B {
        public int x;

        public void foo()
        {
            System.out.println("foo");
        }

        public static void bar()
        {
            System.out.println("bar");
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Kapsayan sınıfta static olarak bildirilen bir sınıfın private elemanlarına da erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.tar(10);
    }
}

class A {
    public void tar(int val)
    {
        B x = new B();

        x.foo();
        x.m_x = val;

        B.bar();
    }

    public static class B {
        private int m_x;

        public void foo()
        {
            System.out.println("foo");
        }

        public static void bar()
        {
            System.out.println("bar");
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilen bir sınıf kapsayan sınıfın private elemanlarına da erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B x = new A.B();

        x.foo();
    }
}

class A {
    private int m_x;
    public void tar(int val)
    {
        System.out.println("A.tar");
    }

    public static class B {
        private int m_x;

        public void foo()
        {
            System.out.println("foo");

            A x = new A();

            x.tar(20);
            x.m_x = 10;
        }

        public static void bar()
        {
            System.out.println("bar");
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    static bildirilen bir sınıf kapsayan sınıfın private elemanlarına da erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B x = new A.B();

        x.foo();
    }
}

class A {
    private static void foo()
    {
        System.out.println("A.foo");
    }
    public static class B {
        public void foo()
        {
            System.out.println("B.foo");
            A.foo();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilen bir sınıf kapsayan sınıfın private elemanlarına da erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B.foo();
    }
}

class A {
    private static void foo()
    {
        System.out.println("A.foo");
    }
    public static class B {
        public static void foo()
        {
            System.out.println("B.foo");
            A.foo();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki gibi bir tasarımda static bildirilmiş sınıf kullanılabilir (builder pattern)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        var builder = new AlertDialog.Builder();

       // builder.setTitle("Dikkat");
        builder.setMessage("Kapatmak istediğinize emin misiniz?");
        builder.setButton(Button.YESNO);
        //builder.setMessageIcon(MessageIcon.QUESTION);
        var dlg = builder.build();

        dlg.show();
    }
}

enum Button {OK, YESNO, YESNOCANCEL}
enum MessageIcon {INFORMATION, QUESTION, ALERT, WARNING}

class AlertDialog {
    private String m_title;
    private String m_message;
    private Button m_button;
    private MessageIcon m_messageIcon;

    private AlertDialog()
    {
        m_title = "";
        m_message = "";
        m_button = Button.OK;
        m_messageIcon = MessageIcon.INFORMATION;
    }

    public static class Builder {
        private AlertDialog m_alertDialog;

        public Builder()
        {
            m_alertDialog = new AlertDialog();
        }

        public void setTitle(String title)
        {
            //...
            m_alertDialog.m_title = title;
        }

        public void setMessage(String message)
        {
            //...
            m_alertDialog.m_message = message;
        }

        public void setButton(Button button)
        {
            //...
            m_alertDialog.m_button = button;
        }

        public void setMessageIcon(MessageIcon messageIcon)
        {
            //...
            m_alertDialog.m_messageIcon = messageIcon;
        }

        public AlertDialog build()
        {
            return m_alertDialog;
        }
    }

    public void show()
    {
        System.out.printf("Title:%s%n", m_title);
        System.out.printf("Message:%s%n", m_message);
        System.out.printf("Button:%s%n", m_button);
        System.out.printf("Message Icon:%s%n", m_messageIcon);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Android geliştirmede kullanılan meşhur R sınıfı içerisinde static bildirilmiş sınıflar olacak biçimde tasarlanmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        //...
    }
}


class View {
    //...
}

class EditText extends View {
    //...
}

class TextView extends View {
    //...
}

class Context {
    public View findViewById(int id)
    {
        ///
        return new View();
    }

}
class Activity extends Context {
    //...
    private EditText m_editTextName;
    private TextView m_textViewName;

    public void onCreate()
    {
        //...
        m_editTextName = (EditText)findViewById(R.id.MAINACTIVITY_EDITTEXT_NAME);
        m_textViewName = (TextView)findViewById(R.id.MAINACTIVITY_TEXTVIEW_NAME);
    }
    //...
}

class R {
    public static class id {
        public static final int MAINACTIVITY_EDITTEXT_NAME = 0x123456;
        public static final int MAINACTIVITY_TEXTVIEW_NAME = 0x123457;
    }

    public static class string {
        public static final int label_name = 0x123455;
        public static final int ok_button_text = 0x123458;
    }
    public static class color {
        public static final int white_color = 0x12987;
    }

    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıf içerisinde non-static olarak bildirilmiş bir sınıf olabilir (inner class)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    //...
    public class B {

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıfın static elemanları olamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    //...
    public class B {
        public static int a; //error

        public static void foo() //error
        {

        }

        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıf türürün nesne kapsayan sınıf dışında <referans>.new sentaksı ile
    yaratılabilir. Yani bir inner sınıf türünden nesne için ait olduğu bir kapsayan sınıf nesnesi olmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a1 = new A();
        A.B y = a1.new B();
        A.B z = a1.new B();
        A a2 = new A();
        A.B t = a2.new B();
    }
}

class A {
    public class B {

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıf o nesnenin ilişkin olduğu kapsayan sınıf nesnesinin non-static veri elemanlarına
    doğrudan erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();
        A.B b = a.new B();

        b.foo(34);
        System.out.printf("a.val:%d%n", a.getVal());

        var c = a.new B();

        c.foo(67);

        System.out.printf("a.val:%d%n", a.getVal());
    }
}

class A {
    private int m_val;

    public int getVal() {return m_val;}

    public class B {
        public void foo(int val)
        {
            m_val = val;
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıf o nesnenin ilişkin olduğu kapsayan sınıf nesnesinin non-static veri elemanlarına
    doğrudan erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.doWorkForVal(-20);

        System.out.println(a.getVal());
        //...
    }
}

class A {
    private int m_val;

    private class B {
        public void doWork(int val)
        {
            m_val = Math.abs(val);
        }
    }

    public int getVal() {return m_val;}

    public void doWorkForVal(int val)
    {
        B x = new B();

        x.doWork(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.doWorkForVal(-20);

        System.out.println(a.getVal());
        //...
    }
}

class A {
    private int m_val;

    private class B {
        public void doWork(int val)
        {
            m_val = Math.abs(val);
        }
    }

    public int getVal() {return m_val;}

    public static void doWorkForVal(int val)
    {
        B x = new B(); //error:

        x.doWork(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Tekrar: non-static metotlarının çağrılarının arakoda çevrilmiş temsili karşılığı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        x.foo(10);

        //Temsili arakod karşılığı
        A.foo(x, 10);
    }
}

class A {
    private int m_val;
    public void foo(int val)
    {
        m_val = val;
    }

    //Temsili arakod karşılığı:
    public static void foo(A a, int val)
    {
        a.m_val = val;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Tekrar: this referansı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        x.foo(10);
    }
}

class A {
    private int m_val;
    public void foo(int val)
    {
        this.m_val = val;
        this.bar();
    }

    public void bar()
    {

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Tekrar: this referansı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    private int val;

    public A(int val)
    {
        this.val = val;
    }
    public int getVal() {return val;}

    public void setVal(int val)
    {
        //...
        this.val = val;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki örnekte x referansına ilişkin aşağıdaki gibi this referansı kullanılarak yaratılmış olur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.doWorkForVal(-20);

        System.out.println(a.getVal());
        //...
    }
}

class A {
    private int m_val;

    private class B {
        public void doWork(int val)
        {
            m_val = Math.abs(val);
        }
    }

    public int getVal() {return m_val;}

    public void doWorkForVal(int val)
    {
        B x = this.new B();

        x.doWork(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    this expression
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        A.B y = x.new B();

        y.foo();
    }
}

class A {
    private int m_val;

    public void foo()
    {
        System.out.println("A.foo");
    }

    public class B {
        private int m_val;
        public void foo()
        {
            System.out.println("B.foo");
            A.this.foo();
            A.this.m_val = 10;
            this.m_val = 20;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    this expression
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        x.a = 20;
        A.B y = x.new B();

        y.bar();
    }
}

class Sample {
    public static void doWork(A a)
    {
        a.foo();
    }
}

class A {
    public int a;
    public void foo()
    {
        System.out.printf("a=%d%n", a);
        System.out.println("A.foo");
    }

    public class B {
        public void bar()
        {
            System.out.println("B.bar");
            Sample.doWork(A.this);
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Zincir çağırma kalıbı (fluent pattern)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.foo().bar().tar().foo();
    }
}

class Sample {
    //...
    public Sample foo()
    {
        System.out.println("foo");

        return this;
    }

    public Sample bar()
    {
        System.out.println("bar");

        return this;
    }

    public Sample tar()
    {
        System.out.println("tar");

        return this;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Builder kalıbının fluent kalıbı ile kullanımı (fluent builder)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        var builder = new AlertDialog.Builder();

        var dlg = builder
                .setTitle("Dikkat")
                .setMessage("Emin misiniz?")
                .setButton(Button.OK)
                .build();

        dlg.show();

    }
}

enum Button {OK, YESNO, YESNOCANCEL}
enum MessageIcon {INFORMATION, QUESTION, ALERT, WARNING}

class AlertDialog {
    private String m_title;
    private String m_message;
    private Button m_button;
    private MessageIcon m_messageIcon;

    private AlertDialog()
    {
        m_title = "";
        m_message = "";
        m_button = Button.OK;
        m_messageIcon = MessageIcon.INFORMATION;
    }

    public static class Builder {
        private AlertDialog m_alertDialog;

        public Builder()
        {
            m_alertDialog = new AlertDialog();
        }

        public Builder setTitle(String title)
        {
            //...
            m_alertDialog.m_title = title;

            return this;
        }

        public Builder setMessage(String message)
        {
            //...
            m_alertDialog.m_message = message;

            return this;
        }

        public Builder setButton(Button button)
        {
            //...
            m_alertDialog.m_button = button;

            return this;
        }

        public Builder setMessageIcon(MessageIcon messageIcon)
        {
            //...
            m_alertDialog.m_messageIcon = messageIcon;

            return this;
        }

        public AlertDialog build()
        {
            return m_alertDialog;
        }
    }

    public void show()
    {
        System.out.printf("Title:%s%n", m_title);
        System.out.printf("Message:%s%n", m_message);
        System.out.printf("Button:%s%n", m_button);
        System.out.printf("Message Icon:%s%n", m_messageIcon);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static sınıfların bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        CountdownTimerEvent.StartEvent startEvent = new CountdownTimerEvent.StartEvent();
        TimerEvent.ProgressEvent progressEvent = new TimerEvent.ProgressEvent();

        //...
    }
}

class CountdownTimerEvent {
    public static class StartEvent {
        //...
    }

    public static class ProgressEvent {
        //...
    }

    public static class StopEvent {
        //...
    }
}

class TimerEvent {
    public static class StartEvent {
        //...
    }

    public static class ProgressEvent {
        //...
    }

    public static class StopEvent {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf içerisinde enum türü bildirilebilir. enum türlerinin doğası gereği bildirimin static olup olmamasının
    bir önemi yoktur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    private enum Color {RED, GREEN, BLUE}
    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıf bildirimi bir metot içerisinde yapılıyorsa bu sınıflara yerel (local) sınıflar denir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {

        }

        class B {

        }
    }


    public void bar()
    {
        class A {

        }

        class B {

        }

        class C {

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar faaliyet alanı bakımından bildirildikleri yerden bildirildikleri bloğun sonuna kadar
    görülebilirdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {

        }

        A x = new A();

        class B {
            public void foo()
            {

            }
        }

        B y = new B();

        y.foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar faaliyet alanı bakımından bildirildikleri yerden bildirildikleri bloğun sonuna kadar
    görülebilirdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        for (int i = 0; i < 10; ++i) {
            class A {

            }

            A x = new A();
        }

        A y; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aynı faaliyet alanı içerisinde aynı isimde yerel sınıf bildirimi geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {

        }

        for (int i = 0; i < 10; ++i) {
            class A { //error

            }

            A x = new A();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki durum geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        for (int i = 0; i < 10; ++i) {
            class A {

            }

            A x = new A();
        }

        class A {

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar erişim belirleyici ile bildirilemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        public class A { //error

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar static olarak bildirilemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        static class A { //error

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar başka bir sınıftan türetilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class X {

}

class Sample {
    public void foo()
    {
        class A extends X {
            //...
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel bir sınıf başka bir yerel sınıftan türetilebilir. Bu durumda taban sınıf isminin geçerli olması
    için taban yerel sınıfın türemiş yerel sınıftan önce bildirilmesi gerekir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {
            //...
        }

        class  B extends  A {
            //...
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel bir sınıf kendisinden önce bildirilen yerel değişkenleri ve parametre değişkenlerini yakalayabilir (capture)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Sample.foo(20);
    }
}

class Sample {
    public static void foo(int val)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz");
        int a = Integer.parseInt(kb.nextLine());

        class Util {
            public boolean isEven() {return val % 2 == 0;}
            public boolean isOdd() {return a % 2 != 0;}
        }

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar içerisinde yakalanan yerel veya parametre değişkenleri faaliyet alanı içerisinde tek bir değer
    alabilirler. Yani değerleri değiştirilemez. Java 8 ile birlikte yakalnmış olan yerel veya parametre
    değişkenlerine "effective final" değişkenler denir. Java 8 öncesinde yakalanabilecek değişkenler final
    yapılmak zorundaydı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Sample.foo(20);
    }
}

class Sample {
    public static void foo(int val)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz");
        int a = Integer.parseInt(kb.nextLine());

        class Util {
            public boolean isEven() {return val % 2 == 0;} //error
            public boolean isOdd() {return a++ % 2 != 0;} //error:
        }

        val = 12;

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıfların static elemanları olamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.foo(20);
    }
}

class Sample {
    public static void foo(int val)
    {
        class A {
            public static int a; //error

            public static void foo(int a) //error
            {

            }
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar içerisinde sınıfın veri elemanları kullanılabilir hatta değişiklik de yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.val = 10;
        Sample.foo(20);

        System.out.println(Sample.val);
    }
}

class Sample {
    public static int val;

    public static void foo(int a)
    {
        class Util {
            public boolean isEven() {return a % 2 == 0;}
            public boolean isOdd() {return Sample.val++ % 2 != 0;}
        }

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar içerisinde sınıfın veri elemanları kullanılabilir hatta değişiklik de yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.val = 11;

        s.foo(20);

        System.out.println(s.val);
    }
}

class Sample {
    public int val;

    public void foo(int a)
    {
        class Util {
            public boolean isEven() {return a % 2 == 0;}
            public boolean isOdd() {return Sample.this.val++ % 2 != 0;}
        }

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar bazı durumlarda test yapmakta kullanılabilir. Aşağıdaki işlemi ileride daha profesyonel tekniklerle
    yapacağız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.displaySqrt(-20);
    }
}

class Sample {
    public static final boolean DEBUG = false;

    private void foo(int val)
    {
        if (DEBUG) {
            class TestUtil {
                public boolean isNonnegative()
                {
                    return val >= 0;
                }
            }
            var tu = new TestUtil();

            if (!tu.isNonnegative()) {
                System.out.println("Invalid value");
                System.exit(-1);
            }
        }
        System.out.println(Math.sqrt(val));
    }

    public void displaySqrt(int val)
    {
        if (val >= 0)
            foo(val);
        else
            System.out.println("Geçersiz değer");
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar bazı durumlarda test yapmakta kullanılabilir. Aşağıdaki işlemi ileride daha profesyonel tekniklerle
    yapacağız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.displaySqrt(20);
    }
}

class SampleTest {
    public static void test(int val)
    {
        class TestUtil {
            public boolean isNonnegative()
            {
                return val >= 0;
            }
        }
        var tu = new TestUtil();

        if (!tu.isNonnegative()) {
            System.out.println("Invalid value");
            System.exit(-1);
        }

        System.out.println("OK");
    }
}

class Sample {
    public static final boolean DEBUG = false;

    private void foo(int val)
    {
        if (DEBUG)
            SampleTest.test(val);

        System.out.println(Math.sqrt(val));
    }

    public void displaySqrt(int val)
    {
        if (val >= 0)
            foo(val);
        else
            System.out.println("Geçersiz değer");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Anahtar Notlar: İşlemli atama operatörlerinin genel biçimi
    T1 t1;
    T2 t2;

    t1 op= t2

    t1 = (T1)(t1 op t2);
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        int a = 10;

        a += Math.pow(a, 3); // a = (int)(a + Math.pow(a, 3));

        System.out.println(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıf bildiriminin genel biçimi:
    new <tür>([argümanlar]) {
        //...
    }
    Yukarıdaki bildirim bir anonim sınıf bildirimidir aynı zamanda da bir nesne yaratılması işlemidir. Yani anonim
    sınıf bildirimi new operatörüne yazılan türden türetilmiş eğer inteface implemente edilmiş olan bir sınıfın
    hem bildirimi hemde o sınıf türünden nesne yaratılması görevini verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample() {};
        Sample k = new Sample() {};

        System.out.println(s.getClass().getName());
        System.out.println(k.getClass().getName());
    }
}

class Sample {

}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıf bir türetme (inheritance) işlemi olduğundan aşağıdaki kod geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample() {}; //error:
        Sample k = new Sample() {}; //error:

        System.out.println(s.getClass().getName());
        System.out.println(k.getClass().getName());
    }
}

final class Sample {

}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte foo metodu çağrıldığında foo metodunu çağıran referansın gösterdiği nesnenin referans sayısı bir
    artırılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;


class App {
    public static void main(String[] args)
    {
        Mample m = new Mample();

        new Sample().foo(m);
        //referans sayacı:1
        m.setSample(new Sample());
        //...
    }
}

class Mample {
    private Sample m_sample;

    public void setSample(Sample s)
    {
        m_sample = s;
    }
}

class Sample {
    public void foo(Mample m)
    {
        m.setSample(this);
        System.out.println("Sample.foo");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki durumda bellek sızıntısı (memory leak) oluşur. yaratılan nesne program sonuna kadar garbage collected
    duruma gelemeyeceği için ölemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        new Sample().foo();
        //...
    }
}

class Sample {
    public Sample s;

    public void foo()
    {
        s = this;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte liste boşaltına kadar tüm yaratılan nesneler kesin yaşarlar
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String[] args)
    {
        for (int i = 0; i < 10; ++i)
            new Sample();

        System.out.println(Sample.list.size());

        Sample.list.clear();
    }
}

class Sample {
    public final static ArrayList list = new ArrayList();

    public Sample()
    {
        list.add(this);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıflar abstract sınıflar türünden yaratılıyorsa bu durumda abstract sınıfın tüm abstract metotları
    override edilmek zorundadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample() {
            public void foo()
            {
                System.out.println("Anonim Sample.foo");
            }
            public void bar()
            {
                System.out.println("Anonim Sample.bar");
            }
        };

        s.foo();
    }
}

abstract class Sample {
    public abstract void foo();
    public abstract void bar();

    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıfların abstract sınıflardan türetilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        var helper = new OperationHelper(10);

        System.out.println(helper.doOperation(20));
    }
}

class OperationHelper {
    private UnaryOperations m_unaryOperations;

    public OperationHelper(int val)
    {
        m_unaryOperations = new UnaryOperations(val) {
            public int apply(int val)
            {
                return val + this.val;
            }
        };

        System.out.println(m_unaryOperations.getClass().getName());
    }

    public int doOperation(int val)
    {
        return m_unaryOperations.apply(val);
    }
}

abstract class UnaryOperations {
    protected int val;

    protected UnaryOperations(int val)
    {
        this.val = val;
    }

    public abstract int apply(int val);
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte UnaryOperations sınıfının ctor'u protected olmasına karşın anonim sınıf
    bildirimi yapıldığı için sorun oluşmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.UnaryOperations;

class App {
    public static void main(String[] args)
    {
        var helper = new OperationHelper(10);

        System.out.println(helper.doOperation(20));
    }
}

class OperationHelper {
    private UnaryOperations m_unaryOperations;

    public OperationHelper(int val)
    {
        m_unaryOperations = new UnaryOperations(val) {
            public int apply(int val)
            {
                return val + this.val;
            }
        };

        System.out.println(m_unaryOperations.getClass().getName());
    }

    public int doOperation(int val)
    {
        return m_unaryOperations.apply(val);
    }
}

package org.csystem.util;

public abstract class UnaryOperations {
    protected int val;

    protected UnaryOperations(int val)
    {
        this.val = val;
    }

    public abstract int apply(int val);
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıflar da yerel sınıflarda olduğu kendisinden önce bildirilen yerel değişkenleri
    ve parametre değişkenleri yakalayabilirler.
    Bu durumda yine final olmayan bir yerel değişken veya parametre değişkeni için effectively
    final kuralları geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.UnaryOperation;

class App {
    public static void main(String[] args)
    {
        var helper = new OperationHelper(10);

        System.out.println(helper.doOperation(20));
    }
}

class OperationHelper {
    private UnaryOperation m_unaryOperations;

    public OperationHelper(int a)
    {
        m_unaryOperations = new UnaryOperation() {
            public int apply(int val)
            {
                return a + val;
            }
        };
    }

    public int doOperation(int val)
    {
        return m_unaryOperations.apply(val);
    }
}

package org.csystem.util;

public abstract class UnaryOperation {
    //...
    public abstract int apply(int val);
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağdaki örnekte OperationHelper sınıfı işlemi de dışarıdan alacak şekilde tasarlanmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Operation;
import org.csystem.util.OperationHelper;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int value = Integer.parseInt(kb.nextLine());

        var operation = new Operation() {
            public int apply(int val)
            {
                return val * value;
            }
            public int apply(int a, int b)
            {
                return value + a + b;
            }
        };

        var helper = new OperationHelper(operation);

        System.out.println(helper.doUnaryOperation(10));
        System.out.println(helper.doBinaryOperation(2, 3));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki işlem aşağıdaki gibi de yapılabilir. Bu durumda okunabilirliğe dikkat edilmesi
    gerekir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Operation;
import org.csystem.util.OperationHelper;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int value = Integer.parseInt(kb.nextLine());

        var helper = new OperationHelper(new Operation() {
            public int apply(int val)
            {
                return val * value;
            }
            public int apply(int a, int b)
            {
                return value + a + b;
            }
        });

        System.out.println(helper.doUnaryOperation(10));
        System.out.println(helper.doBinaryOperation(2, 3));
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki yukarıdakiler içerisinde en okunabilir olanıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Operation;
import org.csystem.util.OperationHelper;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Application.run();
    }
}

class Application {
    private static Operation getOperation(int value)
    {
        return new Operation() {
            public int apply(int val)
            {
                return val * value;
            }
            public int apply(int a, int b)
            {
                return value + a + b;
            }
        };
    }

    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int value = Integer.parseInt(kb.nextLine());

        var helper = new OperationHelper(getOperation(value));
        System.out.println(helper.doUnaryOperation(10));
        System.out.println(helper.doBinaryOperation(2, 3));
    }
}

package org.csystem.util;

public class OperationHelper {
    private Operation m_unaryOperation;

    public OperationHelper(Operation unaryOperation)
    {
        m_unaryOperation = unaryOperation;
    }

    public int doBinaryOperation(int a, int b)
    {
        return m_unaryOperation.apply(a, b);
    }

    public int doUnaryOperation(int val)
    {
        return m_unaryOperation.apply(val);
    }
}

package org.csystem.util;

public abstract class Operation {
    //...
    public abstract int apply(int val);
    public abstract int apply(int a, int b);
}

/*----------------------------------------------------------------------------------------------------------------------
    Timer sınıfı sınıfı timer işlemlerinde kullanılan temel sınıflardan biridir. Bu sınıfın scheduleXXX metotları
    ile ayrı bir akış oluşturulur ve girilen perioda göre TimerTask referansı ile aldğı türe ilişkin
    run metodu çağrılır. Aşağıdaki örnekte main metodu bitse bile timer ın devam ettiğine dikkat ediniz. Bu tarz
    arka plan akışlara non-daemon thread denir. Bu konu ileride ele alınacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Timer t = new Timer();

        t.schedule(new TimerTask() {
            public void run()
            {
                System.out.print(".");
            }
        }, 0, 30);

        System.out.println("Tekrar yapınız");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte TimerTask sınıfının cancel metodu ile TimerTask durudurulmuştur. Ancak Timer
    durdurulmamıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç tane nokta konsun?");
        int n = Integer.parseInt(kb.nextLine());

        Timer t = new Timer();

        t.schedule(new TimerTask() {
            private int m_count;

            public void run()
            {
                if (m_count == n) {
                    cancel();
                    return;
                }
                System.out.print('.');
                ++m_count;

            }
        }, 0, 1000);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte Timer durdurulmuştur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç tane nokta konsun?");
        int n = Integer.parseInt(kb.nextLine());

        Timer t = new Timer();

        t.schedule(new TimerTask() {
            private int m_count;

            public void run()
            {
                if (m_count == n) {
                    t.cancel();
                    return;
                }

                System.out.print('.');
                ++m_count;

            }
        }, 0, 1000);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte TimeUnit enum türü kullanılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.TimerUtil;

import java.util.Scanner;
import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç tane nokta konsun?");
        int n = Integer.parseInt(kb.nextLine());

        TimerUtil.show(n, '.', 0, 2, TimeUnit.SECONDS);
    }
}

package org.csystem.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

public final class TimerUtil {
    public static void show(int count, char ch, long delay, long period, TimeUnit timeUnit)
    {
        long delayInMs = TimeUnit.MILLISECONDS.convert(delay, timeUnit);
        long periodInMs = TimeUnit.MILLISECONDS.convert(period, timeUnit);

        Timer t = new Timer();

        t.schedule(new TimerTask() {
            private int m_count;

            public void run()
            {
                if (m_count == count) {
                    t.cancel();
                    return;
                }

                System.out.print(ch);
                ++m_count;
            }
        }, delayInMs, periodInMs);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Basit bir digital saat örneği
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Time;

import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Timer timer = new Timer();

        timer.schedule(new TimerTask() {
            public void run()
            {
                Time now = new Time();

                System.out.printf("%s\r", now);
            }
        }, 0, 1000);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Basit bir Timer sınıfı ve test kodu. Bu sınıf Timer sınıfı kullanılarak geliştirilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CSDTimer;
import org.csystem.util.ITimerTask;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        CSDTimer timer = new CSDTimer(0, 1, TimeUnit.SECONDS);

        timer.start(new ITimerTask() {
            public void run()
            {
                System.out.print(".");
            }
        });
        System.out.println("Tekrar yapınız");
    }
}

package org.csystem.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

public class CSDTimer {
    private Timer m_timer;
    private long m_delay;
    private long m_period;

    public CSDTimer(long delay, long period, TimeUnit timeUnit)
    {
        m_timer = new Timer();
        m_delay = TimeUnit.MILLISECONDS.convert(delay, timeUnit);
        m_period = TimeUnit.MILLISECONDS.convert(period, timeUnit);
    }

    public void start(ITimerTask timerTask)
    {
        m_timer.schedule(new TimerTask() {
            public void run()
            {
                timerTask.run();
            }
        }, m_delay, m_period);
    }

    public void cancel()
    {
        m_timer.cancel();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıda açıklanan sınıfı yazınız:
    Açıklamalar:
    1. Sınıfın ismi CountDownTimer olacaktır

    2. Sınıf abstract olarak yazılacak ve tek bir ctor'unda millisaniye cinsinden toplam zamanı ve
    period değerini milisaniye cinsinden alacaktır. Örnek bir kullanım aşağıdaki gibidir:

    new CountDownTimer(10000, 1000) {...}

    3. Sınıfın onTick ve onFinish isimli iki adet abstract metodu olacaktır. onTick metodu
    her periyotta çağrılan, onFinish metodu ise geriye sayım bittiğinde çağrılan metot olarak
    alınacaktır. onTick metodu her çağrıldığında kalan zamanı milisaniye cinsinden alan bir
    parametesi olacaktır. Örnek bir kullanım:

     new CountdownTimer(10000, 1000) {
        public void onTick(long millisUntilFinished)
        {
            //Her adımda yapılacak iş
        }

        public void onFinish()
        {
            // Geri sayım bittiğinde yapılacak iş
        }
     }
    4. Sınıfın final start metodu ile timer başlatılacaktır
    5. Sınfın cancel isimli metodu geriye sayım timer'ını durdurmak için kullanılacaktır
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.app;

import org.csystem.util.CountDownTimer;

class App {
    public static void main(String[] args)
    {
        var countDownTimer = new CountDownTimer(10000, 1000) {
            public void onTick(long millisUntilFinished)
            {
                System.out.printf("%02d\r", millisUntilFinished / 1000);
            }

            public void onFinish()
            {
                onTick(0);
                System.out.println("\nGeri sayım bitti");
            }
        };

        countDownTimer.start();
    }
}


package org.csystem.app;

import org.csystem.util.CountDownTimer;

class App {
    public static void main(String[] args)
    {
        var myCountDownTimer = new MyCountDownTimer(5000, 1000);

        myCountDownTimer.start();
    }
}

class MyCountDownTimer extends CountDownTimer {
    public MyCountDownTimer(long millisFuture, long interval)
    {
        super(millisFuture, interval);
    }

    public void onTick(long millisUntilFinished)
    {
        System.out.printf("%02d\r", millisUntilFinished / 1000);
    }

    public void onFinish()
    {
        onTick(0);
        System.out.println("\nGeri sayım bitti");
    }
}

package org.csystem.app;

import org.csystem.util.CountDownTimer;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        var countDownTimer = new CountDownTimer(10, 1, TimeUnit.SECONDS) {
            public void onTick(long timeUntilFinished)
            {
                System.out.printf("%02d\r", timeUntilFinished);
            }

            public void onFinish()
            {
                onTick(0);
                System.out.println("\nGeri sayım bitti");
            }
        };

        countDownTimer.start();
    }
}


package org.csystem.app;

import org.csystem.util.CountDownTimer;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        var countDownTimer = new CountDownTimer(10, 2, 1, TimeUnit.SECONDS) {
            public void onTick(long timeUntilFinished)
            {
                System.out.printf("%02d\r", timeUntilFinished);
            }

            public void onFinish()
            {
                onTick(0);
                System.out.println("\nDers başlıyor");
            }
        };

        countDownTimer.start();
    }
}

package org.csystem.app;

import org.csystem.util.CountDownTimer;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        var countDownTimer = new CountDownTimer(20, 1, TimeUnit.MINUTES) {
            public void onTick(long timeUntilFinished)
            {
                System.out.printf("%02d\r", timeUntilFinished);
            }

            public void onFinish()
            {
                onTick(0);
                System.out.println("\nDers başlıyor");
            }
        };

        countDownTimer.start();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CountDownTimer sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

import static java.util.concurrent.TimeUnit.*;

public abstract class CountDownTimer {
    private Timer m_timer;
    private long m_future, m_delay, m_interval;
    private TimerTask m_timerTask;
    private TimeUnit m_timeUnit;

    private TimerTask getTimerTask()
    {
        return new TimerTask() {
            private long m_value;

            public void run()
            {
                var value = m_future - m_value;
                var timeUntilFinished = m_timeUnit == MILLISECONDS ? value : m_timeUnit.convert(value, MILLISECONDS);

                onTick(timeUntilFinished);
                m_value += m_interval;
                if (m_value < m_future)
                    return;

                onFinish();
                m_timer.cancel();
            }
        };
    }

    private void initTimer()
    {
        m_timer = new Timer();
        m_timerTask = getTimerTask();
    }

    protected CountDownTimer(long millisFuture, long interval)
    {
        this(millisFuture, interval, TimeUnit.MILLISECONDS);
    }

    protected CountDownTimer(long future, long interval, TimeUnit timeUnit)
    {
        this(future, 0, interval, timeUnit);
    }

    CountDownTimer(long future, long delay, long interval, TimeUnit timeUnit)
    {
        if (future < interval)
            throw new IllegalArgumentException("interval must be less or equal than future");

        m_timeUnit = timeUnit;
        m_future = timeUnit == MILLISECONDS ? future : MILLISECONDS.convert(future, m_timeUnit);
        m_delay = timeUnit == MILLISECONDS ? delay : MILLISECONDS.convert(delay, m_timeUnit);
        m_interval = timeUnit == MILLISECONDS ? interval : MILLISECONDS.convert(interval, m_timeUnit);
        this.initTimer();
    }

    public abstract void onTick(long timeUntilFinished);
    public abstract void onFinish();

    public final void start()
    {
        m_timer.schedule(m_timerTask, m_delay, m_interval);
    }

    public final void cancel()
    {
        m_timer.cancel();
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    CountDownTimerEx sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CountDownTimer;
import org.csystem.util.CountDownTimerEx;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        var countDownTimer = new CountDownTimerEx(10, 3, 1, TimeUnit.SECONDS) {
            public void onStart()
            {
                System.out.println("Geri sayım az sonra başlayacak...");
            }
            public void onTick(long timeUntilFinished)
            {
                System.out.printf("%02d\r", timeUntilFinished);
            }

            public void onFinish()
            {
                onTick(0);
                System.out.println("\nGeri sayım bitti");
            }
        };

        countDownTimer.startTimer();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CountDownTimerEx sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.concurrent.TimeUnit;

public abstract class CountDownTimerEx extends CountDownTimer {
    protected CountDownTimerEx(long millisFuture, long interval)
    {
        this(millisFuture, interval, TimeUnit.MILLISECONDS);
    }

    protected CountDownTimerEx(long future, long interval, TimeUnit timeUnit)
    {
        this(future, 0, interval, timeUnit);
    }

    protected CountDownTimerEx(long future, long delay, long interval, TimeUnit timeUnit)
    {
        super(future, delay, interval, timeUnit);
    }

    public void startTimer()
    {
        this.onStart();
        super.start();
    }

    public abstract void onStart();
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte x'in türü ne boolean ne de double olacaktır. Bu8na yönelik kullanılabilecek genel bir
    türden olacaktır (Kabaca Comparable interface türünden). ileride daha detaylı olarak anlatılacak
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String[] args)
    {
        int a = Console.readInt("Bir sayı giriniz:");
        var x = a > 0 ? true : 3.4;

        System.out.println(x);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte x'in türü int double türüne dönüşebildiğinden double olacaktır. Buna yönelik derleyici kod üretir.
    ileride daha detaylı olarak anlatılacak
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String[] args)
    {
        int a = Console.readInt("Bir sayı giriniz:");
        var x = a > 0 ? 10 : 3.4;

        System.out.println(x);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte non-static initializer ile adeta nesneye (anonim) ilk değer verme biçiminde kullanabiliyoruz.
    Aşağıdaki kodun temsili eşdeğeri:
    class App$1 extends Point {
        {
            x = 10;
            y = 20;
        }
    }
    p = new App$1();
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Point p = new Point() {{x = 10; y = 30;}};

        System.out.println(p.getClass().getName());
        System.out.println(p);
    }
}

class Point {
    public int x, y;

    public Point()
    {}

    public Point(int x, int y)
    {
        this.x = x;
        this.y = y;
    }

    //...

    public void offset(int dxy)
    {
        offset(dxy, dxy);
    }
    public void offset(int dx, int dy)
    {
        x += dx;
        y += dy;
    }

    public String toString()
    {
        return String.format("(%d, %d)", x, y);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte yine non-static initilizer yazılarak adeta ilk değer verilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String[] args)
    {
        ArrayList list = new ArrayList() {{add("ankara"); add("istanbul"); add("zonguldak");}};

        System.out.println(list.getClass().getName());

        System.out.println(list);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arayüzler ile de anonim sınıflar bildirilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IX ix = new IX() {
            public void foo()
            {
                System.out.println("foo");
            }
            public void bar()
            {
                System.out.println("bar");
            }
        };


        System.out.println(ix.getClass().getName());
        ix.foo();
        ix.bar();
    }
}

interface IX {
    void foo();
    void bar();
}

/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerinin genel biçimleri: (Since Java 8)
    1. (değişken listesi) -> ifade
    2. (değişken listesi) -> {...}
    3. değişken -> ifade
    4. değişken -> {...}
    5. () -> ifade
    6. () -> {...}
    7. (<tür değişken listesi>) -> ifade
    8. (<tür değişken listesi>) -> {...}

    Lambda ifadeleri uygun fonksiyonel arayüz referanslarına atanabilir. Fonksiyonel olmayan arayüz referanslarına
    atanamaz.
    Hatırlatma: İçerisinde bir ve yalnız bir tane abstract metot olan arayüzlere fonksiyonel arayüzler denir.
    Bir lambda ifadesi aslında atandığı fonksiyonel arayüzün abstract metodunun yerine geçen metodun yazılmasıdır
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
Aşağıdaki örnek anonim sınıf kullanılarak aşağıdaki gibi yazılabilir:

    IIntBinaryOperator op = new IIntBinaryOperation() {
        public int apply(int a, int b)
        {
            return a + b;
        }
    };

    System.out.println(op.apply(10, 10));
    System.out.println(op.apply(20, 30));

Ancak lambda ifadelerinin arka plandaki yazılışları (closure) tam olarak böyle değildir. Bu ileride ele alınacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IIntBinaryOperator op = (a, b) -> a + b;

        System.out.println(op.apply(10, 10));
        System.out.println(op.apply(20, 30));
    }
}

interface IIntBinaryOperator {
    int apply(int a, int b);
}


/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerinin bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IIntBinaryOperator op = (a, b) -> a + b;

        System.out.println(op.apply(10, 10));
        System.out.println(op.apply(20, 30));

        op = (a, b) -> a * b;

        System.out.println(op.apply(10, 10));
        System.out.println(op.apply(20, 30));
    }
}

interface IIntBinaryOperator {
    int apply(int a, int b);
}

/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadeleri uygun fonksiyonel arayüzlere atanabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IIntUnaryOperator op = a -> a * a;

        System.out.println(op.apply(10));
    }
}

interface IIntUnaryOperator {
    int apply(int val);
}


/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerinin kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IIntUnaryOperator op = a ->  {
            System.out.printf("a=%d%n", a);

            return a * a;
        };

        System.out.println(op.apply(10));
    }
}

interface IIntUnaryOperator {
    int apply(int val);
}

/*----------------------------------------------------------------------------------------------------------------------
    Generic fonksiyonel arayüzler ile lambda ifadesinin kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IBinaryOperator<Integer> opInt = (a, b) -> a + b;

        System.out.println(opInt.apply(10, 20));

        IBinaryOperator<String> opStr = (name, surname) -> name + " " + surname;

        System.out.println(opStr.apply("oğuz", "karan"));
    }
}

interface IBinaryOperator<T> {
    T apply(T t1, T t2);
}

/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerinin parametre değişkenleri (-> dan önceki değişkenler) yerel değişken kabul edilir ve
    ilgili Lambda ifadesi boyunca görülebilirdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IUnaryOperator<Integer> opInt = a -> a * a;
        IUnaryOperator<String> opStr = a -> a.toUpperCase();

        System.out.println(opInt.apply(10));
        System.out.println(opStr.apply("ankara"));
    }
}

interface IUnaryOperator<T> {
    T apply(T t1);
}

/*----------------------------------------------------------------------------------------------------------------------
    Lamda ifadelerinde parametre değişkenleri yerel değişkenlerdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        int a = 10;

        IUnaryOperator<Integer> opInt = a -> a * a; //error
        IUnaryOperator<String> opStr = a -> a.toUpperCase(); //error

        System.out.println(opInt.apply(10));
        System.out.println(opStr.apply("ankara"));
    }
}

interface IUnaryOperator<T> {
    T apply(T t1);
}

/*----------------------------------------------------------------------------------------------------------------------
    Lamda ifadeleri içerisinde kendisinden önce bildirilen yerel değişkenler kullanılabilir. Bu yerel değişkenler de
    effectively final olur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String[] args)
    {
        int val = Console.readInt("Bir sayı giriniz:");

        IUnaryOperator<Integer> opInt = a -> a + val;

        System.out.println(opInt.apply(10));
    }
}

interface IUnaryOperator<T> {
    T apply(T t1);
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDTimer sınıfının Lambda ifadesi ile kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CSDTimer;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        var timer = new CSDTimer(0, 1, TimeUnit.SECONDS);

        timer.start(() -> System.out.print('.'));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerinin kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IFunction<String, Integer> convert = s -> s.length();

        System.out.println(convert.apply("ankara"));
    }
}

interface IFunction<T, R> {
    R apply(T t);
}

/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerinin kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        CityInfo ci = Util.create((p, n) -> new CityInfo(p, n), 34, "istanbul");

        System.out.println(ci);

        String fullName = Util.create((s1, s2) -> s2 + " " + s1, "karan", "oğuz");

        System.out.println(fullName);

        CityInfoFactory factory = new CityInfoFactory();

        CityInfo ci2 = Util.create((p, n) -> factory.create(p, n), 34, "istanbul");

        System.out.println(ci2);
    }
}

interface IBiFunction<T, U, R> {
    R apply(T t, U u);
}

class Util {
    public static <T, U, R> R create(IBiFunction<T, U, R> biFunction, T t, U u)
    {
        return biFunction.apply(t, u);
    }
}

class CityInfoFactory {
    //...
    public CityInfo create(int plate, String name)
    {
        //...
        return new CityInfo(plate, name);
    }
}

class CityInfo {
    private int m_plate;
    private String m_name;

    public CityInfo(int plate, String name)
    {
        m_plate = plate;
        m_name = name;
    }

    public int getPlate()
    {
        return m_plate;
    }

    public void setPlate(int plate)
    {
        m_plate = plate;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public String toString()
    {
        return String.format("%d-%s", m_plate, m_name);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki örneğin metot referansları ile yapılışı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        CityInfo ci = Util.create(CityInfo::new, 34, "istanbul");

        System.out.println(ci);

        String fullName = Util.create((s1, s2) -> s2 + " " + s1, "karan", "oğuz");

        System.out.println(fullName);

        CityInfoFactory factory = new CityInfoFactory();

        CityInfo ci2 = Util.create(factory::create, 34, "istanbul");

        System.out.println(ci2);
    }
}

interface IBiFunction<T, U, R> {
    R apply(T t, U u);
}

class Util {
    public static <T, U, R> R create(IBiFunction<T, U, R> biFunction, T t, U u)
    {
        return biFunction.apply(t, u);
    }
}

class CityInfoFactory {
    //...
    public CityInfo create(int plate, String name)
    {
        //...
        return new CityInfo(plate, name);
    }
}

class CityInfo {
    private int m_plate;
    private String m_name;

    public CityInfo(int plate, String name)
    {
        m_plate = plate;
        m_name = name;
    }

    public int getPlate()
    {
        return m_plate;
    }

    public void setPlate(int plate)
    {
        m_plate = plate;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public String toString()
    {
        return String.format("%d-%s", m_plate, m_name);
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Lambda parametreleri içerisinde tür kullanılabilir. Ancak tür kullanılsa bile lambda ifadesinin atanacağı
    referansın var olarak bildirilmesi geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IFunction<Integer, Integer> integerFunc = (Integer a) -> a * a;
        var intFunc = (int a) -> a + ""; //error


    }
}

interface IIntFunction<R> {
    R apply(int val);
}
interface IFunction<T, R> {
    R apply(T t);
}

/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerine ilişkin parametrelerin uyumlu verilmesi zorunludur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        ILongOperator op = (int a, int b) -> a + b; //error
    }
}

interface ILongOperator {
    long apply(long a, long b);
}



/*----------------------------------------------------------------------------------------------------------------------
    Fonksiyonel arayüz referanslarına eğer elimizde tam uyumlu bir metot varsa :: ile aşağıdaki gibi bir
    atama yapılabilir. Aşağıdaki örnekte add metodu apply metodu yerine geçmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IIntOperator op = Operation::add; //method reference: (a, b) -> Operation.add(a, b);

        System.out.println(op.apply(10, 20));
    }
}

class Operation {
    public static int add(int a, int b)
    {
        return a + b;
    }
}

interface IIntOperator {
    int apply(int a, int b);
}

/*----------------------------------------------------------------------------------------------------------------------
    non-static metotlar da :: ile kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        var operation = new Operation(3);

        IIntOperator op = operation::add; //method reference: (a, b) -> operation.add(a, b);

        System.out.println(op.apply(10, 20));
    }
}

class Operation {
    private int m_val;

    public Operation(int val)
    {
        m_val = val;
    }

    public int add(int a, int b)
    {
        return a + b + m_val;
    }
}

interface IIntOperator {
    int apply(int a, int b);
}

/*----------------------------------------------------------------------------------------------------------------------
    <sınıf ismi>::new sentaksı ctor çağrılmasını sağlayan sentakstır. Bu durumda interface'in ilgili sınıf
    türüne dönen bir tan abstract metodu olmalıdır. Ayrıca sınıfın da bu abstract metodun parametrik yapısına
    uygun bir ctor'u bulunmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IFactory<Sample> sampleFactory = Sample::new; //() -> new Sample();

        Sample s = sampleFactory.create();

        //
    }
}

class Sample {
    public Sample()
    {
        System.out.println("Sample.Sample()");
    }
    //...
}

interface IFactory<T> {
    T create();
}

/*----------------------------------------------------------------------------------------------------------------------
    <sınıf ismi>::new sentaksı ctor çağrılmasını sağlayan sentakstır. Bu durumda interface'in ilgili sınıf
    türüne dönen bir tan abstract metodu olmalıdır. Ayrıca sınıfın da bu abstract metodun parametrik yapısına
    uygun bir ctor'u bulunmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IFactory<String, Sample> sampleFactory = Sample::new; //() -> new Sample();

        Sample s = sampleFactory.create("ankara");

        //
    }
}

class Sample {
    public Sample(String val)
    {
        System.out.println("Sample.Sample(String)");
    }
    //...
}

interface IFactory<T, R> {
    R create(T t);
}

/*----------------------------------------------------------------------------------------------------------------------
    Method referensı çeşitleri:
    1. static metot referansı (reference to a static method)
    2. Bir nesneye ilişkin non static metot referansı (reference to an instance (non-static) method of particular object)
    3. Bir türe ilişkin non-static metot referansı (reference to an instance (non-static) method of any object of a particular type)
    4. Ctor referansı (reference to a constructor)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Random;

class App {
    public static void main(String[] args)
    {
        IIntBinaryOperator op = Operation::add; //1

        System.out.println(op.apply(10, 20));
        System.out.println("///////////////////////////////");
        IIntPredicate pred = NumberUtil::isPrime; //1

        System.out.println(pred.test(1_000_003) ? "Asal" : "Asal değil");

        System.out.println("///////////////////////////////");
        Random r = new Random();

        IIntSupplier supplier = r::nextInt; //2 () -> r.nextInt();

        System.out.println(supplier.get());
        System.out.println("///////////////////////////////");

        IRandomIntOperation randomOperation = Random::nextInt;//3 rand -> rand.nextInt()

        System.out.println(randomOperation.get(r));

        System.out.println("///////////////////////////////");

        IStringToIntConverter converter = String::length; //3

        System.out.println(converter.convert("ankara"));
        System.out.println("///////////////////////////////");

        IFactoryInt<Sample> factoryInt = Sample::new; //4

        Sample s = factoryInt.create(10);

        System.out.println(s.getVal());

        System.out.println("///////////////////////////////");
        IRandomIntBoundOperation randomIntBoundOperation = Random::nextInt; //3: (rand, val) -> rand.nextInt(val)

        System.out.println(randomIntBoundOperation.get(r, 100));
    }
}

class Operation {
    public static int add(int a, int b)
    {
        return a + b;
    }
}

interface IFactoryInt<T> {
    T create(int val);
}

class Sample {
    private int m_val;

    public Sample(int val)
    {
        m_val = val;
        System.out.println("Sample.Sample(int)");
    }

    public int getVal()
    {
        return m_val;
    }
}

interface IRandomIntBoundOperation {
    int get(Random r, int bound);
}
interface IRandomIntOperation {
    int get(Random r);
}

interface IIntSupplier {
    int get();
}

interface IIntPredicate {
    boolean test(int val);
}

interface IStringToIntConverter {
    int convert(String s);
}
interface IIntBinaryOperator {
    int apply(int a, int b);
}



/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        String [] s = {"ankara", "istanbul", "izmir", "zonguldak"};

        ConvertUtil.display(s, String::length);
        System.out.println("*********************");
        ConvertUtil.display(s, str -> str.length());
    }
}

class ConvertUtil {
    public static <T, R> void display(T [] a, IBiFunction<T, R> biFunction)
    {
        for (T t : a)
            System.out.println(biFunction.apply(t));
    }
}

interface IBiFunction<T, R> {
    R apply(T t);
}

/*----------------------------------------------------------------------------------------------------------------------
    Lambda ifadelerinin bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        String [] s = {"ankara", "istanbul", "izmir", "zonguldak"};

        ConvertUtil.display(s, String::length);
        System.out.println("*********************");
        ConvertUtil.display(s, str -> str.length());
    }
}

class ConvertUtil {
    public static <T, R> void display(T [] a, IBiFunction<T, R> biFunction)
    {
        for (T t : a)
            System.out.println(biFunction.apply(t));
    }
}

interface IBiFunction<T, R> {
    R apply(T t);
}

/*----------------------------------------------------------------------------------------------------------------------
    FunctionalUtil sınıfı ile fonksiyonel programlama kullanımı
    Not: FunctionalUtil tasarımı ve detayları önemli değildir. Burada kullanıma odaklanınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;
import org.csystem.util.function.FunctionalUtil;

class App {
    public static void main(String[] args)
    {
        int [] a = ArrayUtil.getRandomArray(10, 1, 100);
        int [] b = new int[a.length];

        ArrayUtil.display(a);
        int count = FunctionalUtil.copyIf(a, b, NumberUtil::isPrime);

        FunctionalUtil.forEach(b, count, System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    FunctionalUtil sınıfı ile fonksiyonel programlama kullanımı
    Not: FunctionalUtil tasarımı ve detayları önemli değildir. Burada kullanıma odaklanınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;
import org.csystem.util.function.FunctionalUtil;

class App {
    public static void main(String[] args)
    {
        int [] a = ArrayUtil.getRandomArray(10, 1, 100);
        int [] b = new int[a.length];

        ArrayUtil.display(a);
        int count = FunctionalUtil.copyIf(a, b, NumberUtil::isPrime);

        FunctionalUtil.forEach(b, count, val -> System.out.printf("%d ", val));

        System.out.println();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    FunctionalUtil sınıfı ile fonksiyonel programlama kullanımı
    Not: FunctionalUtil tasarımı ve detayları önemli değildir. Burada kullanıma odaklanınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;
import org.csystem.util.function.FunctionalUtil;

import java.util.Random;

class App {
    public static void main(String[] args)
    {
        int [] a = new int[10];
        int [] b = new int[a.length];
        Random r = new Random();

        FunctionalUtil.fillArray(a, () -> r.nextInt(100));
        ArrayUtil.display(a);
        int count = FunctionalUtil.copyIf(a, b, NumberUtil::isPrime);

        FunctionalUtil.forEach(b, count, val -> System.out.printf("%d ", val));

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    FunctionalUtil sınıfı ile fonksiyonel programlama kullanımı
    Not: FunctionalUtil tasarımı ve detayları önemli değildir. Burada kullanıma odaklanınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;
import org.csystem.util.function.FunctionalUtil;

import java.util.Random;

class App {
    public static void main(String[] args)
    {
        int [] a = new int[10];
        int [] b = new int[a.length];
        Random r = new Random();

        FunctionalUtil.fillArray(a, r::nextInt);
        ArrayUtil.display(a);
        int count = FunctionalUtil.copyIf(a, b, NumberUtil::isPrime);

        FunctionalUtil.forEach(b, count, val -> System.out.printf("%d ", val));

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki kod inceleyiniz:

    Aşağıdaki kodun anonim sınıf ile bir yapılış biçimi:
    Sample s = new Sample(10);

    func = new ISupplier<String>() {
        private Sample m_str = s;

        public String get()
        {
            return m_str.toString();
        }
    };

    s = new Sample(23);

    System.out.println(func.get());
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample(10);

        ISupplier<String> func = s::toString;

        System.out.println(func.get());

        s = new Sample(24);

        System.out.println(func.get());
    }
}

interface ISupplier<R> {
    R get();
}

class Sample {
    private int m_val;

    public Sample(int val)
    {
        m_val = val;
    }

    public void setVal(int val)
    {
        m_val = val;
    }

    public int getVal()
    {
        return m_val;
    }

    public String toString()
    {
        return m_val + "";
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki kod inceleyiniz:

    Aşağıdaki kodun anonim sınıf ile bir yapılış biçimi:
    Sample s = new Sample(10);

    func = new ISupplier<String>() {
        private Sample m_str = s;

        public String get()
        {
            return m_str.toString();
        }
    };

    s.setVal(67);

    System.out.println(func.get());
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample(10);

        ISupplier<String> func = s::toString;

        System.out.println(func.get());

        s.setVal(67);

        System.out.println(func.get());
    }
}

interface ISupplier<R> {
    R get();
}

class Sample {
    private int m_val;

    public Sample(int val)
    {
        m_val = val;
    }

    public void setVal(int val)
    {
        m_val = val;
    }

    public int getVal()
    {
        return m_val;
    }

    public String toString()
    {
        return m_val + "";
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Generic parametreler temel türler olarak açılamazlar. Bu durumda temel türlere ilişkin sarmalayan sınıflar
    olarak açılabilirler. Bu durumda otomatik kutulama ve otomatik kutuyu açma maliyeti programı etkileyebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IBinaryOperator<Integer> bo = (a, b) -> a + b;

        int val = bo.apply(10, 20); //auto-boxing, auto-unboxing

        System.out.println(val * val);
    }
}

interface IBinaryOperator<T> {
    T apply(T t1, T t2);
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte int türü için ayrı bir interface yazıldığından yukarıdaki kutulama ve kutuyu açma maliyeti
    ortadan kalkmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        IIntBinaryOperator intBinaryOperator = (a, b) -> a + b;

        int val = intBinaryOperator.apply(10, 20);

        System.out.println(val * val);

        IBinaryOperator<String> stringIBinaryOperator = (s1, s2) -> s1 + " " + s2;

        System.out.println(stringIBinaryOperator.apply("oğuz", "karan"));
    }
}

interface IIntBinaryOperator {
    int apply(int a, int b);
}

interface IBinaryOperator<T> {
    T apply(T t1, T t2);
}

/*----------------------------------------------------------------------------------------------------------------------
    FunctionalUtil sınıfı ile fonksiyonel programlama kullanımı
    Not: FunctionalUtil tasarımı ve detayları önemli değildir. Burada kullanıma odaklanınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;
import org.csystem.util.function.FunctionalUtil;

import java.util.Random;

class App {
    public static void main(String[] args)
    {
        String [] passwords = new String[10];
        String [] newPassWord = new String[passwords.length];

        Random r = new Random();

        FunctionalUtil.fillArray(passwords, () -> StringUtil.getRandomStringTR(r, r.nextInt(10)  + 1));
        FunctionalUtil.forEach(passwords, passwords.length, System.out::println);
        System.out.println("/////////////////////////////");
        int count = FunctionalUtil.copyIf(passwords, newPassWord, p -> p.length() > 5);

        FunctionalUtil.forEach(newPassWord, count, System.out::println);
    }
}

package org.csystem.util.function;

public final class FunctionalUtil {
    private FunctionalUtil() {}

    public static <T> int copyIf(T [] src, T [] dest, IUnaryPredicate<T> pred)
    {
        int index = 0;

        for (T t : src)
            if (pred.test(t))
                dest[index++] = t;

        return index;
    }

    public static int copyIf(int [] src, int [] dest, IIntUnaryPredicate pred)
    {
        int index = 0;

        for (int val : src)
            if (pred.test(val))
                dest[index++] = val;

        return index;
    }

    public static void forEach(int [] a, int count, IIntConsumer con)
    {
        for (int i = 0; i < count; ++i)
            con.accept(a[i]);
    }

    public static <T> void forEach(T [] a, int count, IConsumer<T> con)
    {
        for (int i = 0; i < count; ++i)
            con.accept(a[i]);
    }

    public static void fillArray(int [] a, IIntSupplier supplier)
    {
        for (int i = 0; i < a.length; ++i)
            a[i] = supplier.get();
    }

    public static <T> void fillArray(T [] a, ISupplier<T> supplier)
    {
        for (int i = 0; i < a.length; ++i)
            a[i] = supplier.get();
    }
}
package org.csystem.util.function;

public interface IConsumer<T> {
    void accept(T t);
}
package org.csystem.util.function;

public interface IIntConsumer {
    void accept(int val);
}
package org.csystem.util.function;

public interface IIntSupplier {
    int get();
}
package org.csystem.util.function;

public interface IIntUnaryPredicate {
    boolean test(int val);
}
package org.csystem.util.function;

public interface ISupplier<T> {
    T get();
}
package org.csystem.util.function;

public interface IUnaryPredicate<T> {
    boolean test(T t);
}


/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının empty metodu ile boş bir optional nesnesi elde edilebilir. Optional sınıfının isPresent
    metodu ile optional nesnesinin dolu olup olmadığı test edilebilir. Aynı zamanda isEmpty metodu ile de
    boş olup olmadığı test edilebilir. Optional sınıfının of metodu ile bir bilgi Optioanl olarak elde edilebilir.
    Optional içerisinden veri get metodu ile alınabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            optStr = r.nextBoolean() ? Optional.of(StringUtil.getRandomStringTR(r, 10)) : Optional.empty();
            if (optStr.isPresent())  // Dolu optional
                System.out.printf("Text:%s%n", optStr.get());
            else
                System.out.println("Boş optional");

            if (optStr.isEmpty())
                System.out.println("Boş optional");
            else
                System.out.printf("Text:%s%n", optStr.get());
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının ofNullable metodu aldığı parametre null ise boş, null değil se dolu optional referansı
    döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);

            if (optStr.isPresent())  // Dolu optional
                System.out.printf("Text:%s%n", optStr.get());
            else
                System.out.println("Boş optional");

            if (optStr.isEmpty())
                System.out.println("Boş optional");
            else
                System.out.printf("Text:%s%n", optStr.get());
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının orElse metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);

            System.out.println(optStr.orElse("ankara"));
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının orElseGet metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);

            System.out.println(optStr.orElseGet(() -> "Sayı:" + r.nextInt(100)));
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının orElseThrow metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            try {
                optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);

                System.out.println(optStr.orElseThrow());
            }
            catch (NoSuchElementException ex) {
                System.out.println("Boş optional");
            }
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının orElseThrow metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            try {
                optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);

                System.out.println(optStr.orElseThrow(() -> new IllegalArgumentException("Geçersiz argüman")));
            }
            catch (IllegalArgumentException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının orElseThrow metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            try {
                optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);

                System.out.println(optStr.orElseThrow(IllegalArgumentException::new));
            }
            catch (IllegalArgumentException ex) {
                System.out.println("Geçersiz argüman");
            }
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının ifPresent metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);
            optStr.ifPresent(System.out::println);
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının ifPresent metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 10; ++i) {
            optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, 10) : null);
            optStr.ifPresent(s -> System.out.printf("[%s]", s));
        }

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının filter metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Optional<String> optStr;

        for (int i = 0; i < 5; ++i) {
            int n = r.nextInt(21);
            optStr = Optional.ofNullable(r.nextBoolean() ? StringUtil.getRandomStringTR(r, n) : null);
            int val = r.nextInt(21);

            optStr.ifPresent(s -> System.out.printf("Text:%s%n", s));
            System.out.printf("val=%d%n", val);
            var optResult = optStr.filter(s -> s.length() > val);
            System.out.printf("Result:%s%n", optResult.orElse("Koşul gerçeklenmedi"));
            System.out.println("//////////////////////////");
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının map metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        RandomCityInfoApp app = new RandomCityInfoApp(10);

        app.run();
    }
}

class RandomCityInfoApp {
    private int m_count;

    public RandomCityInfoApp(int count)
    {
        m_count = count;
    }

    public void run()
    {
        for (int i = 0; i < m_count; ++i) {
            Optional<CityInfo> optCityInfo = CityInfoFactory.getRandomCityInfo();
            Optional<String> optStr = optCityInfo.map(CityInfo::toString); // ci -> ci.toString()

            System.out.println(optStr.orElse("Şehir seçilemedi"));
        }
    }
}

final class CityInfoFactory {
    private final static ArrayList<CityInfo> ms_cityInfos = new ArrayList<>();
    private final static Random ms_random = new Random();

    static {
        ms_cityInfos.add(new CityInfo(34, "istanbul"));
        ms_cityInfos.add(new CityInfo(6, "ankara"));
        ms_cityInfos.add(new CityInfo(35, "izmir"));
        ms_cityInfos.add(new CityInfo(67, "zonguldak"));
        ms_cityInfos.add(null);
        ms_cityInfos.add(null);
        ms_cityInfos.add(null);
    }
    private CityInfoFactory() {}

    public static Optional<CityInfo> getRandomCityInfo()
    {
        int index = ms_random.nextInt(ms_cityInfos.size());

        return Optional.ofNullable(ms_cityInfos.get(index));
    }
}

class CityInfo {
    private int m_plate;
    private String m_name;

    public CityInfo(int plate, String name)
    {
        m_plate = plate;
        m_name = name;
    }

    public int getPlate()
    {
        return m_plate;
    }

    public void setPlate(int plate)
    {
        m_plate = plate;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public String toString()
    {
        return String.format("%d-%s", m_plate, m_name);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir metodun geri dönüş değerinin Optional (burada OptionalInt) olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.OptionalInt;

class App {
    public static void main(String[] args)
    {
        String str = Console.readLine("Bir yazı giriniz");

        OptionalInt optionalInt = Util.toInt(str, 16);

        if (optionalInt.isPresent())
            Console.writeLine("val=%d%n", optionalInt.getAsInt());
        else
            Console.writeLine("int türü formatında giriş yapılmadı");
    }
}

class Util {
    public static OptionalInt toInt(String str)
    {
        return toInt(str, 10);
    }

    public static OptionalInt toInt(String str, int radix)
    {
        OptionalInt optionalInt = OptionalInt.empty();

        try {
            optionalInt = OptionalInt.of(Integer.parseInt(str, radix));
        }
        catch (NumberFormatException ex) {

        }

        return optionalInt;
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bir metodun geri dönüş değerinin Optional olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.Optional;
import java.util.function.Predicate;

class App {
    public static void main(String[] args)
    {
        ArrayList<String> list = new ArrayList<>();

        list.add("ankara");
        list.add("istanbul");
        //list.add("bolu");
        //list.add("muş");

        var optCity = Util.findFirst(list, s -> s.length() < 5);

        System.out.println(optCity.orElse("Şehir bulunamadı"));
    }
}

class Util {
    public static <T> Optional<T> findFirst(ArrayList<T> list, Predicate<T> pred)
    {
        for (T t : list)
            if (pred.test(t))
                return Optional.of(t);

        return Optional.empty();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bit metodun parametre değişkeninin Optional olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Optional;
import java.util.Random;

class App {
    public static void main(String[] args)
    {
        int [] a = Util.getRandomArray(Optional.empty(), 10, 1, 100);

        ArrayUtil.display(2, a);

        Random r = new Random();

        a = Util.getRandomArray(Optional.of(r), 10, 1, 100);
        ArrayUtil.display(2, a);
    }
}

class Util {
    public static int [] getRandomArray(Optional<Random> optRand, int n, int min, int max)
    {
        Random r = optRand.orElse(new Random());

        int [] a = new int[n];

        for (int i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Optional sınıfının toString metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Optional;

class App {
    public static void main(String[] args)
    {
        System.out.println(Optional.empty());
        System.out.println(Optional.of("ankara"));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıfın Optional veri elemanı olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Optional;

class App {
    public static void main(String[] args)
    {
        var p1 = new Person();

        p1.setFirstname("Oğuz");
        p1.setSurname("Karan");

        System.out.println(p1);

        var p2 = new Person();

        p2.setFirstname("Sılay");
        p2.setSecondname("Beyza");
        p2.setSurname("Erte");

        System.out.println(p2);
    }
}

class Person {
    private String m_firstname;
    private Optional<String> m_secondname = Optional.empty();
    private String m_surname;

    //...

    public String getFirstname()
    {
        return m_firstname;
    }

    public void setFirstname(String firstname)
    {
        m_firstname = firstname;
    }


    public void setSecondname(String s)
    {
        m_secondname = (s == null || s.isBlank()) ? Optional.empty() : Optional.of(s);
    }

    public Optional<String> getSecondname()
    {
        return m_secondname;
    }

    public String getSurname()
    {
        return m_surname;
    }

    public void setSurname(String surname)
    {
        m_surname = surname;
    }

    public String toString()
    {
        return String.format("%s%s %s", m_firstname, m_secondname.map(s -> " " + s).orElse(""), m_surname);
        //return String.format("%s%s %s", m_firstname, m_secondname.isPresent() ? " " + m_secondname.get() : "", m_surname);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Pair sınıfı ile basit bir MyOptional sınıfı tasarımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Pair;

class App {
    public static void main(String[] args)
    {
        var opt = MyOptional.of("ankara");

        if (opt.isPresent())
            System.out.println(opt.get());
        else
            System.out.println("Boş");
    }
}

final class MyOptional<T> {
    private Pair<T, Boolean> m_pair;

    private MyOptional(Pair<T, Boolean> pair)
    {
        m_pair = pair;
    }

    public static <T> MyOptional<T> empty()
    {
        return new MyOptional<>(Pair.create(null, false));
    }

    public static <T> MyOptional<T> of(T t)
    {
        if (t == null)
            throw new NullPointerException();

        return new MyOptional<>(Pair.create(t, true));
    }

    public T get() {return m_pair.getFirst();}
    public boolean isPresent() {return m_pair.getSecond();}
    public boolean isEmpty() {return !isPresent();}
    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Java 1.0 ile eklenen ancak çok problemli olduğu için bir çok metodunun deprecated olduğu, bir Java programcısının
    zorunlu olmadıkça kullanmaması gereken Date sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Date;

class App {
    public static void main(String [] args)
    {
        Date now = new Date();

        long ms = now.getTime();

        System.out.printf("Time in milliseconds:%d%n", ms);

        Date dt = new Date(ms);

        System.out.println(dt);
        System.out.println(now);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Calendar abstract sınıfı ve GregorianCalendar sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Calendar;
import java.util.GregorianCalendar;

class App {
    public static void main(String [] args)
    {
        for (;;) {
            Calendar now = new GregorianCalendar();

            System.out.printf("%02d/%02d/%04d %02d:%02d:%02d\r",
                    now.get(Calendar.DAY_OF_MONTH),
                    now.get(Calendar.MONTH) + 1,
                    now.get(Calendar.YEAR),
                    now.get(Calendar.HOUR_OF_DAY),
                    now.get(Calendar.MINUTE),
                    now.get(Calendar.SECOND));
        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Calendar abstract sınıfının getInstance metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Calendar;

class App {
    public static void main(String [] args)
    {
        for (;;) {
            Calendar now = Calendar.getInstance();

            System.out.printf("%02d/%02d/%04d %02d:%02d:%02d\r",
                    now.get(Calendar.DAY_OF_MONTH),
                    now.get(Calendar.MONTH) + 1,
                    now.get(Calendar.YEAR),
                    now.get(Calendar.HOUR_OF_DAY),
                    now.get(Calendar.MINUTE),
                    now.get(Calendar.SECOND));
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    GregorianCalendar sınıfın tarih-zaman geçerlilik kontrolü yapmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Calendar;
import java.util.GregorianCalendar;

class App {
    public static void main(String [] args)
    {
        Calendar now = new GregorianCalendar(2019, 67, 45, 1234, 2345, 12345678);

        System.out.printf("%02d/%02d/%04d %02d:%02d:%02d\r",
                now.get(Calendar.DAY_OF_MONTH),
                now.get(Calendar.MONTH) + 1,
                now.get(Calendar.YEAR),
                now.get(Calendar.HOUR_OF_DAY),
                now.get(Calendar.MINUTE),
                now.get(Calendar.SECOND));

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Calendar sınıfının getTimeInMillis metodu epoch time (1.1.1970 00:00:00.0) zamanına göre milisaniye değerini
    döndürür. Aşağıdaki örnekte basit bir yaş bulma işlemi yapılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Calendar;
import java.util.GregorianCalendar;

class App {
    public static void main(String [] args)
    {
        Calendar birthDate = new GregorianCalendar(1976, 8, 10);
        Calendar now = new GregorianCalendar();

        double age = Math.abs((now.getTimeInMillis() - birthDate.getTimeInMillis())) / (1000. * 60 * 60 * 24 * 365);

        System.out.printf("%.20f%n", age);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Calendar sınıfının getTimeInMillis metodu epoch time (1.1.1970 00:00:00.0) zamanına göre milisaniye değerini
    döndürür. Aşağıdaki örnekte basit bir yaş bulma işlemi yapılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Calendar;
import java.util.GregorianCalendar;

class App {
    public static void main(String [] args)
    {
        Calendar birthDate = new GregorianCalendar(1999, 7, 17, 3, 2, 0);
        Calendar now = new GregorianCalendar();

        double age = Math.abs((now.getTimeInMillis() - birthDate.getTimeInMillis())) / (1000. * 60 * 60 * 24 * 365);

        System.out.printf("%.20f%n", age);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Calendar sınıfının after ve before metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Calendar;
import java.util.GregorianCalendar;

class App {
    public static void main(String [] args)
    {
        Calendar birthDate = new GregorianCalendar(1976, 8, 10);
        Calendar now = new GregorianCalendar();

        System.out.println(now.after(birthDate));
        System.out.println(now.before(birthDate));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Calendar sınıfı immutable değildir. Yani içeriği değiştirilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Calendar;
import java.util.GregorianCalendar;

class App {
    public static void main(String [] args)
    {
        Calendar now = new GregorianCalendar();


        System.out.printf("%02d/%02d/%04d %02d:%02d:%02d%n",
                now.get(Calendar.DAY_OF_MONTH),
                now.get(Calendar.MONTH) + 1,
                now.get(Calendar.YEAR),
                now.get(Calendar.HOUR_OF_DAY),
                now.get(Calendar.MINUTE),
                now.get(Calendar.SECOND));

        now.set(Calendar.HOUR_OF_DAY, 45);

        System.out.printf("%02d/%02d/%04d %02d:%02d:%02d%n",
                now.get(Calendar.DAY_OF_MONTH),
                now.get(Calendar.MONTH) + 1,
                now.get(Calendar.YEAR),
                now.get(Calendar.HOUR_OF_DAY),
                now.get(Calendar.MINUTE),
                now.get(Calendar.SECOND));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Klavyeden alınan gün ay yıl bilgisine göre kişinin doğum günü geçmişse
    "geçmiş doğum gününüzü kutlarım"
    o an doğum günü ise
    "doğum gününüz kutlu olsun"
    doğum günü geçmemişse
    "doğum gününüzü şimdiden kutlarım"

    mesajlarından birini yazdıran programı Calendar sınıfını kullanarak yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.Calendar;
import java.util.GregorianCalendar;

class App {
    public static void main(String [] args)
    {
        BirthDateApp app = new BirthDateApp();

        app.run();
    }
}

class BirthDateApp {
    private int m_day, m_mon, m_year;

    private void fillDate()
    {
        Console.writeLine("Doğum tarihi bilgilerinizi giriniz:");
        m_day = Console.readInt("Gün?");
        m_mon = Console.readInt("Ay?");
        m_year = Console.readInt("Yıl?");
    }

    private Calendar dateTimeToDate(Calendar calendar)
    {
        return new GregorianCalendar(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));
    }

    private void displayMessage()
    {
        Calendar today = dateTimeToDate(Calendar.getInstance());
        Calendar birthDay = new GregorianCalendar(today.get(Calendar.YEAR), m_mon - 1, m_day);

        if (birthDay.after(today))
            System.out.printf("Doğum gününüzü şimdiden kutlarım");
        else if (birthDay.before(today))
            System.out.printf("Geçmiş doğum gününüzü kutlarım");
        else
            System.out.println("Doğum gününüz kutlu olsun");
    }

    public void run()
    {
        this.fillDate();
        this.displayMessage();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Klavyeden alınan gün ay yıl bilgisine göre kişinin doğum günü geçmişse
    "geçmiş doğum gününüzü kutlarım"
    o an doğum günü ise
    "doğum gününüz kutlu olsun"
    doğum günü geçmemişse
    "doğum gününüzü şimdiden kutlarım"

    mesajlarından birini yazdıran programı org.csystem.util.datetime.DateTime sınıfını kullanarak yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;
import org.csystem.util.datetime.DateTime;
import org.csystem.util.datetime.DateTimeException;

class App {
    public static void main(String [] args)
    {
        BirthDateApp app = new BirthDateApp();

        app.run();
    }
}

class BirthDateApp {
    private DateTime m_birthDate;

    private void fillDate()
    {
        for(;;) {
            try {
                Console.writeLine("Doğum tarihi bilgilerinizi giriniz:");
                int day = Console.readInt("Gün?");
                int mon = Console.readInt("Ay?");
                int year = Console.readInt("Yıl?");
                m_birthDate = DateTime.of(day, mon, year);
                break;
            }
            catch (DateTimeException ex) {
                System.out.println("Geçersiz tarih girdiniz");
            }
        }
    }

    private void displayMessage()
    {
        DateTime today = DateTime.today();
        DateTime birthDay = m_birthDate.withYear(today.getYear());

        if (birthDay.isAfter(today))
            System.out.printf("Doğum gününüzü şimdiden kutlarım");
        else if (birthDay.isBefore(today))
            System.out.printf("Geçmiş doğum gününüzü kutlarım");
        else
            System.out.println("Doğum gününüz kutlu olsun");
    }

    public void run()
    {
        this.fillDate();
        this.displayMessage();
    }
}


package org.csystem.util.datetime;

import java.io.Serializable;
import java.util.Calendar;
import java.util.GregorianCalendar;

import static java.util.Calendar.*;

public final class DateTime implements Serializable, Comparable<DateTime> {
    private static final long serialVersionUID = 1L;
    private static final int [] DAYS_OF_MONTHS = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    private final Calendar m_calendar;

    private static boolean isValidDate(int day, int mon, int year)
    {
        if (day < 1 || day > 31 || mon < 1 || mon > 12)
            return false;

        int days = mon == 2 && isLeapYear(year) ? 29 :  DAYS_OF_MONTHS[mon];

        return day <= days;
    }

    private static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }

    private static boolean isValidForTime(int hour, int minute, int second, int millisecond)
    {
        return isValidForHour(hour) && isValidForMinute(minute)
                && isValidForSecond(second) && isValidForMillisecond(millisecond);
    }

    private static boolean isValidForHour(int hour)
    {
        return isValidForBounds(hour, 23);
    }

    private static boolean isValidForMinute(int minute)
    {
        return isValidForBounds(minute, 59);
    }

    private static boolean isValidForSecond(int second)
    {
        return isValidForBounds(second, 59);
    }
    private static boolean isValidForMillisecond(int second)
    {
        return isValidForBounds(second, 999);
    }

    private static boolean isValidForBounds(int val, int max)
    {
        return 0 <= val && val <= max;
    }

    private static void controlForDate(int day, int mon, int year, String msg)
    {
        if (!isValidDate(day, mon, year))
            doWorkForException(msg);
    }
    private static void controlForTime(int hour, int minute, int second, int millisecond, String msg)
    {
        if (!isValidForTime(hour, minute, second, millisecond))
            doWorkForException(msg);
    }

    public static void controlForHour(int hour)
    {
        if (!isValidForHour(hour))
            doWorkForException("Invalid Hour");
    }

    public static void controlForMinute(int minute)
    {
        if (!isValidForMinute(minute))
            doWorkForException("Invalid Minute");
    }

    public static void controlForSecond(int second)
    {
        if (!isValidForSecond(second))
            doWorkForException("Invalid Second");
    }

    public static void controlForMillisecond(int millisecond)
    {
        if (!isValidForMillisecond(millisecond))
            doWorkForException("Invalid Millisecond");
    }

    private static void control(int day, int mon, int year, int hour, int minute, int second, int millisecond, String msg)
    {
        controlForDate(day, mon, year, msg);
        controlForTime(hour, minute, second, millisecond, msg);
    }

    private static void doWorkForException(String msg)
    {
        throw new DateTimeException(msg);
    }

    private DateTime(Calendar calendar)
    {
        m_calendar = calendar;
    }

    private DateTime()
    {
        m_calendar = Calendar.getInstance();
    }

    private DateTime(int day, int mon, int year, int hour, int minute, int second, int milliseconds)
    {
        control(day, mon, year, hour, minute, second, milliseconds, "Invalid DateTime");
        m_calendar = new GregorianCalendar(year, mon - 1, day, hour, minute, second);
        m_calendar.set(MILLISECOND, milliseconds);
    }

    private DateTime plus(int field, int amount)
    {
        Calendar calendar = (Calendar)m_calendar.clone();

        calendar.add(field, amount);

        return new DateTime(calendar);
    }

    private DateTime with(int field, int value)
    {
        Calendar calendar = (Calendar)m_calendar.clone();

        calendar.set(field, value);

        return new DateTime(calendar);
    }

    public static DateTime of(long milliseconds)
    {
        DateTime dateTime = new DateTime();

        dateTime.m_calendar.setTimeInMillis(milliseconds);

        return dateTime;
    }

    public static DateTime of(int day, int mon, int year)
    {
        return of(day, mon, year, 0, 0);
    }

    public static DateTime of(int day, Month mon, int year)
    {
        return of(day, mon.ordinal() + 1, year);
    }

    public static DateTime of(int day, Month mon, int year, int hour, int minute)
    {
        return of(day, mon.ordinal() + 1, year, hour, minute);
    }

    public static DateTime of(int day, int mon, int year, int hour, int minute)
    {
        return of(day, mon, year, hour, minute, 0);
    }

    public static DateTime of(int day, Month mon, int year, int hour, int minute, int second)
    {
        return of(day, mon.ordinal() + 1, year, hour, minute, second);
    }

    public static DateTime of(int day, int mon, int year, int hour, int minute, int second)
    {
        return of(day, mon, year, hour, minute, second, 0);
    }

    public static DateTime of(int day, Month mon, int year, int hour, int minute, int second, int millisecond)
    {
        return of(day, mon.ordinal() + 1, year, hour, minute, second, millisecond);
    }

    public static DateTime of(int day, int mon, int year, int hour, int minute, int second, int millisecond)
    {
        return new DateTime(day, mon, year, hour, minute, second, millisecond);
    }

    public static DateTime now() {return new DateTime();}
    public static DateTime today()
    {
        DateTime now = now();

        now.m_calendar.set(HOUR_OF_DAY, 0);
        now.m_calendar.set(MINUTE, 0);
        now.m_calendar.set(SECOND, 0);
        now.m_calendar.set(MILLISECOND, 0);

        return now;
    }

    public int getDay() {return m_calendar.get(DAY_OF_MONTH);}

    public int getMonthValue() {return m_calendar.get(MONTH) + 1;}

    public Month getMonth() {return Month.values()[getMonthValue() - 1];}

    public int getYear() {return m_calendar.get(YEAR);}

    public DayOfWeek getDayOfWeek() {return DayOfWeek.values()[m_calendar.get(DAY_OF_WEEK) - 1];}

    public int getDayOfYear() {return m_calendar.get(DAY_OF_YEAR);}

    public int getHour() {return m_calendar.get(HOUR_OF_DAY);}

    public int getMinute() {return m_calendar.get(MINUTE);}

    public int getSecond() {return m_calendar.get(SECOND);}

    public int getMillisecond() {return m_calendar.get(MILLISECOND);}

    public long getTimeInMillis()
    {
        return m_calendar.getTimeInMillis();
    }

    public int getEndOfMonth() {return m_calendar.getActualMaximum(DAY_OF_MONTH);}

    public boolean isAfter(DateTime other) {return compareTo(other) > 0;}

    public boolean isBefore(DateTime other) {return compareTo(other) < 0;}

    public boolean isEqual(DateTime other) {return equals(other);}

    public boolean isLeapYear()
    {
        return isLeapYear(getYear());
    }

    public boolean isWeekday() {return !isWeekend();}

    public boolean isWeekend()
    {
        DayOfWeek dow = getDayOfWeek();

        return dow == DayOfWeek.SAT || dow == DayOfWeek.SUN;
    }

    public DateTime plusDays(int days)
    {
        return plus(DAY_OF_MONTH, days);
    }

    public DateTime plusMonths(int months)
    {
        return plus(MONTH, months);
    }

    public DateTime plusYears(int years)
    {
        return plus(YEAR, years);
    }

    public DateTime plusHours(int hours)
    {
        return plus(HOUR_OF_DAY, hours);
    }

    public DateTime plusMinutes(int minutes)
    {
        return plus(MINUTE, minutes);
    }

    public DateTime plusSeconds(int seconds)
    {
        return plus(SECOND, seconds);
    }

    public DateTime plusMilliseconds(int milliseconds)
    {
        return plus(MILLISECOND, milliseconds);
    }

    public DateTime minusDays(int days)
    {
        return plusDays(-days);
    }

    public DateTime minusMonths(int months)
    {
        return plusMonths(-months);
    }

    public DateTime minusYears(int years)
    {
        return plusYears(-years);
    }

    public DateTime minusHours(int hours)
    {
        return plusHours(-hours);
    }

    public DateTime minusMinutes(int minutes)
    {
        return plusMinutes(-minutes);
    }

    public DateTime minusSeconds(int seconds)
    {
        return plusSeconds(-seconds);
    }

    public DateTime minusMilliseconds(int milliseconds)
    {
        return plusMilliseconds(-milliseconds);
    }


    public DateTime withDay(int day)
    {
        controlForDate(day, getMonthValue(), getYear(), "Invalid Day");

        return with(DAY_OF_MONTH, day);
    }

    public DateTime withMonthValue(int month)
    {
        controlForDate(getDay(), month, getYear(), "Invalid Month");

        return with(MONTH, month - 1);
    }

    public DateTime withMonth(Month month)
    {
        return withMonthValue(month.ordinal() + 1);
    }

    public DateTime withYear(int year)
    {
        controlForDate(getDay(), getMonthValue(), year, "Invalid Year");

        return with(YEAR, year);
    }

    public DateTime withHour(int hour)
    {
        controlForHour(hour);

        return with(HOUR_OF_DAY, hour);
    }

    public DateTime withMinute(int minute)
    {
        controlForMinute(minute);

        return with(MINUTE, minute);
    }

    public DateTime withSecond(int second)
    {
        controlForSecond(second);

        return with(SECOND, second);
    }

    public DateTime withMillisecond(int millisecond)
    {
        controlForMillisecond(millisecond);

        return with(MILLISECOND, millisecond);
    }

    @Override
    public int compareTo(DateTime other)
    {
        return m_calendar.compareTo(other.m_calendar);
    }

    @Override
    public boolean equals(Object obj)
    {
        if (!(obj instanceof DateTime))
            return false;

        return m_calendar.equals(obj);
    }

    @Override
    public int hashCode()
    {
        return m_calendar.hashCode();
    }


    @Override
    public String toString()
    {
        return toString('/');
    }

    public String toString(char delim)
    {
        return String.format("%s %s", toDateString(delim), toTimeString());
    }

    public String toDateString()
    {
        return toDateString('/');
    }

    public String toDateString(char delim)
    {
        return String.format("%02d%c%02d%c%04d",
                getDay(), delim, getMonthValue(), delim, getYear());
    }

    public String toLongTimeString()
    {
        return String.format("%s.%d", toTimeString(), getMillisecond());
    }

    public String toTimeString()
    {
        return String.format("%02d:%02d:%02d", getHour(), getMinute(), getSecond());
    }
}
package org.csystem.util.datetime;

public class DateTimeException extends RuntimeException  {
    public DateTimeException()
    {}

    public DateTimeException(String msg)
    {
        super(msg);
    }
}
package org.csystem.util.datetime;

public enum DayOfWeek {
    SUN, MON, TUE, WED, THU, FRI, SAT
}
package org.csystem.util.datetime;

public enum Month {
    JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {
        LocalDate dt = LocalDate.of(1976, 9, 10);

        System.out.printf("%02d/%02d/%02d%n", dt.getDayOfMonth(), dt.getMonthValue(), dt.getYear());
        System.out.printf("%02d %s %02d %s%n", dt.getDayOfMonth(), dt.getMonth(), dt.getYear(), dt.getDayOfWeek());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının Month enum parametreli of metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;
import java.time.Month;

class App {
    public static void main(String [] args)
    {
        LocalDate dt = LocalDate.of(1976, Month.SEPTEMBER, 10);

        System.out.printf("%02d/%02d/%02d%n", dt.getDayOfMonth(), dt.getMonthValue(), dt.getYear());
        System.out.printf("%02d %s %02d %s%n", dt.getDayOfMonth(), dt.getMonth(), dt.getYear(), dt.getDayOfWeek());
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfı geçerlilik kontrolünü yapar. Aslında Java 8 Datetime API sınıflarının hepsi bu kontrolleri
    yapar
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.Month;

class App {
    public static void main(String [] args)
    {
        try {
            LocalDate dt = LocalDate.of(1976, Month.SEPTEMBER, 45);

            System.out.printf("%02d/%02d/%02d%n", dt.getDayOfMonth(), dt.getMonthValue(), dt.getYear());
            System.out.printf("%02d %s %02d %s%n", dt.getDayOfMonth(), dt.getMonth(), dt.getYear(), dt.getDayOfWeek());
        }
        catch (DateTimeException ex) {
            System.out.println(ex.getMessage());
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının now isimli metodu ile çalışılan sistemdeki o anki tarih elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {
        LocalDate dt = LocalDate.now();

        System.out.printf("%02d/%02d/%02d%n", dt.getDayOfMonth(), dt.getMonthValue(), dt.getYear());
        System.out.printf("%02d %s %02d %s%n", dt.getDayOfMonth(), dt.getMonth(), dt.getYear(), dt.getDayOfWeek());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının isAfter metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {
        LocalDate now = LocalDate.now();
        LocalDate dt = LocalDate.of(2019, 4, 10);

        System.out.println(dt.isAfter(now));
        System.out.println(now.isAfter(dt));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının isBefore metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {
        LocalDate now = LocalDate.now();
        LocalDate dt = LocalDate.of(2019, 4, 10);

        System.out.println(dt.isBefore(now));
        System.out.println(now.isBefore(dt));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Klavyeden alınan gün ay yıl bilgisine göre kişinin doğum günü geçmişse
    "geçmiş doğum gününüzü kutlarım"
    o an doğum günü ise
    "doğum gününüz kutlu olsun"
    doğum günü geçmemişse
    "doğum gününüzü şimdiden kutlarım"

    mesajlarından birini yazdıran programı LocalDate sınfını kullanarak yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.time.DateTimeException;
import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {
        BirthDateApp app = new BirthDateApp();

        app.run();
    }
}

class BirthDateApp {
    private LocalDate m_birthDate;

    private void fillDate()
    {
        for(;;) {
            try {
                Console.writeLine("Doğum tarihi bilgilerinizi giriniz:");
                int day = Console.readInt("Gün?");
                int mon = Console.readInt("Ay?");
                int year = Console.readInt("Yıl?");
                m_birthDate = LocalDate.of(year, mon, day);
                break;
            }
            catch (DateTimeException ex) {
                System.out.println("Geçersiz tarih girdiniz");
            }
        }
    }

    private void displayMessage()
    {
        LocalDate today = LocalDate.now();
        LocalDate birthDay = m_birthDate.withYear(today.getYear());

        if (birthDay.isAfter(today))
            System.out.println("Doğum gününüzü şimdiden kutlarım");
        else if (birthDay.isBefore(today))
            System.out.println("Geçmiş doğum gününüzü kutlarım");
        else
            System.out.println("Doğum gününüz kutlu olsun");
    }

    public void run()
    {
        this.fillDate();
        this.displayMessage();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının plusXXX metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {
        LocalDate now = LocalDate.now();
        LocalDate date = now.plusWeeks(3).plusDays(7);

        System.out.println(now);
        System.out.println(date);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının minusXXX metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {
        LocalDate now = LocalDate.now();
        LocalDate date = now.minusWeeks(3).minusDays(7).plusYears(3);

        System.out.println(now);
        System.out.println(date);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    ChronoUnit türü ile tarih-zaman fark ölçümleri yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

class App {
    public static void main(String [] args)
    {
        Console.writeLine("Doğum tarihinizi giriniz:");
        int day = Console.readInt("Gün:");
        int mon = Console.readInt("Ay:");
        int year = Console.readInt("Yıl:");

        BirthDateController bdc = new BirthDateController(day, mon, year);

        Console.writeLine("Yaşınız:%f%n", bdc.getAge());
    }
}

class BirthDateController {
    private LocalDate m_birthDate;
    public enum Status {BEFORE, AFTER, EQUALS}

    public BirthDateController(int day, int mon, int year)
    {
        m_birthDate = LocalDate.of(year, mon, day);
    }

    public double getAge()
    {
        return ChronoUnit.DAYS.between(m_birthDate, LocalDate.now()) / 365.;
    }

    public Status getStatus()
    {
        LocalDate now = LocalDate.now();

        if (m_birthDate.isAfter(now))
            throw  new DateTimeException("Invalid Birthdate");

        LocalDate birthDay = m_birthDate.withYear(now.getYear());

        if (now.equals(birthDay))
            return Status.EQUALS;

        if (now.isBefore(birthDay))
            return Status.AFTER;

        return Status.BEFORE;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalTime sınıfının atDate metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

class App {
    public static void main(String [] args)
    {
        Console.writeLine("Tarih giriniz:");
        int day = Console.readInt("Gün:");
        int mon = Console.readInt("Ay:");
        int year = Console.readInt("Yıl:");

        LocalTime now = LocalTime.now();
        LocalDateTime dt = now.atDate(LocalDate.of(year, mon, day));

        System.out.println(dt);

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının atTime metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.time.LocalDate;
import java.time.LocalDateTime;

class App {
    public static void main(String [] args)
    {
        Console.writeLine("Tarih giriniz:");
        int day = Console.readInt("Gün:");
        int mon = Console.readInt("Ay:");
        int year = Console.readInt("Yıl:");

        var date = LocalDate.of(year, mon, day);

        LocalDateTime dt = date.atTime(0, 0);

        System.out.println(dt);

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Basit bir dijital tarih zaman uygulaması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CSDTimer;
import org.csystem.util.datetime.DateTime;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String [] args)
    {
        DigitalTimeApp.run();
    }
}

class DigitalTimeApp {
    public static void run()
    {
        CSDTimer timer = new CSDTimer(0, 1, TimeUnit.SECONDS);

        timer.start(() -> System.out.printf("%s\r", DateTime.now()));
    }

}

/*----------------------------------------------------------------------------------------------------------------------
    Basit bir dijital tarih zaman uygulaması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CSDTimer;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;

class App {
    public static void main(String [] args)
    {
        DigitalTimeApp.run();
    }
}

class DigitalTimeApp {
    public static void displayDateTime()
    {
        LocalDateTime now = LocalDateTime.now();

        System.out.printf("%02d/%02d/%04d %02d:%02d:%02d\r", now.getDayOfMonth(), now.getMonthValue(), now.getYear(),
                                                            now.getHour(), now.getMinute(), now.getSecond());
    }

    public static void run()
    {
        CSDTimer timer = new CSDTimer(0, 1, TimeUnit.SECONDS);

        timer.start(DigitalTimeApp::displayDateTime);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LocalDate sınıfının bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Optional;

class App {
    public static void main(String [] args)
    {
        Person p = new Person("Oğuz", "", "Karan", LocalDate.of(1976, 9, 10));

        System.out.printf("Age:%.10f%n", p.getAge());
    }
}

class Person {
    private String m_firstname;
    private Optional<String> m_secondname;
    private String m_surname;
    private LocalDate m_birthDate;

    public Person(String firstname, String secondname, String surname, LocalDate birthDate)
    {
        m_firstname = firstname;
        m_secondname = secondname.isBlank() ? Optional.empty() : Optional.of(secondname);
        m_surname = surname;
        m_birthDate = birthDate;
    }

    //...
    public double getAge()
    {
        return ChronoUnit.DAYS.between(m_birthDate, LocalDate.now()) / 365.;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Void sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        IFunction<Void, Void> v = dummy -> {Console.writeLine(10); return null;};

        v.apply(null);
    }
}

interface IFunction<T, R> {
    R apply(T t);
}

/*----------------------------------------------------------------------------------------------------------------------
    Void sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.function.Function;

class App {
    public static void main(String [] args)
    {
        Function<Void, Void> v = dummy -> {Console.writeLine(10); return null;};

        v.apply(null);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    assert <boolean türden ifade> [:<void olmayan ifade>]

    assert deyimine ilişkin ifade true ise akış assert den itibaren yoluna devam eder.
    Yanlış ise AssertionError nesnesi fırlatılır. assert deyimindeki void olmayan ifade exception' a ilişkin
    mesajı temsil eder.

    assert kullanımı için java programına -ea veya -enableassertions seçeneği verilmelidir.
    Eğer bu seçeneklerden biri verilmezse assert deyimi çalışma zamanı sırasında
    görmezden gelinir. assert deyimleri derleme sırasında olduğundan seçenekler verilemese bile
    byte code içerisinde bulunulurlar. Öyleyse bunu da devre dışı bırakacak kod yazılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.println("Bir sayı giriniz");
        int val = Integer.parseInt(kb.nextLine());

        Sample s = new Sample();

        s.bar(val);
    }
}

class Sample {
    private void foo(int val)
    {
        assert val > 0: "val must be positive";

        System.out.println("foo");
    }

    public void bar(int val)
    {
        //val = Math.abs(val);
        System.out.println("bar");

        foo(val);
    }
}

package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.println("Bir sayı giriniz");
        int val = Integer.parseInt(kb.nextLine());

        Sample s = new Sample();

        s.bar(val);
    }
}

class Sample {
    private void foo(int val)
    {
        assert val > 0: String.format("%d değeri pozitif olmalıdır", val);

        System.out.println("foo");
    }

    public void bar(int val)
    {
        //val = Math.abs(val);
        System.out.println("bar");

        foo(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte assert deyimi içerisinde bir metot çağrılmıştır. Bu metot assert
    devrede değilken çağrılmaz. Eğer çağrılsın isteniyorsa buna dikkat edilmelidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.println("Bir sayı giriniz");
        int val = Integer.parseInt(kb.nextLine());

        Sample s = new Sample();

        s.bar(val);
    }
}

class Sample {
    private boolean tar(int val)
    {
        System.out.println("tar");

        return val % 2 == 0;
    }

    private void foo(int val)
    {
        assert tar(val): "return value must be true";

        System.out.println("foo");
    }

    public void bar(int val)
    {
        System.out.println("bar");

        foo(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki problem aşağıdaki gibi düzeltilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.println("Bir sayı giriniz");
        int val = Integer.parseInt(kb.nextLine());

        Sample s = new Sample();

        s.bar(val);
    }
}

class Sample {
    private boolean tar(int val)
    {
        System.out.println("tar");

        return val % 2 == 0;
    }

    private void foo(int val)
    {
        boolean status = tar(val);

        assert status: "return value must be true";

        System.out.println("foo");
    }

    public void bar(int val)
    {
        System.out.println("bar");

        foo(val);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte SampleTest sınıfının test metodu yazlnızca assert deyimleri devrede iken çağrılmak amaçlı
    kullanılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.println("Bir sayı giriniz");
        int val = Integer.parseInt(kb.nextLine());

        Sample s = new Sample();

        s.bar(val);
    }
}


class SampleTest  {
    public static boolean test(boolean status)
    {
        System.out.println("Test starts");

        return status;
    }
}
class Sample {
    private boolean tar(int val)
    {
        System.out.println("tar");

        return val % 2 == 0;
    }

    private void foo(int val)
    {
        boolean status = tar(val);

        assert SampleTest.test(status): "return value must be true";

        System.out.println("foo");
    }

    public void bar(int val)
    {
        System.out.println("bar");

        foo(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Derleyiciler akışın bir koda erişemeyeceği derleme durumlarında ya error oluşturur ya da
    kullanılabilecek bir kod ise bu durumda bunu arakoda eklemez. Örneğin final ve boolean bir değişken
    false değerindeyse ve bu değişkene göre if deyimi ile bir akış oluşturulmuşsa derleyici
    değişkenin değeri false ve değişken final olduğundan bu if deyimini arakoda eklemez.
    Bu durumda assert deyimlerinin ürünün son aşamasında arakoddan çıkartılması
    aşağıdaki gibi yapılabilir. final değişken kendi sınıfına ya da başka sınıfa da konabilir.
    Aşağıdaki kodu inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.println("Bir sayı giriniz");
        int val = Integer.parseInt(kb.nextLine());

        Sample s = new Sample();

        s.bar(val);
    }
}

class Test {
    public void foo()
    {

    }
}

class Sample {
    private static final boolean DEBUG = false;

    private boolean tar(int val)
    {
        System.out.println("tar");

        return NumberUtil.isPrime(val);
    }

    private void foo(int val)
    {
        boolean status = tar(val);

        if (DEBUG) { //DEBUG false ise bu deyimi arakoda eklemesin
            assert status : "return value must be true";
        }

        System.out.println("foo");
    }

    public void bar(int val)
    {
        System.out.println("bar");

        foo(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte switch deyiminin default kısmında assert yapılmıştır. Çünkü algoritma gereği
    akışın default a gelmemesi gerekir. Bu durumda programcı algoritmanın doğruluğuna ilişkin
    basit bir test yapmış olur. Ayrıca ikinci assert deyimi ise switch deyiminde unutulmuş bir
    case işleminin de olup olmadığını test eder. Hatta aşağı düşme bile bu şekilde test edilebilir.
    Aşağıdaki örneği sınır değerleri değiştirirerek ve case bölümlerindeki değerlerden bazılarını silerek
    çalıştırılabilirsiniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        int val = Console.readInt("Bir sayı giriniz");

        System.out.println(NumberUtil.getDigitStrTR(val));
    }
}

class NumberUtil {
    private static final boolean DEBUG = true;

    public static String getDigitStrTR(int digit)
    {
        if (digit < 0 || digit > 9)
            return "";

        String str = "";

        switch (digit) {
            case 0:
                str = "sıfır";
                break;
            case 1:
                str = "bir";
                break;
            case 2:
                str =  "iki";
                break;
            case 3:
                str = "üç";
                break;
            case 4:
                str =  "dört";
                break;
            case 5:
                str =  "beş";
                break;
            case 6:
                str =  "altı";
                break;
            case 7:
                str =  "yedi";
                break;
            case 8:
                str = "sekiz";
                break;
            case 9:
                str =  "dokuz";
                break;
            default:
                if (DEBUG) {
                    String msg = String.format("digit:%d", digit);

                    assert 0 <= digit && digit <= 9: msg + ":cause:control for bounds";
                    assert digit < 0 || digit > 9: msg + ":cause=case statement";
                }
        }

        return str;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Annotation bildirimi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

@interface MyAnnotation {
    //Annotation bildirimi
}


/*----------------------------------------------------------------------------------------------------------------------
    Annotation Java' da çeşitli kod parçalarına konabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

@MyAnnotation
class Sample {
    @MyAnnotation
    private int m_val;

    @MyAnnotation
    public void foo()
    {}

    public void foo(@MyAnnotation int x)
    {
        //...
    }

}

@interface MyAnnotation {
    //Annotation bildirimi
}


/*----------------------------------------------------------------------------------------------------------------------
    Annotation'ların elemanları annotation uygulanmasında kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

@MyAnnotation(value = "Sample class")
class Sample {
    @MyAnnotation(value = "m_val", type = Type.MEMBER_VARIABLE)
    private int m_val;

    @MyAnnotation(value = "foo", type = Type.METHOD)
    public void foo()
    {}

    public void foo(@MyAnnotation(value = "x", type = Type.PARAMETER_VARIABLE) int x)
    {
        //...
    }
}

enum Type {CLASS, METHOD, MEMBER_VARIABLE, PARAMETER_VARIABLE}

@interface MyAnnotation {
    String value() default "Object";
    Type type() default Type.CLASS;
}


/*----------------------------------------------------------------------------------------------------------------------
    Çalışma zamanı annotation kullanımı. İleride işaratlenmiş bir elemanınn annotation bilgilerinin nasıl alınacağını
    inceleyeceğiz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.time.LocalDate;

class App {
    public static void main(String [] args)
    {

    }
}

@Entity(tableName = "products")
class Person {
    @ColumnInfo(name = "citizen_id", unique = true, nullable = false)
    private String m_citizenId;

    @ColumnInfo(name = "birth_date")
    private LocalDate m_birthDate;

    @Ignore
    private int m_dummy;

    //...
}

@Retention(value = RetentionPolicy.RUNTIME)
@Target(value = ElementType.FIELD)
@interface Ignore {

}

@Retention(value = RetentionPolicy.RUNTIME)
@Target(value = {ElementType.TYPE, ElementType.MODULE})
@interface Entity {
    String tableName() default "";
}

@Retention(value = RetentionPolicy.RUNTIME)
@Target(value = ElementType.FIELD)
@interface ColumnInfo {
    String name() default "";
    boolean unique() default false;
    boolean nullable() default true;
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir annotation içerisindeki elemanın ismi value ise ve işaretleme sırasında yalnızca value elemanına
    değer verilecekse "value =" biçiminde yazılmayabilir. Ancak başka elemana da değer verilecekse
    "value =" yazılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

@Sample("xxx")
class A {

}

@Sample(value = "yyy", val = 10)
class B {

}

@Mample("") //error
class C {

}

@interface Sample {
    String value() default "";
    int val() default 0;
}

@interface Mample {
    String str() default "";
}

/*----------------------------------------------------------------------------------------------------------------------
    Ovveride annotation'ı bir metoda uygulanabilir. Metodun doğru şekilde override edilip
    edilemeyeceğini derleme zamanında anlamak için kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        A a = new B();

        a.foo(10, 20);
    }
}


class B extends A {
    @Override
    public void foo(double a, double b)
    {
        System.out.println("B.foo");
    }
}

class A {
    public void foo(double a, double b)
    {
        System.out.println("A.foo");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Override annotation'ı bir metoda uygulanamabilir. Metodun doğru şekilde override edilip
    edilemeyeceğini derleme zamanında anlamak için kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}


class B extends A {
    @Override //error
    public void foo(double a, int b)
    {
        System.out.println("B.foo");
    }
}

class A {
    public void foo(double a, double b)
    {
        System.out.println("B.foo");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Deprecated annotation'ı bir elemanın (metot, class vs.) deprecated olarak işaretlenmesi için kullanılır.
    Bu annotation bir RUNTIME annotation olmasına karşın derleyiciler burada bir uyarı mesajı verirler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample s = new Sample();

        s.foo();
        s.bar();
    }
}

class Sample {
    @Deprecated
    public void foo()
    {
        //...
    }

    public void bar()
    {
        //...
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Deprecated annotation'ına Java 9 ile birlikte forRemoval ve since elemanları eklenmiştir. forRemoval default
    olarak false'dur. Deprecated işaretlenen bir elemanının ileride silinip silinmeyeceğini de belirtmek için
    kullanılır. since elemanı ise String türden versiyon belirtmek için kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample s = new Sample();

        s.foo();
        s.bar();
    }
}

class Sample {
    @Deprecated(since = "1.2.3", forRemoval = true)
    public void foo()
    {
        //...
    }

    public void bar()
    {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Inherited annotation'ı yalnızca annotation'lara uygulanabilir. Bu durumda Inherited işaretlenmiş bir annotation'ın
    sınıfa uygulanması o türemiş sınıflarında bu annotation' a sahip olacağı anlamına gelir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Target;

class App {
    public static void main(String [] args)
    {

    }
}

@Inherited
@Target(value = {ElementType.TYPE})
@interface MyAnnotation {

}

@MyAnnotation
class A {

}

class B extends A {

}
/*----------------------------------------------------------------------------------------------------------------------
    FunctionalInterface annotation sınıfı bir arayüzün fonksiyonel olup olmadığına ilişkin işaret koymak amaçlı
    kullanılır. Bu annotation'da bilgilendirme amaçlı bir annotation'dır. Bu annotation ile işaratlenmiş bir arayüz
    içerisinde bir ve yalnız bir tane abstract metot olmalıdır. Aksi durumda error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

@FunctionalInterface
interface IX {
    void foo();
    default void bar()
    {}
}

/*----------------------------------------------------------------------------------------------------------------------
    SuppressWarnings annotation'ı ile derleyiciye "bunun için uyarı verme" demek için kullanılır. Bu annotation
    kullanılırken programcının emin olması gerekir. Çoğu uyarı mesajı önemlidir ve dikkate alınmalıdır. Bilinçsizce
    kullanılmamalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}


class Sample<T> {
    private T [] m_t;

    @SuppressWarnings("unchecked")
    public Sample(int n)
    {
        m_t = (T[])new Object[n];
    }

    //
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Object [] objs = new Object[2];
        Sample<String> sample = new Sample<>(objs);

        objs[0] = "ankara";
        objs[1] = 10;

        for (int i = 0; i < sample.size(); ++i)
            System.out.println(sample.get(i).toUpperCase());
    }
}


class Sample<T> {
    private T [] m_t;

    public Sample(Object [] obj)
    {
        m_t = (T[])obj;
    }

    public int size() {return m_t.length;}

    public T get(int index) {return m_t[index];}
}

/*----------------------------------------------------------------------------------------------------------------------
    Java'da generic türler invariant olduğundan aşağıdaki çağırma geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<Integer> integers = new ArrayList<>();

        //...
        Sample.display(integers);  //error
    }
}

class Sample {
    public static void display(ArrayList<Number> numbers)
    {
        for (var n : numbers)
            System.out.println(n);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   ? extends ile parametre covariant yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<Integer> integers = new ArrayList<>();

        for (int i = 0; i < 10; ++i)
            System.out.println(integers.add(i * 10));

        Sample.display(integers);
    }
}

class Sample {
    public static void display(ArrayList<? extends Number> numbers)
    {
        for (var n : numbers)
            System.out.println(n);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte foo nun parametresi invariant'dır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        A<Integer> aint = new A<>();

        Sample.foo(aint);
    }
}


class A<T extends Number> { //constraint

}

class Sample {
    public static void foo(A<Number> a) //invariant
    {
        //...
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte foo nun parametresi contravariant olarak verilmiştir
   ? super ile alttan sınır verilmiş olur. Yani super anahtar sözcüğünden sonra yazılan türün taban türleri
   (class, interface'ler) açılım olarak verilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<Number> arrayList = new ArrayList<>();

        Sample.foo(arrayList);
    }
}

class Sample {
    public static void foo(ArrayList<? super Integer> list) //contravariant
    {
        //...
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte foo metoduna ArrayLit'in her açılımı atanabilmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<Number> arrayList = new ArrayList<>();

        Sample.foo(arrayList);
    }
}

class Sample {
    public static void foo(ArrayList<? extends Object> list) //covariant
    {
        //...
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte display metoduna ArrayList'in her açılımı geçilebilir (unknown type)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<Integer> arrayList = new ArrayList<>();

        for (int i = 0; i < 10; ++i)
            arrayList.add(i * 10);

        Sample.display(arrayList);
    }
}

class Sample {
    public static void display(ArrayList<?> list)
    {
        for (var val : list)
            System.out.println(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte ArrayList referansı unknown type olduğu için error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<?> arrayList = new ArrayList<>();

        for (int i = 0; i < 10; ++i)
            arrayList.add(i * 10); //error

        Sample.display(arrayList);
    }
}

class Sample {
    public static void display(ArrayList<?> list)
    {
        for (var val : list)
            System.out.println(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte fill metodu içerisinde ArrayList' e ekleme yapılabilmesi için açılımda ya doğrudan tür kullanılması
   ya da contravariant özellikte olması gerekir.
   Yani şu contarvariant ve covariant şu özellikler geçerlidir
   1. covariant olarak bildirilmiş bir referans ile o türe ilişkin sınıfın bir metodunun parametresi generic türden
   ise ? extends den sonra gelen tür argüman olarak geçilemez. Ancak bu tür geri dönüş değeri olarak alınabilir

   2. contravariant olrak bildirilmiş bir değişken ile o türe ilişkin sınıfın bir metodunun parametresi generi türden ise
   ? super'den sonra geken tür argüman olarak geçilebilir.  Ancak bu tür geri dönüş değer türü olarak alınamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.Random;

class App {
    public static void main(String [] args)
    {

    }
}

class Sample {
    public static void fill(ArrayList<? extends Integer> list, Random r, int n)
    {
        double val = list.get(0).doubleValue();

        for (int i = 0; i < n; ++i)
            list.add(r.nextInt()); //error
    }
}


class Mample {
    public static void fill(ArrayList<? super Integer> list, Random r, int n)
    {
        double val = list.get(0).doubleValue(); //error

        for (int i = 0; i < n; ++i)
            list.add(r.nextInt());
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Java' da programın çalışma zamanı sırasında her tür için (temel türler dahil) bir Class nesnesi yaratılır.
    Reflection işlemleri Class sınıfı ile gerçekleştirilir
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
   Her tür isminin (temel türler de dahil) yaında nokta ile birlikte class anahtar sözüğü kullanıldığında
   bu ifade o türe ilişkin Class referansını üretir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Class<Sample> clsSample = Sample.class;
        Class<Mample> clsMample = Mample.class;
        Class<String> clsString = String.class;
        Class<Integer> clsInteger = Integer.class;
        Class<?> clsInt = int.class;

        //...
    }
}

class Sample {
    //...
}


class Mample {
    //...
}

/*----------------------------------------------------------------------------------------------------------------------
  Class sınıfının forName isimli metodu ile türün paket ismiyle beraber yazılması durumunda Class referansı
  elde edilebilir. Tür bulunamazsa ClassNotFoundException nesnesi fırlatılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        try {
            Class<?> clsSample = Class.forName("org.csystem.app.Sample");

            System.out.println("Sınıf bulundu");
        }
        catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
    }
}

class Sample {}

/*----------------------------------------------------------------------------------------------------------------------
  Class sınıfının getName metodu ile türün ismi fully qualified elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        try {
            Class<?> clsSample = Class.forName("org.csystem.app.Sample");

            System.out.println("Sınıf bulundu");

            System.out.println(clsSample.getName());
        }
        catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
    }
}

class Sample {}

/*----------------------------------------------------------------------------------------------------------------------
  Object sınıfının getClass metodu ile referansın dinamik türüne ilişkin Class referansı elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample s = new Sample();
        Object object = s;
        X x = s;

        Class<?> cls1 = object.getClass();
        Class<?> cls2 = x.getClass();

        System.out.println(cls1 == cls2);

        System.out.println(cls1.getName());
        System.out.println(cls2.getName());
    }
}

class X {

}
class Sample extends X {

}


/*----------------------------------------------------------------------------------------------------------------------
  Anonim sınıfa ilişkin Class referansının elde edilmesi getClass metodu ile yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        IX ix = new IX() {
            @Override
            public void foo()
            {

            }

            @Override
            public void bar()
            {

            }
        };

        Class<?> cls = ix.getClass();

        System.out.println(cls.getName());
    }
}


interface IX {
    void foo();
    void bar();

}

/*----------------------------------------------------------------------------------------------------------------------
  Class sınıfının getDeclaredXXX metodu ile türün elemanlarına erişim belirleyiciden bağımsız erişilebilir.
  Taban sınıfının hiç bir bölümüne bu metot ile erişilemez. getXXX metotları ile taban sınıf da dahil public
  bölümdeki elemanlara erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

class App {
    public static void main(String [] args)
    {
        Class<?> cls = Sample.class;

        System.out.println("Declared Fields:");
        for (Field field : cls.getDeclaredFields())
            System.out.printf("Type:%s, Name:%s%n", field.getType().getName(), field.getName());

        System.out.println("Fields:");
        for (Field field : cls.getFields())
            System.out.printf("Type:%s, Name:%s%n", field.getType().getName(), field.getName());

        System.out.println("////////////////////////////");

        System.out.println("Declared Methods:");
        for (Method method : cls.getDeclaredMethods())
            System.out.printf("Type:%s, Name:%s%n", method.getReturnType().getName(), method.getName());

        System.out.println("Methods:");
        for (Method method : cls.getMethods())
            System.out.printf("Type:%s, Name:%s%n", method.getReturnType().getName(), method.getName());
    }
}

class X {
    public double m_y;

    public void bar()
    {}
}

class Sample extends X {
    private int m_x;

    private void foo(int a, int b)
    {
        //...
    }

    public Sample()
    {

    }

    public Sample(int x)
    {
        m_x = x;
    }

    public int getX()
    {
        return m_x;
    }

    public void setX(int x)
    {
        m_x = x;
    }


    @Override
    public String toString()
    {
        return m_x + "";
    }
}


/*----------------------------------------------------------------------------------------------------------------------
  Aşağıdaki örnekte Sample sınıfına ilişkin private elemanlara da erişilebilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

class App {
    public static void main(String [] args)
    {
        try {
            Class<?> clsSample = Class.forName("org.csystem.app.Sample");
            Constructor<?> ctorDefault = clsSample.getDeclaredConstructor();
            Constructor<?> ctorInt = clsSample.getDeclaredConstructor(int.class);

            ctorDefault.setAccessible(true);

            Object s = ctorDefault.newInstance();

            ctorDefault.setAccessible(false);

            Method mgetX = clsSample.getDeclaredMethod("getX");

            System.out.println((int)mgetX.invoke(s));

            var s1 = ctorInt.newInstance(10);

            System.out.println(mgetX.invoke(s1));

            var fooid = clsSample.getDeclaredMethod("foo", int.class, double.class);

            fooid.setAccessible(true);

            fooid.invoke(null, 10, 20);
            fooid.invoke(null); //exception

            fooid.setAccessible(false);
        }
        catch (Throwable ex) {
            System.out.printf("Exception:%s%n", ex.getMessage());
        }
    }
}

class Sample {
    private int m_x;

    private static void foo(int a, double b)
    {
        System.out.println("foo(int, double)");
    }
    private static void foo()
    {
        System.out.println("foo()");
    }


    private Sample()
    {
        System.out.println("Sample.Sample()");
    }

    public Sample(int x)
    {
        System.out.println("Sample.Sample(int)");
        m_x = x;
    }

    public int getX()
    {
        return m_x;
    }

    public void setX(int x)
    {
        m_x = x;
    }

    @Override
    public String toString()
    {
        return m_x + "";
    }
}


/*----------------------------------------------------------------------------------------------------------------------
  Aşağıdaki örnekte singleton yazılmış bir sınıf türünden çalışma zamanı sırasında nesnelere yaratılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        try {
            Class<Sample> clsSample = Sample.class;

            var ctor = clsSample.getDeclaredConstructor();

            ctor.setAccessible(true);
            Sample s1 = (Sample)ctor.newInstance();
            Sample s2 = (Sample)ctor.newInstance();
            ctor.setAccessible(true);

            System.out.println(s1 == s2);
        }
        catch (Throwable ex) {
            System.out.printf("Exception:%s%n", ex.getMessage());
        }
    }
}

class Sample {
    private Sample() {}

    public static final Sample INSTANCE = new Sample();
}

/*----------------------------------------------------------------------------------------------------------------------
  enum türünden bir nesne reflection kullanılarak da yaratılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        try {
            Class<Sample> clsSample = Sample.class;

            var ctor = clsSample.getDeclaredConstructor();

            ctor.setAccessible(true);
            Sample s1 = (Sample)ctor.newInstance();
            Sample s2 = (Sample)ctor.newInstance();
            ctor.setAccessible(true);

            System.out.println(s1 == s2);
        }
        catch (Throwable ex) {
            System.out.printf("Exception:%s%n", ex.getMessage());
        }
    }
}

enum Sample {
    INSTANCE;
    //..
}

/*----------------------------------------------------------------------------------------------------------------------
  Aşağıdaki örnekte onCollisionEnter metodunun sınıfta var olması durumunda çağrıldığı basit örnek yapılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Random;
import java.util.function.Supplier;

class App {
    public static void main(String [] args)
    {
        MyGameFramework myGameFramework = new MyGameFramework();
        PoolGameGenerator generator = new PoolGameGenerator();

        myGameFramework.run(generator::getRandomGameObjects);
    }
}

class ThreadUtil {
    public static void sleep(long ms)
    {
        try {
            Thread.sleep(ms);
        }
        catch (InterruptedException ex) {

        }
    }
}

class PoolGameGenerator {
    private final GameObject [] m_gameObjects;
    private final Random m_random = new Random();

    public PoolGameGenerator()
    {
        m_gameObjects = new GameObject[3];
        m_gameObjects[0] = new WhiteBall("oğuz");
        m_gameObjects[1] = new OtherWhiteBall("güray");
        m_gameObjects[2] = new RedBall();
    }

    public GameObject [] getRandomGameObjects()
    {
        var gameObjects = new GameObject[2];
        boolean [] flags = new boolean[3];
        int index;

        for (int i = 0; i < 2; ++i) {
            for (;;) {
                index = m_random.nextInt(3);

                if (!flags[index])
                    break;
            }
            flags[index] = true;
        }

        index = 0;
        for (int i = 0; i < 3; ++i)
            if (flags[i])
                gameObjects[index++] = m_gameObjects[i];

        return gameObjects;
    }
}

class WhiteBall extends GameObject {
    private Color m_color;
    //...

    public WhiteBall(String name)
    {
        super(name);
        m_color = new Color(255, 255, 255);
    }
    private void onCollisionEnter(GameObject other)
    {
        System.out.println("White ball collides");
    }
}

class OtherWhiteBall extends GameObject {
    private Color m_color;
    //...

    public OtherWhiteBall(String name)
    {
        super(name);
        m_color = new Color(255, 255, 255);
    }
    private void onCollisionEnter(GameObject other)
    {
        System.out.println("Other White ball collides");
    }
}

class RedBall extends GameObject {
    private Color m_color;
    //...

    public RedBall()
    {
        super("red");
        m_color = new Color(255, 0, 0);
    }
}

//Framework'ün sınıfları
class MyGameFramework {
    //...
    private void onCollisionEnterDefaullt()
    {
        System.out.println("Default collision");
    }

    private void doWorkForGameObject(GameObject gameObject, GameObject other)
            throws IllegalAccessException, InvocationTargetException
    {
        try {
            System.out.printf("Name:%s%n", gameObject.getName());
            Class<?> cls = gameObject.getClass();
            Method m = cls.getDeclaredMethod("onCollisionEnter", GameObject.class);

            m.setAccessible(true);
            m.invoke(gameObject, other);
            m.setAccessible(false);
        }
        catch (NoSuchMethodException x) {
            onCollisionEnterDefaullt();
        }
    }

    private void doWorkForCollision(GameObject gameObject, GameObject other)
            throws IllegalAccessException, InvocationTargetException
    {
        doWorkForGameObject(gameObject, other);
        doWorkForGameObject(other, gameObject);
    }

    public void run(Supplier<GameObject[]> supplier)
    {
        try {
            for (;;) {
                var gameObjects = supplier.get();

                this.doWorkForCollision(gameObjects[0], gameObjects[1]);

                System.out.println("///////////////////////");
                ThreadUtil.sleep(3000);
            }
        }
        catch (Throwable ex) {
            ex.printStackTrace();
        }
    }
}

class Color {
    private final byte m_r, m_g, m_b;

    public Color(int r, int g, int b)
    {
        //...
        m_r = (byte)r;
        m_g = (byte)g;
        m_b = (byte)b;
    }

    public byte getR()
    {
        return m_r;
    }

    public byte getG()
    {
        return m_g;
    }

    public byte getB()
    {
        return m_b;
    }
}


class GameObject {
    private String m_name;
    //...

    public GameObject(String name)
    {
        m_name = name;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Soru: Generic bir sınıf için kaç tane açılım yapılırsa yapılsın yalnızca tek bir sınıf vardır.
    Yani generic bir sınıfın her açılımı ayrı bir tür belirmez. Bunu kod ile kanıtlayınız.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample<String> ss = new Sample<>();
        Sample<Integer> sint = new Sample<>();

        System.out.println(ss.getClass() == sint.getClass());
    }
}

class Sample<T> {
    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Iterable arayüzünden önce yani for-each döngüsünden önce iterator dolaşımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.Iterator;

class App {
    public static void main(String [] args)
    {
        ArrayList<Integer> list = new ArrayList<>();

        for (int i = 0; i < 10; ++i)
            list.add(i * 10);

        Iterator<Integer> iter = list.iterator();

        while (iter.hasNext()) {
            int val = iter.next();

            System.out.printf("%d ", val);
        }

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki kodda for-each döngü deyimine yönelik üretilebilecek bir kod yazılmıştır:

    for (int val : list)
        System.out.printf("%d ", val);
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.Iterator;

class App {
    public static void main(String [] args)
    {
        ArrayList<Integer> list = new ArrayList<>();

        for (int i = 0; i < 10; ++i)
            list.add(i * 10);

        {
            Iterator<Integer> iter = list.iterator();

            while (iter.hasNext()) {
                int val = iter.next();

                System.out.printf("%d ", val);
            }
        }

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    next metodu veri yoksa NoSuchElementException nesnesi fırlatır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.NoSuchElementException;

class App {
    public static void main(String [] args)
    {
        ArrayList<Integer> list = new ArrayList<>();

        for (int i = 0; i < 10; ++i)
            list.add(i * 10);


        var iter = list.iterator();

        try {
            for (;;) {
                int val = iter.next();

                System.out.printf("%d ", val);
            }
        }
        catch (NoSuchElementException ex) {
            System.out.println();
        }
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    IntRange sınıfı ve Iterable arayüzünün anlamı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.IntRange;

import java.util.ArrayList;
import java.util.function.Consumer;

class App {
    public static void main(String [] args)
    {
        ArrayList<String> cities = new ArrayList<>();

        cities.add("ankara");
        cities.add("istanbul");
        cities.add("izmir");
        cities.add("zonguldak");

        IntRange range = new IntRange(10, 20);

        Util.doWork(cities, System.out::println);
        Util.doWork(range, val -> System.out.printf("%d ", val * val));
        System.out.println();
    }
}


class Util {
    public static <T> void doWork(Iterable<T> iterable, Consumer<T> con)
    {
        for (var val : iterable)
            con.accept(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    IntRange sınıfı ve Iterable arayüzünün anlamı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.IntRange;

import java.util.function.Consumer;

class App {
    public static void main(String [] args)
    {
        IntRange range = new IntRange(10, 20, 3);

        Util.doWork(range, val -> System.out.printf("%d ", val));
        System.out.println();
    }
}


class Util {
    public static <T> void doWork(Iterable<T> iterable, Consumer<T> con)
    {
        for (var val : iterable)
            con.accept(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    IntRange sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class IntRange implements Iterable<Integer> {
    private final int m_min, m_max;
    private final int m_step;

    public IntRange(int min, int max)
    {
        this(min, max, 1);
    }

    public IntRange(int min, int max, int step)
    {
        if (min >= max)
            throw  new IllegalArgumentException("min must be less than max");

        m_min = min;
        m_max = max;
        m_step = step <= 0 ? 1 : step;
    }



    public int getMin()
    {
        return m_min;
    }

    public int getMax()
    {
        return m_max;
    }

    @Override
    public Iterator<Integer> iterator()
    {
        return new Iterator<Integer>() {
            private int m_curElem = m_min;

            @Override
            public boolean hasNext()
            {
                return m_curElem <= m_max;
            }

            @Override
            public Integer next()
            {
                if (!hasNext())
                    throw new NoSuchElementException();

                int val = m_curElem;

                m_curElem += m_step;

                return val;
            }
        };
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    IntRange sınıfı ve Iterable arayüzünün anlamı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.IntRange;

import java.util.function.Consumer;

class App {
    public static void main(String [] args)
    {
        IntRange range = new IntRange(10, 100, val -> 2 * val + 1);

        Util.doWork(range, val -> System.out.printf("%d ", val));
        System.out.println();
    }
}


class Util {
    public static <T> void doWork(Iterable<T> iterable, Consumer<T> con)
    {
        for (var val : iterable)
            con.accept(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    IntRange sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.IntUnaryOperator;

public class IntRange implements Iterable<Integer> {
    private final int m_min, m_max;
    private final IntUnaryOperator m_intUnaryOperator;

    public IntRange(int min, int max)
    {
        this(min, max, 1);
    }

    public IntRange(int min, int max, int step)
    {
        this(min, max, (step <= 1) ? (val -> val + 1) : (val -> val + step));
    }

    public IntRange(int min, int max, IntUnaryOperator intUnaryOperator)
    {
        if (min >= max || intUnaryOperator == null)
            throw  new IllegalArgumentException("min must be less than max OR intUnaryOperator can not be null");

        m_min = min;
        m_max = max;
        m_intUnaryOperator = intUnaryOperator;
    }

    public int getMin()
    {
        return m_min;
    }

    public int getMax()
    {
        return m_max;
    }

    @Override
    public Iterator<Integer> iterator()
    {
        return new Iterator<Integer>() {
            private int m_curElem = m_min;

            @Override
            public boolean hasNext()
            {
                return m_curElem <= m_max;
            }

            @Override
            public Integer next()
            {
                if (!hasNext())
                    throw new NoSuchElementException();

                int val = m_curElem;

                m_curElem = m_intUnaryOperator.applyAsInt(m_curElem);

                return val;
            }
        };
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Doublerange sınıfı ve Iterable arayüzünün anlamı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.DoubleRange;

import java.util.function.Consumer;

class App {
    public static void main(String [] args)
    {
        var drange = new DoubleRange(1.3, 7.4, 0.1);

        Util.doWork(drange, System.out::println);
    }
}

class Util {
    public static <T> void doWork(Iterable<T> iterable, Consumer<T> con)
    {
        for (var val : iterable)
            con.accept(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Doublerange sınıfı ve Iterable arayüzünün anlamı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.DoubleRange;

import java.util.function.Consumer;

class App {
    public static void main(String [] args)
    {
        var drange = new DoubleRange(1.3, 7.4, val -> 2 * val + 0.02);

        Util.doWork(drange, System.out::println);
    }
}

class Util {
    public static <T> void doWork(Iterable<T> iterable, Consumer<T> con)
    {
        for (var val : iterable)
            con.accept(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    DoubleRange sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.DoubleUnaryOperator;

public class DoubleRange implements Iterable<Double> {
    private final double m_min, m_max;
    private final DoubleUnaryOperator m_doubleUnaryOperator;

    public DoubleRange(double min, double max, double step)
    {
        this(min, max, (step <= 0) ? (val -> val + 1) : (val -> val + step));
    }

    public DoubleRange(double min, double max, DoubleUnaryOperator doubleUnaryOperator)
    {
        if (min >= max || doubleUnaryOperator == null)
            throw  new IllegalArgumentException("min must be less than max OR doubleUnaryOperator can not be null");

        m_min = min;
        m_max = max;
        m_doubleUnaryOperator = doubleUnaryOperator;
    }

    public double getMin()
    {
        return m_min;
    }

    public double getMax()
    {
        return m_max;
    }

    @Override
    public Iterator<Double> iterator()
    {
        return new Iterator<Double>() {
            private double m_curElem = m_min;

            @Override
            public boolean hasNext()
            {
                return m_curElem <= m_max;
            }

            @Override
            public Double next()
            {
                if (!hasNext())
                    throw new NoSuchElementException();

                double val = m_curElem;

                m_curElem = m_doubleUnaryOperator.applyAsDouble(m_curElem);

                return val;
            }
        };
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   CSDArrayList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDArrayList;

import java.util.function.Consumer;

class App {
    public static void main(String [] args)
    {
        var list = new CSDArrayList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.add(i * 10);

        Util.doWork(list, val -> System.out.printf("%d ", val));
        System.out.println();
    }
}

class Util {
    public static <T> void doWork(Iterable<T> iterable, Consumer<T> con)
    {
        for (var val : iterable)
            con.accept(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDArrayList sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.collection;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class CSDArrayList<T> implements Iterable<T> {
    private static final int DEFAULT_CAPACITY = 10;
    private T[] m_elems;
    private int m_index;

    private static void controlForCapacity(int capacity, String msg)
    {
        if (capacity < 0)
            throw new IllegalArgumentException(msg);
    }

    private void allocateCapacity(int capacity)
    {
        T [] temp = (T [])new Object[capacity];

        for (int i = 0; i < m_index; ++i)
            temp[i] = m_elems[i];

        m_elems = temp;
    }

    private void controlForIndex(int index, String msg)
    {

        if (index < 0 || index >= m_index)
            throw new IndexOutOfBoundsException(msg);
    }

    public CSDArrayList()
    {
        this(DEFAULT_CAPACITY);
    }

    @SuppressWarnings("unchecked")
    public CSDArrayList(int initialCapacity)
    {
        controlForCapacity(initialCapacity, "illegal argument");

        m_elems = (T [])new Object[initialCapacity];
    }

    public boolean add(T elem)
    {
        if (m_index == m_elems.length)
            this.allocateCapacity(m_elems.length != 0 ? m_elems.length * 2 : 1);

        m_elems[m_index++] = elem;

        return true;
    }

    public void add(int index, T elem)
    {
        //TODO:
    }

    public int capacity() {return m_elems.length;}

    public void clear()
    {
        for (int i = 0; i < m_index; ++i)
            m_elems[i] = null;

        m_index = 0;
    }

    public void ensureCapacity(int capacity)
    {
        //TODO:
    }

    public T get(int index)
    {
        this.controlForIndex(index, "Index out of bounds");

        return m_elems[index];
    }

    public T remove(int index)
    {
        //TODO:

        return null;
    }

    public T set(int index, T elem)
    {
        this.controlForIndex(index, "Index out of bounds");
        T oldElem = m_elems[index];

        m_elems[index] = elem;

        return oldElem;
    }

    public int size() {return m_index;}

    public void trimToSize()
    {
        this.allocateCapacity(m_index);
    }

    @Override
    public Iterator<T> iterator()
    {
        return new Iterator<T>() {
            private int m_curIndex;

            @Override
            public boolean hasNext()
            {
                return m_curIndex < m_index;
            }

            @Override
            public T next()
            {
                if (!hasNext())
                    throw new NoSuchElementException();

                return m_elems[m_curIndex++];
            }
        };
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   RandomIntGenerator sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RandomIntGenerator;

import java.util.function.Consumer;

class App {
    public static void main(String [] args)
    {
        var randomGenerator = new RandomIntGenerator(1, 100, 10);

        Util.doWork(randomGenerator, val -> System.out.printf("%d ", val));
        System.out.println();
    }
}

class Util {
    public static <T> void doWork(Iterable<T> iterable, Consumer<T> con)
    {
        for (var val : iterable)
            con.accept(val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    RandomIntGenerator sınıfı

    RandomIntGenerator r = new RandomIntGenerator(1, 101, 10);

    for (int val : r)
        System.out.println(val);
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Random;

public class RandomIntGenerator implements Iterable<Integer> {
    private final int m_min;
    private final int m_max;
    private final int m_count;
    private final Random m_random;

    public RandomIntGenerator(int min, int max, int count)
    {
        this(new Random(), min, max, count);
    }

    public RandomIntGenerator(Random r, int min, int max, int count)
    {
        if (min > max || count <= 0)
            throw  new IllegalArgumentException("Invalid values");

        m_random = r == null ? new Random() : r;
        m_min = min;
        m_max = max;
        m_count = count;
    }

    public int getMin()
    {
        return m_min;
    }

    public int getMax()
    {
        return m_max;
    }

    public int getCount()
    {
        return m_count;
    }

    @Override
    public Iterator<Integer> iterator()
    {
        return new Iterator<Integer>() {
            private int m_count = 1;

            @Override
            public boolean hasNext()
            {
                return m_count <= RandomIntGenerator.this.m_count;
            }

            @Override
            public Integer next()
            {
                if (!hasNext())
                    throw new NoSuchElementException();

                ++m_count;
                return m_random.nextInt(m_max - m_min) + m_min;
            }
        };
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Collection arayüzünün pratikteki anlamı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Vector;

class App {
    public static void main(String [] args)
    {
        Vector<Integer> vec = new Vector<>();

        for (int i = 0; i < 10; ++i)
            vec.add(i * 10);



        Vector<Double> vecd = new Vector<>();

        for (int i = 0; i < 10; ++i)
            vecd.add(i * 0.4);

        ArrayList<BigInteger> bigList = new ArrayList<>();

        bigList.add(new BigInteger("9999999999999999999999999999999999999999999"));
        bigList.add(new BigInteger("9999999999999999999999999999999999999999998"));


        ArrayList<Number> list = new ArrayList<>(vec);

        list.addAll(vecd);

        list.addAll(bigList);

        for (Number number : list)
            System.out.println(number);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Collection arayüzünün pratikteki anlamı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.Vector;

class App {
    public static void main(String [] args)
    {
        var names = new Vector<String>();

        names.add("ali");
        names.add("veli");
        names.add("selami");

        var list = new ArrayList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.add(i * 10);

        ArrayList<Object> objs = new ArrayList<>(names);

        objs.add(3.4);
        objs.add(true);

        objs.addAll(list);

        for (var obj : objs)
            System.out.println(obj);
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    ArrayList sınıfının indexOf metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<String> cities = new ArrayList<>();

        cities.add("ankara");
        cities.add("istanbul");
        cities.add("izmir");

        int index = cities.indexOf("ankara");

        System.out.println(index);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    ArrayList sınıfının indexOf metodu null değer aranmıyorsa equals metodunu çağırır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<Color> colors = new ArrayList<>();

        colors.add(Color.RED);
        colors.add(Color.BLUE);
        colors.add(Color.GREEN);
        colors.add(Color.GREEN);

        int index = colors.indexOf(Color.BLUE);

        System.out.println(index);
    }
}

enum Color {RED, GREEN, BLUE}


/*----------------------------------------------------------------------------------------------------------------------
    ArrayList sınıfının indexOf metodu null değer aranmıyorsa equals metodunu çağırır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        ArrayList<Product> products = new ArrayList<>();

        products.add(new Product(1, "laptop", 123, 6700));
        products.add(new Product(2, "mouse", 100, 67));
        products.add(new Product(3, "bal", 34, 300));

        int index = products.indexOf(new Product(2, "mouse"));

        if (index >= 0) {
            Product p = products.get(index);

            System.out.println(p);
        }
        else
            System.out.println("Aranan ürün bulunamadı");
    }
}



package org.csystem.samples;

public class Product {
    private int m_id;
    private String m_name;
    private int m_stock;
    private double m_price;

    public Product()
    {

    }

    public Product(int id, String name)
    {
        this(id, name, 0, 0);
    }

    public Product(int id, String name, int stock, double price)
    {
        m_id = id;
        m_name = name;
        m_stock = stock;
        m_price = price;
    }

    public int getId()
    {
        return m_id;
    }

    public void setId(int id)
    {
        m_id = id;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public int getStock()
    {
        return m_stock;
    }

    public void setStock(int stock)
    {
        m_stock = stock;
    }

    public double getPrice()
    {
        return m_price;
    }

    public void setPrice(double price)
    {
        m_price = price;
    }

    @Override
    public boolean equals(Object other)
    {
        if (!(other instanceof Product))
            return false;

        Product p = (Product)other;

        return p.m_id == m_id && p.m_name == m_name;
    }

    @Override
    public String toString()
    {
        return String.format("[%d]%s:%d * %.2f=%.2f", m_id, m_name, m_stock, m_price, m_price * m_stock);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Pair sınıfının equals metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;
import org.csystem.util.Pair;

import java.util.ArrayList;

class App {
    public static void main(String [] args)
    {
        var productPairs = new ArrayList<Pair<Integer, Product>>();

        productPairs.add(Pair.create(1, new Product(1, "laptop", 123, 6700)));
        productPairs.add(Pair.create(2, new Product(2, "mouse", 100, 67)));
        productPairs.add(Pair.create(3, new Product(3, "bal", 34, 300)));

        var productPair = Pair.create(3, new Product(3, "bal"));

        System.out.println(productPairs.contains(productPair) ? "Ürün var" : "Ürün yok");
    }
}

package org.csystem.util;

public final class Pair<F, S> {
    private final F m_first;
    private final S m_second;

    public static <F, S> Pair<F, S> create(F first, S second)
    {
        return new Pair<>(first, second);
    }

    public Pair(F first, S second)
    {
        m_first = first;
        m_second = second;
    }

    public F getFirst() {return m_first;}
    public S getSecond() {return m_second;}

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj)
    {
        var other = (Pair<F, S>)obj;

        return m_first.equals(other.m_first) && m_second.equals(other.m_second);
    }

    public String toString()
    {
        return String.format("(%s, %s)", m_first, m_second);
    }
}

package org.csystem.samples;

public class Product {
    private int m_id;
    private String m_name;
    private int m_stock;
    private double m_price;

    public Product()
    {

    }

    public Product(int id, String name)
    {
        this(id, name, 0, 0);
    }

    public Product(int id, String name, int stock, double price)
    {
        m_id = id;
        m_name = name;
        m_stock = stock;
        m_price = price;
    }

    public int getId()
    {
        return m_id;
    }

    public void setId(int id)
    {
        m_id = id;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public int getStock()
    {
        return m_stock;
    }

    public void setStock(int stock)
    {
        m_stock = stock;
    }

    public double getPrice()
    {
        return m_price;
    }

    public void setPrice(double price)
    {
        m_price = price;
    }

    @Override
    public boolean equals(Object other)
    {
        if (!(other instanceof Product))
            return false;

        Product p = (Product)other;

        return p.m_id == m_id && p.m_name == m_name;
    }

    @Override
    public String toString()
    {
        return String.format("[%d]%s:%d * %.2f=%.2f", m_id, m_name, m_stock, m_price, m_price * m_stock);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    IntValue sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public final class IntValue {
    private static final IntValue[] CACHE = new IntValue[256];
    private final int m_val;

    private IntValue(int val)
    {
        m_val = val;
    }

    public static final IntValue ONE = valueOf(1);
    public static final IntValue ZERO = valueOf(0);

    public static IntValue valueOf(int val)
    {
        if (val < -128 || val > 127)
            return new IntValue(val);

        if (CACHE[val + 128] == null)
            CACHE[val + 128] = new IntValue(val);

        return CACHE[val + 128];
    }

    public IntValue add(int val)
    {
        return valueOf(m_val + val);
    }

    public IntValue add(IntValue n)
    {
        return add(n.m_val);
    }

    public IntValue sub(int val)
    {
        return add(-val);
    }

    public IntValue sub(IntValue n)
    {
        return sub(n.m_val);
    }
    public int getVal() {return m_val;}

    @Override
    public boolean equals(Object other)
    {
        if (!(other instanceof IntValue))
            return false;

        return ((IntValue)other).m_val == m_val;
    }

    @Override
    public String toString()
    {
        return m_val + "";
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Triple sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public class Triple<F, S, T> {
    private F m_first;
    private S m_second;
    private T m_third;

    public static <F, S, T> Triple<F, S, T> create(F first, S second, T third)
    {
        return new Triple<>(first, second, third);
    }

    public Triple(F first, S second, T third)
    {
        m_first = first;
        m_second = second;
        m_third = third;
    }

    public F getFirst()
    {
        return m_first;
    }

    public S getSecond()
    {
        return m_second;
    }

    public T getThird()
    {
        return m_third;
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj)
    {
        var other = (Triple<F, S, T>)obj;

        return m_first.equals(other.m_first) && m_second.equals(other.m_second) && m_third.equals(other.m_third);
    }

    @Override
    public String toString()
    {
        return String.format("(%s, %s, %s)", m_first, m_second, m_third);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Unit sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public final class Unit<T> {
    private final T m_data;

    public static <T> Unit<T> create(T data)
    {
        return new Unit<>(data);
    }

    public Unit(T data)
    {
        m_data = data;
    }

    public T getData() {return m_data;}

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj)
    {
        var other = (Unit<T>)obj;

        return m_data.equals(other.m_data);
    }

    public String toString()
    {
        return String.format("(%s)", m_data);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Complex sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

public final class Complex {
	public double re, im;

	private static Complex add(double re1, double im1, double re2, double im2)
	{
		return new Complex(re1 + re2, im1 + im2);
	}

	private static Complex subtract(double re1, double im1, double re2, double im2)
	{
		return add(re1, im1, -re2, -im2);
	}

	private static Complex multiply(double re1, double im1, double re2, double im2)
	{
		return new Complex(re1 * re2 - im1 * im2, re1 * im2 + im1 * re2);
	}

	private static Complex devide(double re1, double im1, double re2, double im2)
	{
		//TODO: Do your homework
		return multiply(re1, im1, re2, im2);
	}

	public Complex()
	{}

	public Complex(double re)
	{
		this(re, 0);
	}

	public Complex(double re, double im)
	{
		this.re = re;
		this.im = im;
	}

	public Complex getConjugate()
	{
		return new Complex(re, -im);
	}

	public double getNorm()
	{
		return Math.sqrt(re * re + im * im);
	}

	public void dec()
	{
		--re;
	}

	public void inc()
	{
		++re;
	}

	public Complex add(Complex z)
	{
		return add(re, im, z.re, z.im);
	}

	public Complex add(double a, double b)
	{
		return add(re, im, a, b);
	}

	public Complex add(double a)
	{
		return add(a, 0);
	}

	public Complex subtract(Complex z)
	{
		return subtract(re, im, z.re, z.im);
	}

	public Complex subtract(double a, double b)
	{
		return subtract(re, im, a, b);
	}

	public Complex subtract(double a)
	{
		return subtract(a, 0);
	}

	public Complex multiply(Complex z)
	{
		return multiply(re, im, z.re, z.im);
	}

	public Complex multiply(double a, double b)
	{
		return multiply(re, im, a, b);
	}

	public Complex multiply(double a)
	{
		return multiply(a, 0);
	}

	@Override
	public boolean equals(Object obj)
	{
		var other = (Complex)obj;

		return Double.valueOf(re).equals(other.re) && Double.valueOf(im).equals(other.im);
	}

	@Override
	public String toString()
	{
		return String.format("|%.2f + %.2fi| = %f", re, im, getNorm());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	PointF sınıfı
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.math.geometry;

import static java.lang.Math.*;

public class PointF {
	public float x, y;

	public PointF()
	{}

	public PointF(float a)
	{
		this(a, 0);
	}

	public PointF(float x, float y)
	{
		this.x = x;
		this.y = y;
	}

	public PointF(double radius, double theta) //theta in degrees
	{
		this((float)(radius * cos(toRadians(theta))), (float)(radius * sin(toRadians(theta))));
	}

	public static double distance(float x1, float y1, float x2, float y2)
	{
		return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	}

	public double distance(PointF p)
	{
		return distance(x, y, p.x, p.y);
	}

	public double distance(float a, float b)
	{
		return distance(x, y, a, b);
	}

	public void offset(float dxy)
	{
		offset(dxy, dxy); //Do not repeat yourself
	}

	public void offset(float dx, float dy)
	{
		x += dx;
		y += dy;
	}

	@Override
	public boolean equals(Object obj)
	{
		var other = (PointF)obj;

		return Float.valueOf(x).equals(other.x) && Float.valueOf(y).equals(other.y);
	}

	public String toString()
	{
		return String.format("(%f, %f)", x, y);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDArrayList sınıfının equals metodunun testi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;
import org.csystem.util.Pair;
import org.csystem.util.collection.CSDArrayList;

class App {
    public static void main(String [] args)
    {
        var productPairs = new CSDArrayList<Pair<Integer, Product>>();

        productPairs.add(Pair.create(1, new Product(1, "laptop", 123, 6700)));
        productPairs.add(Pair.create(2, new Product(2, "mouse", 100, 67)));
        productPairs.add(Pair.create(3, new Product(3, "bal", 34, 300)));

        var productPair = Pair.create(3, new Product(3, "bal"));

        System.out.println(productPairs.contains(productPair) ? "Ürün var" : "Ürün yok");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDArrayList sınıfının equals metodunun testi (Metot Objects sınıfı kullanılarak yazılmıştır)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;
import org.csystem.util.Pair;
import org.csystem.util.collection.CSDArrayList;

class App {
    public static void main(String [] args)
    {
        var productPairs = new CSDArrayList<Pair<Integer, Product>>();

        productPairs.add(Pair.create(1, new Product(1, "laptop", 123, 6700)));
        productPairs.add(Pair.create(2, new Product(2, "mouse", 100, 67)));
        productPairs.add(Pair.create(3, new Product(3, "bal", 34, 300)));

        var productPair = Pair.create(3, new Product(3, "bal"));

        System.out.println(productPairs.contains(productPair) ? "Ürün var" : "Ürün yok");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDArrayList sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.collection;

import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Objects;

public class CSDArrayList<T> implements Iterable<T> {
    private static final int DEFAULT_CAPACITY = 10;
    private T[] m_elems;
    private int m_index;

    private static void controlForCapacity(int capacity, String msg)
    {
        if (capacity < 0)
            throw new IllegalArgumentException(msg);
    }

    private void allocateCapacity(int capacity)
    {
        T [] temp = (T [])new Object[capacity];

        for (int i = 0; i < m_index; ++i)
            temp[i] = m_elems[i];

        m_elems = temp;
    }

    private void controlForIndex(int index, String msg)
    {

        if (index < 0 || index >= m_index)
            throw new IndexOutOfBoundsException(msg);
    }

    public CSDArrayList()
    {
        this(DEFAULT_CAPACITY);
    }

    @SuppressWarnings("unchecked")
    public CSDArrayList(int initialCapacity)
    {
        controlForCapacity(initialCapacity, "illegal argument");

        m_elems = (T [])new Object[initialCapacity];
    }

    public boolean add(T elem)
    {
        if (m_index == m_elems.length)
            this.allocateCapacity(m_elems.length != 0 ? m_elems.length * 2 : 1);

        m_elems[m_index++] = elem;

        return true;
    }

    public void add(int index, T elem)
    {
        //TODO:
    }

    public int capacity() {return m_elems.length;}


    public void clear()
    {
        for (int i = 0; i < m_index; ++i)
            m_elems[i] = null;

        m_index = 0;
    }

    public boolean contains(Object other)
    {
        return indexOf(other) >= 0;
    }

    public void ensureCapacity(int capacity)
    {
        //TODO:
    }

    public T get(int index)
    {
        this.controlForIndex(index, "Index out of bounds");

        return m_elems[index];
    }

    public int indexOf(Object o)
    {
        int index = -1;

        if (o != null) {
            for (int i = 0; i < m_index; ++i)
                if (Objects.equals(m_elems[i], o)) {
                    index = i;
                    break;
                }
        }
        else {
            for (int i = 0; i < m_index; ++i)
                if (Objects.equals(m_elems[i], null)) {
                    index = i;
                    break;
                }
        }

        return index;
    }

    public T remove(int index)
    {
        //TODO:

        return null;
    }

    public T set(int index, T elem)
    {
        this.controlForIndex(index, "Index out of bounds");
        T oldElem = m_elems[index];

        m_elems[index] = elem;

        return oldElem;
    }

    public int size() {return m_index;}

    public void trimToSize()
    {
        this.allocateCapacity(m_index);
    }

    @Override
    public Iterator<T> iterator()
    {
        return new Iterator<T>() {
            private int m_curIndex;

            @Override
            public boolean hasNext()
            {
                return m_curIndex < m_index;
            }

            @Override
            public T next()
            {
                if (!hasNext())
                    throw new NoSuchElementException();

                return m_elems[m_curIndex++];
            }
        };
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Vector sınıfı capacity değerini herhangi bir belirtme olmazsa o anki capacity değerinin 2 katına çıkartır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Vector;

class App {
    public static void main(String [] args)
    {
        Vector<Integer> vec = new Vector<>(3);

        for (int i = 0; i < 10; ++i)
            vec.add(i * 10);

        System.out.printf("Capacity:%d%n", vec.capacity());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Vector sınıfının capacityIncrement parametreli ctor'u ile capacity miktarının ne kadar artacağı belirlenebilmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Vector;

class App {
    public static void main(String [] args)
    {
        Vector<Integer> vec = new Vector<>(4, 3);

        for (int i = 0; i < 10; ++i)
            vec.add(i * 10);

        System.out.printf("Capacity:%d%n", vec.capacity());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte Vector sınıfının capacityIncrement miktarı ctor ile alınan çarpım miktarına ayarlanmıştır.
    capacityIncrement veri elemanı protected olarak bildirilmiştir. Sınıfın capacity artırması gereken metotlar
    override edilmeli ve capacity artımı ona göre belirlenmelidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Collection;
import java.util.Vector;

class App {
    public static void main(String [] args)
    {
        MyVector<Integer> vec = new MyVector<>(3, 3);

        System.out.printf("Capacity:%d%n", vec.capacity());

        for (int i = 0; i < 4; ++i)
            vec.add(i * 10);

        System.out.printf("Capacity:%d%n", vec.capacity());

        for (int i = 0; i < 6; ++i)
            vec.add(i * 10);

        System.out.printf("Capacity:%d%n", vec.capacity());
    }
}

class MyVector<T> extends Vector<T> {
    private int m_capacityFactor;

    private void calibrateCapacityInc()
    {
        if (capacity() != size())
            return;

        int curCapacity = capacity();

        capacityIncrement = curCapacity * m_capacityFactor - curCapacity;
    }

    public MyVector()
    {
        super();
    }

    public MyVector(int initialCapacity)
    {
        super(initialCapacity);
    }

    public MyVector(int initialCapacity, int capacityFactor)
    {
        this(initialCapacity);

        m_capacityFactor = capacityFactor <= 1 ? 2 : capacityFactor;
    }

    @Override
    public boolean add(T t)
    {
        if (t == null)
            throw new IllegalArgumentException("Argument can not be null");

        this.calibrateCapacityInc();

        return super.add(t);
    }

    @Override
    public boolean addAll(Collection<? extends T> c)
    {
        if (c.contains(null))
            throw new IllegalArgumentException("Elements can not be null");

        this.calibrateCapacityInc();

        return super.addAll(c);
    }

    //...
}


/*----------------------------------------------------------------------------------------------------------------------
    Stack veri yapısı
    (LIFO: Last In First Out)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Stack;

class App {
    public static void main(String [] args)
    {
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < 10; ++i)
            stack.push(i + 1);

        while (!stack.empty())
            System.out.printf("%d ", stack.pop());

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Stack veri yapısı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.EmptyStackException;
import java.util.Stack;

class App {
    public static void main(String [] args)
    {
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < 10; ++i)
            stack.push(i + 1);

        try {
            for(;;) {
                System.out.printf("%d ", stack.pop());
            }
        }
        catch (EmptyStackException ex) {
            System.out.println("\nStack artık boş");
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Stack sınıfının search metodu en üstteki elemanı 1 numaralı indekste kabul ederek
    bulursa indeks numarasını döndürür. Bulamazsa -1 değerini döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Stack;

class App {
    public static void main(String [] args)
    {
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < 10; ++i)
            stack.push(i + 1);

        int index = stack.search(8);

        System.out.println(index);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf çalışması: ArrayList sınıfından türetilmiş bir Stack sınıfı yazınız.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDStack;

class App {
    public static void main(String [] args)
    {
        CSDStack<Integer> stack = new CSDStack<>();

        for (int i = 0; i < 10; ++i)
            stack.push(i + 1);

        while (!stack.empty())
            System.out.printf("%d ", stack.pop());

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf çalışması: ArrayList sınıfından türetilmiş bir Stack sınıfı yazınız.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDStack;

import java.util.EmptyStackException;

class App {
    public static void main(String [] args)
    {
        CSDStack<Integer> stack = new CSDStack<>();

        for (int i = 0; i < 10; ++i)
            stack.push(i + 1);

        try {
            for (;;) {
                System.out.printf("%d ", stack.pop());
                //...
            }
        }
        catch (EmptyStackException ex) {
            System.out.println();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDStack sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDStack;


class App {
    public static void main(String [] args)
    {
        CSDStack<Integer> stack = new CSDStack<>();

        for (int i = 0; i < 10; ++i)
            stack.push(i + 1);

        int index = stack.search(4);

        System.out.println(index);
    }
}


package org.csystem.util.collection;

import java.util.ArrayList;
import java.util.EmptyStackException;

public class CSDStack<T> extends ArrayList<T> {
    public boolean empty()
    {
        return isEmpty();
    }

    public T push(T elem)
    {
        this.add(elem);

        return elem;
    }

    public T pop()
    {
        if (empty())
            throw new EmptyStackException();

        return this.remove(this.size() - 1);
    }

    public T peek()
    {
        if (empty())
            throw new EmptyStackException();

        return this.get(this.size() - 1);
    }

    public int search(Object obj)
    {
        int index = this.indexOf(obj);

        return index == -1 ? index : this.size() - index;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LinkedList sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;

class App {
    public static void main(String [] args)
    {
        LinkedList<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.add(i * 10);

        System.out.println(list);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LinkedList sınıfının addFirst metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.add(0, i * 10);

        System.out.println(list);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LinkedList sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.LinkedList;

class App {
    public static void main(String [] args)
    {
        LinkedList<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(i * 10);

        System.out.println(list);

        ArrayList<Integer> arrayList = new ArrayList<>(list);

        System.out.println(arrayList);

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LinkedList sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;

class App {
    public static void main(String [] args)
    {
        LinkedList<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(i * 10);

        while (!list.isEmpty())
            System.out.printf("%d ", list.poll());

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    LinkedList sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;

class App {
    public static void main(String [] args)
    {
        LinkedList<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(i * 10);

        while (!list.isEmpty())
            System.out.printf("%d ", list.pollFirst());

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    LinkedList sınıfının poll ve pollFirst metotları eleman kalmadığında null değeri döndürür. Ancak LinkedList sınıfı
    null değer tutabildiğinden bu şekilde bir kontrol her zaman anlamlı olmayabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;

class App {
    public static void main(String [] args)
    {
        LinkedList<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(i * 10);

        list.add(null);

        list.add(67);

        Integer val;

        while ((val = list.poll()) != null)
            System.out.printf("%d ", val);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte null değeri elde edildiğinde kullanılmamaktadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;

class App {
    public static void main(String [] args)
    {
        LinkedList<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(i * 10);

        list.add(null);

        list.add(67);

        while (!list.isEmpty()) {
            Integer val = list.poll();

            if (val == null)
                continue;

            System.out.printf("%d ", val * val);
        }

        System.out.println();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki örnekte null değeri kontrolyapılmaktadır. Ancak böyle durumlarda Optional sınıfı kullanılarak
    hem okunabilir hem de daha güvenli kodlar yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;
import java.util.Optional;

class App {
    public static void main(String [] args)
    {
        LinkedList<Optional<Integer>> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(Optional.of(i * 10));

        list.add(Optional.empty());

        list.add(Optional.of(67));

        while (!list.isEmpty())
            list.poll().ifPresent(val -> System.out.printf("%d ", val * val));

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Collection arayüzünün toArray metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Integer> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.add(i * 10);

        Integer [] numbers = new Integer[list.size()];

        list.toArray(numbers);

        for (var val : numbers)
            System.out.printf("%d ", val);

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Collection arayüzünün toArray metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;
import java.util.Optional;

class App {
    public static void main(String [] args)
    {
        LinkedList<Optional<Integer>> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(Optional.of(i * 10));

        Optional<Integer> [] numbers = new Optional[list.size()];

        list.toArray(numbers);

        for (var val : numbers)
            System.out.printf("%d ", val.get());

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Collection arayüzünün toArray metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;
import java.util.Optional;

class App {
    public static void main(String [] args)
    {
        LinkedList<Optional<Integer>> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(Optional.of(i * 10));

        Optional<Integer> [] numbers = new Optional[list.size()];

        for (Optional<Integer> val : list.toArray(numbers))
            System.out.printf("%d ", val.get());

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Collection arayüzünün toArray metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.LinkedList;
import java.util.Optional;

class App {
    public static void main(String [] args)
    {
        LinkedList<Optional<Integer>> list = new LinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addFirst(Optional.of(i * 10));

        for (var val : list.toArray(new Optional[list.size()]))
            System.out.printf("%d ", val.get());

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    HashSet sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.HashSet;
import java.util.Random;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();
        HashSet<Integer> hashSet = new HashSet<>();

        for (int i = 0; i < 20; ++i) {
            int val = r.nextInt(100);

            System.out.printf("%d:%b ", val, hashSet.add(val));
        }

        System.out.println();

        System.out.println(hashSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    HashSet kullanılarak sayısal loto kupon oluşturma programı. HashSet sıralamadığı için sıralamayı yaptık
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.lottaryapp.Lottary;
import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        int n = Console.readInt("Kaç kupon oynamak istiyorsunuz?");

        Lottary lottary = new Lottary();

        ArrayUtil.display(2, lottary.getNumbers(n));
    }
}

package org.csystem.samples.lottaryapp;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Random;

public class Lottary {
    private Random m_rand;

    private int[] getNumbers()
    {
        int [] numbers = new int[6];
        int i = 0;

        var hashSet = new HashSet<Integer>();

        while (hashSet.size() != 6)
            hashSet.add(m_rand.nextInt(49) + 1);

        for (int val : hashSet)
            numbers[i++] = val;

        Arrays.sort(numbers);

        return numbers;
    }

    public Lottary()
    {
        m_rand = new Random();
    }

    public int [][] getNumbers(int n)
    {
        int [][] numbers = new int[n][];

        for (int i = 0; i < n; ++i)
            numbers[i] = getNumbers();

        return numbers;
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    HashSet sınıfı null değer de tutabilmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.HashSet;

class App {
    public static void main(String [] args)
    {
        HashSet<String> hashSet = new HashSet<>();

        hashSet.add(null);
        hashSet.add(null);


        System.out.println(hashSet.size());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    TreeSet collection sınıfı elemanları sıralı bir biçimde tutar. Sıralama doğal sıralamadır (natural sort order)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Integer> treeSet = new TreeSet<>();

        Random r = new Random();

        for (int i = 0; i < 10; ++i) {
            int val = r.nextInt(100);

            System.out.printf("%d ", val);

            treeSet.add(val);
        }

        System.out.println();
        System.out.println(treeSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    TreeSet collection sınıfı elemanları sıralamak için aşağıdaki örnekte olduğu gibi yaratılırsa
    açılıma ilişkin türün Comparable arayüzünü desteklemesi gerekir. Aksi durumda exception oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Rational> rationalTreeSet = new TreeSet<>();

        rationalTreeSet.add(new Rational(-2, 3));
        rationalTreeSet.add(new Rational(23, 13));
        rationalTreeSet.add(new Rational(7, -23));
        rationalTreeSet.add(new Rational(7, -23));

        System.out.println(rationalTreeSet);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ile büyükten küçüğe sıralama
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Rational> rationalTreeSet = new TreeSet<>((r1, r2) -> r2.compareTo(r1));

        rationalTreeSet.add(new Rational(-2, 3));
        rationalTreeSet.add(new Rational(23, 13));
        rationalTreeSet.add(new Rational(7, -23));
        rationalTreeSet.add(new Rational(7, -23));

        System.out.println(rationalTreeSet);
    }
}

class Sample implements IX {
    public void foo()
    {

    }
}
interface IX {
    void foo();
    boolean equals(Object obj);
}

/*----------------------------------------------------------------------------------------------------------------------
    Comparator arayüzünün reverseOrder metodu ile büyükten küçüğe sıralama
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.test;

import org.csystem.math.Rational;

import java.util.Comparator;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Rational> rationalTreeSet = new TreeSet<>(Comparator.reverseOrder());

        rationalTreeSet.add(new Rational(-2, 3));
        rationalTreeSet.add(new Rational(23, 13));
        rationalTreeSet.add(new Rational(7, -23));
        rationalTreeSet.add(new Rational(7, -23));

        System.out.println(rationalTreeSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Complex sınıfı ile büyükten küçüğe sıralama
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        var complexTreeSet = new TreeSet<Complex>((z1, z2) -> Double.valueOf(z2.getNorm()).compareTo(z1.getNorm()));

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-3, -6.7));
        complexTreeSet.add(new Complex(1));

        System.out.println(complexTreeSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Complex sınıfı ile küçükten büyüğe sıralama
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        var complexTreeSet = new TreeSet<Complex>((z1, z2) -> Double.valueOf(z1.getNorm()).compareTo(z2.getNorm()));

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-3, -6.7));
        complexTreeSet.add(new Complex(1));

        System.out.println(complexTreeSet);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    TreeSet sınıfını kullanarak sayısal loto kupon üreten sınıfın yazımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.lottaryapp.LottaryApp;

class App {
    public static void main(String [] args)
    {
        LottaryApp.run();
    }
}


package org.csystem.samples.lottaryapp;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

public class LottaryApp {
    public static void run()
    {
        int n = Console.readInt("Kaç kupon oynamak istiyorsunuz?");

        Lottary lottary = new Lottary();

        ArrayUtil.display(2, lottary.getNumbers(n));
    }
}

package org.csystem.samples.lottaryapp;

import java.util.Random;
import java.util.TreeSet;

public class Lottary {
    private Random m_rand;

    private int[] getNumbers()
    {
        int [] numbers = new int[6];
        int i = 0;

        var treeSet = new TreeSet<Integer>();

        while (treeSet.size() != 6)
            treeSet.add(m_rand.nextInt(49) + 1);

        while (!treeSet.isEmpty())
            numbers[i++] = treeSet.pollFirst();

        return numbers;
    }

    public Lottary()
    {
        m_rand = new Random();
    }

    public int [][] getNumbers(int n)
    {
        int [][] numbers = new int[n][];

        for (int i = 0; i < n; ++i)
            numbers[i] = getNumbers();

        return numbers;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    TreeSet collection sınıfının Comparator arayüz parametreli ctor'u ile karşılaştırmanın nasıl yapılacağı
    belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Integer> treeSet = new TreeSet<>((i1, i2) -> i2 - i1);

        Random r = new Random();

        for (int i = 0; i < 10; ++i) {
            int val = r.nextInt(100);

            System.out.printf("%d ", val);

            treeSet.add(val);
        }

        System.out.println();
        System.out.println(treeSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    TreeSet sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<String> treeSet = new TreeSet<>();

        treeSet.add("bolu");
        treeSet.add("ankara");
        treeSet.add("istanbul");
        treeSet.add("izmir");

        for (String s : treeSet)
            System.out.println(s);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    TreeSet sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<String> treeSet = new TreeSet<>((s1, s2) -> s2.compareTo(s1));

        treeSet.add("bolu");
        treeSet.add("ankara");
        treeSet.add("istanbul");
        treeSet.add("izmir");

        for (String s : treeSet)
            System.out.println(s);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Comparator sınıfının reversed isimli metodu ile elde bulunan bir comparator arayüzüne ilişkin
    sıralamanın tersi de kolaylıkla belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.Comparator;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        Comparator<Complex> comparator = (z1, z2) -> Double.valueOf(z1.getNorm()).compareTo(Double.valueOf(z2.getNorm()));
        TreeSet<Complex> complexTreeSet = new TreeSet<>(comparator.reversed());

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-5, 9));
        complexTreeSet.add(new Complex(-3, 49));

        System.out.println(complexTreeSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Comparator sınıfının comparing metodu ile sıralama kriteri fonksiyonel olarak belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.Comparator;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        Comparator<Complex> comparator =  Comparator.comparing(Complex::getNorm); //(z1, z2) -> Double.valueOf(z1.getNorm()).compareTo(Double.valueOf(z2.getNorm()));
        TreeSet<Complex> complexTreeSet = new TreeSet<>(comparator.reversed());

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-5, 9));
        complexTreeSet.add(new Complex(-3, 49));

        System.out.println(complexTreeSet);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Comparator sınıfının comparingDouble metodu ile sıralama kriteri fonksiyonel olarak belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.Comparator;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Complex> complexTreeSet = new TreeSet<>(Comparator.comparingDouble(Complex::getNorm));

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-5, 9));
        complexTreeSet.add(new Complex(-3, 49));

        System.out.println(complexTreeSet);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Comparator sınıfının comparingDouble metodu ile sıralama kriteri fonksiyonel olarak belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.Comparator;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        Comparator<Complex> comparator = Comparator.comparingDouble(Complex::getNorm);
        TreeSet<Complex> complexTreeSet = new TreeSet<>(comparator.reversed());

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-5, 9));
        complexTreeSet.add(new Complex(-3, 49));

        System.out.println(complexTreeSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Comparator sınıfının comparingDouble metodu ile sıralama kriteri fonksiyonel olarak belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.Comparator;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Complex> complexTreeSet = new TreeSet<>(Comparator.comparingDouble(z -> z.re));

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-5, 9));
        complexTreeSet.add(new Complex(-3, 49));

        System.out.println(complexTreeSet);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Comparator sınıfının comparingDouble metodu ile sıralama kriteri fonksiyonel olarak belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Complex;

import java.util.Comparator;
import java.util.TreeSet;

class App {
    public static void main(String [] args)
    {
        TreeSet<Complex> complexTreeSet = new TreeSet<>(Comparator.comparingInt(z -> (int)z.getNorm()));

        complexTreeSet.add(new Complex(3, 4));
        complexTreeSet.add(new Complex(-5, 9));
        complexTreeSet.add(new Complex(-3, 49));

        System.out.println(complexTreeSet);
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir yazının tüm karakterlerinin farklı olup olmadığın test eden
    areCharactersDistinct isimli metodu yazınız ve test ediniz
    Örnek: xyzt  -> true
           xxyzt -> false
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        String str = Console.read("Bir yazı giriniz:");

        if (Util.areCharactersDistinct(str))
            Console.writeLine("%s içerisindeki tüm karakterler farklı", str);
        else
            Console.writeLine("%s içerisinde tekrarlayan karakterler var", str);
    }
}

class Util {
    public static boolean areCharactersDistinct(String str)
    {
        var hashset = new HashSet<Character>();
        var length =  str.length();

        for (int i = 0; i < length; ++i)
            hashset.add(str.charAt(i));

        return hashset.size() == length;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Java' da Map<K, V> arayüzünü destekleyen de bir grup collection sınıf vardır. Bu arayüz herhangi bir arayüzden
    türetilmemiştir. Bu arayüzü destekleyen sınıflara sözlük (dictionary) tarzı collection sınıflar denir. Bu tarz
    collection sınıflarda bir anahtar ve bir de karşılık geldiği değeri vardır. Anahtar değeri tekil (unique)
    olarak tutulur. Bir anahtar için yeni bir değer verildiğinde ikinci bir anahtar eklenmez eski değer yeni değer
    ile değiştirilir. Bu collection sınıflarda anahtar değeri küme tarzı collection sınıflar ile tutulur. Anahtarın
    eşitlik karşılaştırması için equals metoduna bakılır. Eğer sınıf hash veri yapısı da kullanıyorsa hashCode metodu de
    eşitlik kriterini belirler.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    HashMap sınıfının put metodu ile bir anahtara karşılık değer eklenebilir. put metodu
	anahtar daha önce eklenmişse eskisini ezer yani yeni değeri ekler. Bu durumda eski değere  de
	geri döner. Eğer anahtar eklenmemişse null değeri döner. Bu collection sınıflar null değeri de
	tutabildiklerinden var olup olmamasına ilişkin strateji izlemek için containsKey metodu kullanılmalıdır.
	get metodu anahtara karşılık tutulan değeri bize verir. Eğer bu değer yoksa null değeri verir.
	Ancak null değeri de tutuluyorsa geri dönüş değerinden var olup olmadığı anlaşılamaz. Bu durumda
	containsKey ile test yapılarak veri alınabilir. Anahtarın tekilliği (unique) hashCode ve
	equals metotları ile test edilmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.HashMap;

class App {
    public static void main(String [] args)
    {
        var cityMap = new HashMap<Integer, String>();

        cityMap.put(34, "istanbul");
        cityMap.put(67, "zonguldak");
        cityMap.put(6, "ankara");

        int plate = Console.readInt("Plakayı giriniz:");

        if (cityMap.containsKey(plate))
            System.out.println(cityMap.get(plate));
        else
            System.out.println("Aranan plakaya ilişkin il bulunamadı");
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    HashMap sınıfının keySet metodu tüm anahtarlara ilişkin Set referansını döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.HashMap;

class App {
    public static void main(String [] args)
    {
        var countyMap = new HashMap<Integer, ArrayList<String>>();

        countyMap.put(34, new ArrayList<>());
        countyMap.get(34).add("şişli");
        countyMap.get(34).add("fatih");
        countyMap.get(34).add("silivri");

        countyMap.put(6, new ArrayList<>());
        countyMap.get(6).add("çankaya");
        countyMap.get(6).add("kazan");

        for (var key : countyMap.keySet()) {
            System.out.printf("%d->", key);
            for (var county : countyMap.get(key))
                System.out.printf("%s ", county);

            System.out.println();
        }
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    HashMap sınıfının values metodu ile tüm değerler elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.HashMap;

class App {
    public static void main(String [] args)
    {
        var countyMap = new HashMap<Integer, ArrayList<String>>();

        countyMap.put(34, new ArrayList<>());
        countyMap.get(34).add("şişli");
        countyMap.get(34).add("fatih");
        countyMap.get(34).add("silivri");

        countyMap.put(6, new ArrayList<>());
        countyMap.get(6).add("çankaya");
        countyMap.get(6).add("kazan");

        for (var list : countyMap.values()) {
            for (var county : list)
                System.out.printf("%s ", county);
            System.out.println();
        }
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    TreeMap sınıfı anahtar değerlerini sıralı olarak tutar. keySet metodu da değerleri sıralı bir set olarak
    verir. TreeMap için verilen anahtar değeri eğer Comparator arayüzü referansı verilmeyecekse
    Compareable arayüzünü desteklemelidir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.TreeMap;

class App {
    public static void main(String [] args)
    {
        var countyMap = new TreeMap<Integer, ArrayList<String>>();

        countyMap.put(34, new ArrayList<>());
        countyMap.get(34).add("şişli");
        countyMap.get(34).add("fatih");
        countyMap.get(34).add("silivri");

        countyMap.put(6, new ArrayList<>());
        countyMap.get(6).add("çankaya");
        countyMap.get(6).add("kazan");

        countyMap.put(67, new ArrayList<>());
        countyMap.get(67).add("Kdz. Ereğli");
        countyMap.get(67).add("Devrek");
        countyMap.get(67).add("Çaycuma");


        for (var key : countyMap.keySet()) {
            System.out.printf("%d -> ", key);
            for (var county : countyMap.get(key))
                System.out.printf("%s ", county);

            System.out.println();
        }

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    TreeMap ile Comparator kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.test;

import org.csystem.util.IntNumber;

import java.util.ArrayList;
import java.util.TreeMap;

class App {
    public static void main(String [] args)
    {
        var countyMap = new TreeMap<IntNumber, ArrayList<String>>((i1, i2) -> i1.getVal() - i2.getVal());

        countyMap.put(IntNumber.valueOf(34), new ArrayList<>());
        countyMap.get(IntNumber.valueOf(34)).add("şişli");
        countyMap.get(IntNumber.valueOf(34)).add("fatih");
        countyMap.get(IntNumber.valueOf(34)).add("silivri");

        countyMap.put(IntNumber.valueOf(1000), new ArrayList<>());
        countyMap.get(IntNumber.valueOf(1000)).add("çankaya");
        countyMap.get(IntNumber.valueOf(1000)).add("kazan");

        countyMap.put(IntNumber.valueOf(67), new ArrayList<>());
        countyMap.get(IntNumber.valueOf(67)).add("Kdz. Ereğli");
        countyMap.get(IntNumber.valueOf(67)).add("Devrek");
        countyMap.get(IntNumber.valueOf(67)).add("Çaycuma");


        for (var key : countyMap.keySet()) {
            System.out.printf("%s -> ", key);
            for (var county : countyMap.get(key))
                System.out.printf("%s ", county);

            System.out.println();
        }

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir program içerisinde aynı yazıların hashCode bilgileri eşittir. hashCode metodunun String sınıfı
    için nasıl override edildiğine ilişkin kesinlik yoktur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        var s = Console.read("Bir yazı giriniz:");
        var str = "ankara";

        Console.writeLine("HashCode of s:%d%n", s.hashCode());
        Console.writeLine("HashCode of str:%d%n", str.hashCode());
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    StringUtil sınıfının areAnagram metodu ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;
import org.csystem.util.StringUtil;

class App {
    public static void main(String [] args)
    {
        String s1 = Console.read("Birinci yazıyı giriniz:");
        String s2 = Console.read("İkinci yazıyı giriniz:");

        System.out.print(StringUtil.areAnagram(s1, s2) ? "Anagram" : "Anagram değil");
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir yazının tüm karakterlerinin farklı olup olmadığın test eden
    areCharactersDistinct isimli metodu yazınız ve test ediniz
    Örnek: xyzt  -> true
           xxyzt -> false
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;
import org.csystem.util.StringUtil;

class App {
    public static void main(String [] args)
    {
        String str = Console.read("Bir yazı giriniz:");

        if (StringUtil.areCharactersDistinct(str))
            Console.writeLine("%s içerisindeki tüm karakterler farklı", str);
        else
            Console.writeLine("%s içerisinde tekrarlayan karakterler var", str);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    YUKARIDA KULLANILAN YARARLI SINIFLAR
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
    ArrayUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public final class ArrayUtil {
    private ArrayUtil() {}

    public static int[][] addMatrices(int [][] a, int []...b)
    {
        if (!isMatrix(a) || !isMatrix(b) || a.length != b.length || a[0].length != b[0].length)
            throw new IllegalArgumentException("Geçersiz matris(ler)");

        var row = a.length;
        var col = a[0].length;
        var m = new int[row][col];

        for (var i = 0; i < row; ++i)
            for (var j = 0; j < col; ++j)
                m[i][j] = a[i][j] + b[i][j];

        return m;
    }

    public static BigDecimal average(BigDecimal...bigDecimals)
    {
        return average(bigDecimals, 6, RoundingMode.HALF_UP);
    }

    public static BigDecimal average(BigDecimal [] bigDecimals, int scale, RoundingMode roundingMode)
    {
        return sum(bigDecimals).divide(BigDecimal.valueOf(bigDecimals.length), scale, roundingMode);
    }

    public static double average(int...a)
    {
        return (double)sum(a) / a.length;
    }


    public static int copyIfLengthGreater(String [] src, String [] dest, int val)
    {
        var index = 0;

        for (var s : src)
            if (s.length() > val)
                dest[index++] = s;

        return index;
    }

    public static void display(int ...a)
    {
        display(1, a);
    }

    public static void display(int n, int...a)
    {
        display(n, true, a);
    }

    public static void display(int n, boolean putZero, int...a)
    {
        var fmt = putZero ? String.format("%%0%dd ", n) : String.format("%%%dd ", n);

        for (var val : a)
            System.out.printf(fmt, val);

        System.out.println();
    }

    public static void display(String...str)
    {
        display(str, str.length);
    }

    public static void display(String [] str, int n)
    {
        for (var i = 0; i < n; ++i)
            System.out.println(str[i]);
    }

    public static void display(int []...a)
    {
        display(1, a);
    }

    public static void display(int n, int[]...a)
    {
        display(n, true, a);
    }

    public static void display(int n, boolean putZero, int []...a)
    {
        for (var array : a)
            display(n, putZero, array);
    }

    public static void drawHistogram(int [] h, int n, char ch)
    {
        var maxVal = max(h);

        for (var val : h) {
            var count = Math.round(val * n / maxVal);

            while (count -- > 0)
                System.out.print(ch);

            System.out.println();
        }
    }

    public static boolean equals(int [][]a, int [][] b)
    {
        if (a.length != b.length)
            return false;

        for (var i = 0; i < a.length; ++i)
            if (!Arrays.equals(a[i], b[i]))
                return false;

        return true;
    }

    public static void fill(int [][] a, int...values)
    {
        for (var i = 0; i < values.length; ++i)
            Arrays.fill(a[i], values[i]);
    }

    public static int [] getHistogramData(int [] a, int n) //[0, n]
    {
        var hist = new int[n + 1];

        for (var val : a)
            ++hist[val];

        return hist;
    }

    public static int [] getMinComparedArray(int [][] a)
    {
        var min = a[0];

        for (var i = 1; i < a.length; ++i)
            if (Arrays.compare(a[i], min) < 0)
                min = a[i];

        return Arrays.copyOf(min, min.length);
    }

    public static int [] getMaxComparedArray(int [][] a)
    {
        var max = a[0];

        for (var i = 1; i < a.length; ++i)
            if (Arrays.compare(max, a[i]) < 0)
                max = a[i];

        return Arrays.copyOf(max, max.length);
    }

    public static int [] getRandomArray(int n, int min, int max) //[min, max)
    {
        return getRandomArray(new Random(), n, min, max);
    }


    public static int [] getRandomArray(Random r, int n, int min, int max) //[min, max)
    {
        var a = new int[n];

        for (var i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }

    public static int[][] getRandomMatrix(int m, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(new Random(), m, n, min, max);
    }

    public static int[][] getRandomMatrix(Random r, int m, int n, int min, int max) //[min, max)
    {
        var a = new int[m][];

        for (var i = 0; i < m; ++i)
            a[i] = getRandomArray(r, n, min, max);

        return a;
    }

    public static int[][] getRandomSquareMatrix(int n, int min, int max) //[min, max)
    {
        return getRandomSquareMatrix(new Random(), n, min, max);
    }

    public static int[][] getRandomSquareMatrix(Random r, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(r, n, n, min, max);
    }

    public static boolean isEmpty(int [] a)
    {
        return a.length == 0;
    }


    public static boolean isMatrix(int [][] a)
    {
        var col = a[0].length;

        for (var i = 1; i < a.length; ++i)
            if (a[i].length != col)
                return false;

        return true;
    }

    public static boolean isSquareMatrix(int [][] a)
    {
        return isMatrix(a) && a.length == a[0].length;
    }

    public static int [] join(int [] a, int...b)
    {
        var res = new int[a.length + b.length];
        var index = 0;

        for (var val : a)
            res[index++] = val;

        for (var val : b)
            res[index++] = val;

        return res;
    }

    public static String join(String [] s, char delim)
    {
        return join(s, delim + "");
    }

    public static String join(String [] s, String delim)
    {
        return join(s, s.length, delim);
    }

    public static String join(ArrayList<String> list, char delim)
    {
        return join(list, delim + "");
    }

    public static String join(ArrayList<String> list, String delim)
    {
        var str = "";

        for (var o : list)
            str += o + delim;

        return str.substring(0, str.length() - delim.length());
    }

    public static String join(String [] s, int n, char delim)
    {
        return join(s, n, delim + "");
    }

    public static String join(String [] s, int n, String delim)
    {
        var sb = new StringBuilder();

        for (var i = 0; i < n; ++i)
            sb.append(s[i]).append(delim);

        return sb.substring(0, sb.length() - delim.length());
    }

    public static int max(int [] a)
    {
         var maxVal = a[0];

        for (var i = 1; i < a.length; ++i)
            if (maxVal < a[i])
                maxVal = a[i];

        return maxVal;
    }

    public static int max(int [][] a)
    {
        var maxVal = Integer.MIN_VALUE;

        for (var array : a)
            for (var val : array)
                if (maxVal < val)
                    maxVal = val;

        return maxVal;
    }

    public static BigDecimal max(BigDecimal [] bigDecimals)
    {
        var res = bigDecimals[0];

        for (var i = 1; i < bigDecimals.length; ++i)
            res = res.max(bigDecimals[i]);

        return res;
    }

    public static int min(int [] a)
    {
        var minVal = a[0];

        for (var i = 1; i < a.length; ++i)
            if (minVal > a[i])
                minVal = a[i];

        return minVal;
    }

    public static int min(int [][] a)
    {
        var minVal = Integer.MAX_VALUE;

        for (var array : a)
            for (var val : array)
                if (minVal > val)
                    minVal = val;

        return minVal;
    }

    public static BigDecimal min(BigDecimal [] bigDecimals)
    {
        var res = bigDecimals[0];

        for (var i = 1; i < bigDecimals.length; ++i)
            res = res.min(bigDecimals[i]);

        return res;
    }

    public static char [] reverse(char [] a)
    {
        new StringBuilder(a.length)
                .append(a)
                .reverse()
                .getChars(0, a.length, a, 0);

        return a;
    }

    public static int[] resizeActual(int [] a, int size)
    {
        if (size == a.length)
            return a;

        return Arrays.copyOf(a, size);
    }

    public static int[] resize(int [] a, int size)
    {
        if (size <= a.length)
            return a;

        return Arrays.copyOf(a, size);
    }

    public static int [] reverse(int [] a)
    {
        var halfLen = a.length / 2;

        for (var i = 0; i < halfLen; ++i) {
            var temp = a[i];

            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }

        return a;
    }


    public static int sum(int...a)
    {
        return sum(0, a);
    }

    public static int sum(int init, int...a)
    {
        var total = init;

        for (var val : a)
            total += val;

        return total;
    }

    public static int sumDiagonal(int [][] a)
    {
        if (!isSquareMatrix(a))
            throw new IllegalArgumentException("Kare matris gereklidir");

        var total = 0;

        for (var i = 0; i < a.length; ++i)
            total += a[i][i];

        return total;
    }

    public static BigDecimal sum(BigDecimal [] bigDecimals)
    {
        var result = BigDecimal.ZERO;

        for (var bigDecimal : bigDecimals)
            result = result.add(bigDecimal);

        return result;
    }

    public static int [][] transpose(int [][] a)
    {
        var t = new int[a[0].length][a.length];

        for (var i = 0; i < a.length; ++i)
            for (var j = 0; j < a[i].length; ++j)
                t[j][i] = a[i][j];

        return t;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Random;

public final class StringUtil {
	private static char getRandomChar(Random r, String s)
	{
		return s.charAt(r.nextInt(s.length()));
	}

	private static void addWithValue(HashMap<Character, Integer> charMap, String s, int val)
	{
		int length = s.length();

		for (int i = 0; i < length; ++i) {
			char c = s.charAt(i);
			int count = 1;

			if (charMap.containsKey(c))
				count = charMap.get(c) + val;

			charMap.put(c, count);
		}
	}

	private static boolean subWithValue(HashMap<Character, Integer> charMap, String s, int val)
	{
		int length = s.length();

		for (int i = 0; i < length; ++i) {
			char c = s.charAt(i);

			if (!charMap.containsKey(c))
				return false;

			charMap.put(c, charMap.get(c) - val);
		}

		return true;
	}

	private StringUtil() {}

	public static boolean areAnagram(String s1, String s2)
	{
		if (s1.length() != s2.length())
			return false;

		var charMap = new HashMap<Character, Integer>();

		addWithValue(charMap, s1, 1);
		if (!subWithValue(charMap, s2, 1))
			return false;

		for (var val : charMap.values())
			if (val != 0)
				return false;

		return true;
	}

	public static boolean areCharactersDistinct(String str)
	{
		var hashset = new HashSet<Character>();
		var length =  str.length();

		for (int i = 0; i < length; ++i)
			if (!hashset.add(str.charAt(i)))
				return false;

		return true;
	}

	public static String changeCase(String s)
	{
		var sb = new StringBuilder(s);

		var len = sb.length();

		for (var i = 0; i < len; ++i) {
			var ch = sb.charAt(i);

			if (Character.isUpperCase(ch))
				sb.setCharAt(i, Character.toLowerCase(ch));
			else if (Character.isLowerCase(ch))
				sb.setCharAt(i, Character.toUpperCase(ch));
		}

		return sb.toString();
	}

	public static int getCount(String s1, String s2)
	{
		var count = 0;
		var index = 0;

		while ((index = s1.indexOf(s2, index)) != -1) {
			++count;
			++index;
		}

		return count;
	}

	public static String getLetters(String s)
	{
		var str = "";
		var len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String getRandomString(int n, String str)
	{
		return getRandomString(new Random(), n, str);
	}

	public static String getRandomString(Random r, int n, String str)
	{
		var c = new char[n];

		for (var i = 0; i < n; ++i)
			c[i] = getRandomChar(r, str);

		return new String(c);
	}

	public static String getRandomStringTR(int n)
	{
		return getRandomStringTR(new Random(), n);
	}

	public static String getRandomStringTR(Random r, int n)
	{
		var alphabet = "ABCÇDEFGĞHIİJKLMNOÖPRSŞTUÜVYZabcçdefgğhıijklmnoöprsştuüvyz";

		return getRandomString(r, n, alphabet);
	}

	public static boolean isPalindirome(String s)
	{
		var str = getLetters(s);

		var halfLen = str.length() / 2;
		var len = str.length();

		for (var i = 0; i < halfLen; ++i) {
			var chLeft = Character.toLowerCase(str.charAt(i));
			var chRight = Character.toLowerCase(str.charAt(len - 1 - i));

			if (chLeft != chRight)
				return false;
		}

		return true;
	}

	public static boolean isPangramEN(String str)
	{
		var alphabet = "abcdefghijklmnopqrstuvwxyz";

		return isPangram(str.toLowerCase(), alphabet);
	}

	public static boolean isPangramTR(String str)
	{
		var alphabet = "abcçdefgğhıijklmnoöprsştuüvyz";

		return isPangram(str.toLowerCase(), alphabet);
	}

	public static boolean isPangram(String str, String alphabet)
	{
		var len = alphabet.length();

		for (var i = 0; i < len; ++i) {
			var ch = alphabet.charAt(i);

			if (str.indexOf(ch) == -1)
				return false;
		}

		return true;
	}

	public static String padLeft(String s, int len, char ch)
	{
		var sLen = s.length();

		if (len <= sLen)
			return s;

		return repeat(len - sLen, ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		var sLen = s.length();

		if (len <= sLen)
			return s;

		return s + repeat(len - sLen, ch);

	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeWhitespaces(String s)
	{
		var str = "";

		int len = s.length();

		for (var i = 0; i < len; ++i) {
			var ch = s.charAt(i);

			if (!Character.isWhitespace(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		return repeat(n, ch + "");
	}

	public static String repeat(int n, String s)
	{
		var len = s.length();
		var c = new char[n * len];

		for (var i = 0; i < c.length; i += len) {
			for (var k = 0; k < len; ++k)
				c[i + k] = s.charAt(k);
		}

		return new String(c);
	}

	public static String reverse(String s)
	{
		return new StringBuilder(s).reverse().toString();
	}

	public static String [] split(String str, String delim, StringSplitOptions options)
	{
		var regex = "[";

		var delimLen = delim.length();

		for (var i = 0; i < delimLen; ++i) {
			char ch = delim.charAt(i);

			regex += ch == ']' || ch == '[' ? "\\" + ch : ch;
		}

		regex += ']';
		if (StringSplitOptions.REMOVE_EMPTY_ENTRIES == options)
			regex += '+';

		return str.split(regex);
	}


	public static String squeeze(String s1, String s2)
	{
		var len = s1.length();
		var sb = new StringBuilder(len);

		for (var i = 0; i < len; ++i) {
			var ch = s1.charAt(i);

			if (s2.indexOf(ch) == -1)
				sb.append(ch);
		}

		return sb.toString();
	}

	public static String toUpper(String str)
	{
		return str.toUpperCase();
	}

	public static String trimLeft(String s)
	{
		var i = 0;
		var len = s.length();

		for (; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}

	public static String trimRight(String s)
	{
		var i = s.length() - 1;

		for (; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

}

/*----------------------------------------------------------------------------------------------------------------------
    NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.math.BigInteger;
import java.util.OptionalDouble;
import java.util.OptionalInt;

public final class NumberUtil {
	private static final BigInteger TWO = BigInteger.valueOf(2); // For Java versions before 9
	private static final BigInteger THREE = BigInteger.valueOf(3);
	private static final BigInteger FIVE = BigInteger.valueOf(5);
	private static final BigInteger SEVEN = BigInteger.valueOf(7);
	private static final BigInteger ELEVEN = BigInteger.valueOf(11);

	private static int [] getDigits(long val, int n)
	{
		val = Math.abs(val);
		var count = val == 0 ? 1 : (int)(Math.log10(val) / n + 1);
		var divisor = (int)Math.pow(10, n);
		var digits = new int[count];

		for (var i = count - 1; i >= 0; --i) {
			digits[i] = (int)(val % divisor);
			val /= divisor;
		}

		return digits;
	}

	private static String numToStrMax3DigitsTR(int n)
	{
		if (n == 0)
			return "sıfır";

		var ones = new String[]{"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
		var tens = new String[]{"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};
		var str = n < 0 ? "eksi" : "";

		n = Math.abs(n);

		var a = n / 100;
		var b = n / 10 % 10;
		var c = n % 10;

		if (a != 0) {
			if (a != 1)
				str += ones[a];
			str += "yüz";
		}

		if (b != 0)
			str += tens[b];

		if (c != 0)
			str += ones[c];

		return str;
	}

	private NumberUtil() {}

	public static long factorial(int n)
	{
		if (n < 0)
			return  -1;

		var result = 1L;

		for (var i = 2L; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(long val)
	{
		return getDigits(val, 1);
	}

	public static int [] getDigitsInThrees(long val)
	{
		return getDigits(val, 3);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)(Math.log10(Math.abs(val)) + 1);
	}

	public static int getDigitsSum(int val)
	{
		var sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getFibonacciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		var prev1 = 0;
		var prev2 = 1;
		var result = 0;

		for (var i = 2; i < n; ++i) {
			result = prev1 + prev2;
			prev1 = prev2;
			prev2 = result;
		}

		return result;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		var count = 0;
		var val = 0;

		for (var i = 2; count < n; ++i)
			if (isPrime(i)) {
				++count;
				val = i;
			}

		return val;
	}

	public static int [] getPrimes(int n)
	{
		var count = 0;
		var primes = new int[n];

		for (var i = 2; count < n; ++i)
			if (isPrime(i)) {
				primes[count] = i;
				++count;
			}

		return primes;
	}

	public static int getReverse(int val)
	{
		var rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		var n = getDigitsCount(val);
		var temp = val;
		var sum = 0;

		while (temp != 0) {
			sum += Math.pow(temp % 10, n);
			temp /= 10;
		}

		return sum == val;
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}
	public static boolean isNotPalindrome(int val)
	{
		return !isPalindrome(val);
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static boolean isPrime(BigInteger val)
	{
		if (val.compareTo(BigInteger.ONE) <= 0)
			return false;

		if (val.mod(TWO).equals(BigInteger.ZERO))
			return val.equals(TWO);

		if (val.mod(THREE).equals(BigInteger.ZERO))
			return val.equals(THREE);

		if (val.mod(FIVE).equals(BigInteger.ZERO))
			return val.equals(FIVE);

		if (val.mod(SEVEN).equals(BigInteger.ZERO))
			return val.equals(SEVEN);

		var sqrtVal = val.sqrt();

		for (var i = ELEVEN; i.compareTo(sqrtVal) <= 0; i = i.add(TWO))
			if (val.mod(i).equals(BigInteger.ZERO))
				return false;

		return true;
	}

	public static boolean isPrime(long val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		var sqrtVal = (long)Math.sqrt(val);

		for (var i = 11L; i <= sqrtVal; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPrime(int val)
	{
		return isPrime((long)val);
	}

	public static boolean isNotPrime(int val) {return !isPrime(val);}

	public static int min(int a, int b, int c)
	{
		return (a < b) ? (a < c ? a : c) : (b < c ? b : c);
	}

	public static int max(int a, int b, int c)
	{
		return (a > b) ? (a > c ? a : c) : (b > c ? b : c);
	}

	public static String numToStrTR(long n)
	{
		//TODO:Homework
		return numToStrMax3DigitsTR((int)n);
	}

	public static OptionalInt toInt(String str)
	{
		return toInt(str, 10);
	}

	public static OptionalInt toInt(String str, int radix)
	{
		OptionalInt optionalInt = OptionalInt.empty();

		try {
			optionalInt = OptionalInt.of(Integer.parseInt(str, radix));
		}
		catch (NumberFormatException ex) {

		}

		return optionalInt;
	}

	public static OptionalDouble toDouble(String str)
	{
		OptionalDouble optionalDouble = OptionalDouble.empty();

		try {
			optionalDouble = OptionalDouble.of(Double.parseDouble(str));
		}
		catch (NumberFormatException ex) {

		}

		return optionalDouble;
	}

}

/*----------------------------------------------------------------------------------------------------------------------
    Unit sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public final class Unit<T> {
    private final T m_data;

    public static <T> Unit<T> create(T data)
    {
        return new Unit<>(data);
    }

    public Unit(T data)
    {
        m_data = data;
    }

    public T getData() {return m_data;}

    @Override
    public int hashCode()
    {
        return m_data.hashCode();
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        var other = (Unit<T>)obj;

        return m_data.equals(other.m_data);
    }

    public String toString()
    {
        return String.format("(%s)", m_data);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Pair sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public final class Pair<F, S> {
    private final F m_first;
    private final S m_second;

    public static <F, S> Pair<F, S> create(F first, S second)
    {
        return new Pair<>(first, second);
    }

    public Pair(F first, S second)
    {
        m_first = first;
        m_second = second;
    }

    public F getFirst() {return m_first;}
    public S getSecond() {return m_second;}

    @Override
    public int hashCode()
    {
        return m_first.hashCode();
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        var other = (Pair<F, S>)obj;

        return m_first.equals(other.m_first) && m_second.equals(other.m_second);
    }

    public String toString()
    {
        return String.format("(%s, %s)", m_first, m_second);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Triple sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public class Triple<F, S, T> {
    private F m_first;
    private S m_second;
    private T m_third;

    public static <F, S, T> Triple<F, S, T> create(F first, S second, T third)
    {
        return new Triple<>(first, second, third);
    }

    public Triple(F first, S second, T third)
    {
        m_first = first;
        m_second = second;
        m_third = third;
    }

    public F getFirst()
    {
        return m_first;
    }

    public S getSecond()
    {
        return m_second;
    }

    public T getThird()
    {
        return m_third;
    }

    @Override
    public int hashCode()
    {
        return m_first.hashCode();
    }

    @Override
    @SuppressWarnings("unchecked")
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        var other = (Triple<F, S, T>)obj;

        return m_first.equals(other.m_first) && m_second.equals(other.m_second) && m_third.equals(other.m_third);
    }

    @Override
    public String toString()
    {
        return String.format("(%s, %s, %s)", m_first, m_second, m_third);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

public final class Rational implements Comparable<Rational> {
    private int m_a, m_b;

    private static Rational add(int a1, int b1, int a2, int b2)
    {
        return new Rational(a1 * b2 + a2 * b1, b1 * b2);
    }

    private static Rational sub(int a1, int b1, int a2, int b2)
    {
        return add(a1, b1, -a2, b2);
    }

    private static Rational mul(int a1, int b1, int a2, int b2)
    {
        return new Rational(a1 * a2, b1 * b2);
    }

    private static Rational div(int a1, int b1, int a2, int b2)
    {
        return mul(a1, b1, b2, a2);
    }


    private static void control(int a, int b)
    {
        if (b == 0) {
            if (a == 0)
                throw new RationalException("Belirsiz", RationalExceptionStatus.INDEFINITE);

            throw new RationalException("Tanımsız", RationalExceptionStatus.UNDEFINED);
        }
    }

    private void calibrateSigns(int a, int b)
    {
        m_a = a;
        m_b = b;

        if (m_b < 0) {
            m_a = -m_a;
            m_b = -m_b;
        }
    }

    private void simplify()
    {
        int a = Math.abs(m_a);

        int min = a > m_b ? m_b : a;

        for (int i = min; i >= 2; --i)
            if (m_a % i == 0 && m_b % i == 0) {
                m_a /= i;
                m_b /= i;
                break;
            }
    }

    private void set(int a, int b)
    {
        if (a == 0) {
            m_a = 0;
            m_b = 1;
            return;
        }

        calibrateSigns(a, b);
        simplify();
    }

    public Rational()
    {
        m_b = 1;
    }

    public Rational(int a)
    {
        m_a = a;
        m_b = 1;
    }

    public Rational(int a, int b)
    {
        control(a, b);
        set(a, b);
    }

    public int getNumerator() {return m_a;}
    public int getDenominator() {return m_b;}
    public double getRealValue() {return (double)m_a / m_b;}

    public void setNumerator(int a)
    {
        if (a == m_a)
            return;

        set(a, m_b);
    }

    public void setDenominator(int b)
    {
        if (b == m_b)
            return;

        control(m_a, b);
        set(m_a, b);
    }

    //add methods
    public Rational add(Rational r)
    {
        return add(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational add(int val)
    {
        return add(m_a, m_b, val, 1);
    }

    //sub methods
    public Rational sub(Rational r)
    {
        return sub(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational sub(int val)
    {
        return sub(m_a, m_b, val, 1);
    }

    //mul methods
    public Rational mul(Rational r)
    {
        return mul(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational mul(int val)
    {
        return mul(m_a, m_b, val, 1);
    }

    //div methods
    public Rational div(Rational r)
    {
        return div(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational div(int val)
    {
        return div(m_a, m_b, val, 1);
    }

    //inc method
    public void inc()
    {
        inc(1);
    }

    public void inc(int val)
    {
        m_a += m_b * val;
    }

    //dec method
    public void dec()
    {
        dec(1);
    }

    public void dec(int val)
    {
        inc(-val);
    }

    @Override
    public int compareTo(Rational other)
    {
        return m_a * other.m_b - other.m_a * m_b;
    }

    @Override
    public boolean equals(Object obj)
    {
        var other = (Rational)obj;

        return m_a == other.m_a && m_b == other.m_b;
    }

    @Override
    public String toString()
    {
        return String.format("%d / %d = %f", m_a, m_b, getRealValue());
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    RationalException sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

public class RationalException extends RuntimeException {
    private RationalExceptionStatus m_rationalExceptionStatus;

    public RationalException(String msg, RationalExceptionStatus rationalExceptionStatus)
    {
        super(msg);
        m_rationalExceptionStatus = rationalExceptionStatus;
    }

    public String getMessage()
    {
        return String.format("Message:%s%s",
                super.getMessage(), m_rationalExceptionStatus != null ? ", ExceptionStatus:%s" + m_rationalExceptionStatus : "");
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    RationalExceptionStatus sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

public enum RationalExceptionStatus {UNDEFINED, INDEFINITE}
/*----------------------------------------------------------------------------------------------------------------------
    Complex sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

public final class Complex {
	public double re, im;

	private static Complex add(double re1, double im1, double re2, double im2)
	{
		return new Complex(re1 + re2, im1 + im2);
	}

	private static Complex subtract(double re1, double im1, double re2, double im2)
	{
		return add(re1, im1, -re2, -im2);
	}

	private static Complex multiply(double re1, double im1, double re2, double im2)
	{
		return new Complex(re1 * re2 - im1 * im2, re1 * im2 + im1 * re2);
	}

	private static Complex devide(double re1, double im1, double re2, double im2)
	{
		//TODO: Do your homework
		return multiply(re1, im1, re2, im2);
	}

	public Complex()
	{}

	public Complex(double re)
	{
		this(re, 0);
	}

	public Complex(double re, double im)
	{
		this.re = re;
		this.im = im;
	}

	public Complex getConjugate()
	{
		return new Complex(re, -im);
	}

	public double getNorm()
	{
		return Math.sqrt(re * re + im * im);
	}

	public void dec()
	{
		--re;
	}

	public void inc()
	{
		++re;
	}

	public Complex add(Complex z)
	{
		return add(re, im, z.re, z.im);
	}

	public Complex add(double a, double b)
	{
		return add(re, im, a, b);
	}

	public Complex add(double a)
	{
		return add(a, 0);
	}

	public Complex subtract(Complex z)
	{
		return subtract(re, im, z.re, z.im);
	}

	public Complex subtract(double a, double b)
	{
		return subtract(re, im, a, b);
	}

	public Complex subtract(double a)
	{
		return subtract(a, 0);
	}

	public Complex multiply(Complex z)
	{
		return multiply(re, im, z.re, z.im);
	}

	public Complex multiply(double a, double b)
	{
		return multiply(re, im, a, b);
	}

	public Complex multiply(double a)
	{
		return multiply(a, 0);
	}

	@Override
	public boolean equals(Object obj)
	{
		var other = (Complex)obj;

		return Double.valueOf(re).equals(other.re) && Double.valueOf(im).equals(other.im);
	}

	@Override
	public String toString()
	{
		return String.format("|%.2f + %.2fi| = %f", re, im, getNorm());
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;

import static java.lang.Math.sqrt;

public class Point {
	public int x, y;

	Point(Point p)
	{
		this(p.x, p.y);
	}

	public Point()
	{}

	public Point(int a)
	{
		this(a, 0);
	}

	public Point(int x, int y)
	{
		this.x = x;
		this.y = y;
	}

	public static double distance(int x1, int y1, int x2, int y2)
	{
		return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	}

	public double distance(Point p)
	{
		return distance(x, y, p.x, p.y);
	}

	public double distance(int a, int b)
	{
		return distance(x, y, a, b);
	}

	public void offset(int dxy)
	{
		offset(dxy, dxy); //Do not repeat yourself
	}

	public void offset(int dx, int dy)
	{
		x += dx;
		y += dy;
	}

	@Override
	public boolean equals(Object obj)
	{
		var other = (Point)obj;

		return x == other.x && y == other.y;
	}

	@Override
	public String toString()
	{
		return String.format("(%d, %d)", x, y);
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	PointF sınıfı
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.math.geometry;

import static java.lang.Math.*;

public class PointF {
	public float x, y;

	public PointF()
	{}

	public PointF(float a)
	{
		this(a, 0);
	}

	public PointF(float x, float y)
	{
		this.x = x;
		this.y = y;
	}

	public PointF(double radius, double theta) //theta in degrees
	{
		this((float)(radius * cos(toRadians(theta))), (float)(radius * sin(toRadians(theta))));
	}

	public static double distance(float x1, float y1, float x2, float y2)
	{
		return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	}

	public double distance(PointF p)
	{
		return distance(x, y, p.x, p.y);
	}

	public double distance(float a, float b)
	{
		return distance(x, y, a, b);
	}

	public void offset(float dxy)
	{
		offset(dxy, dxy); //Do not repeat yourself
	}

	public void offset(float dx, float dy)
	{
		x += dx;
		y += dy;
	}

	@Override
	public boolean equals(Object obj)
	{
		var other = (PointF)obj;

		return Float.valueOf(x).equals(other.x) && Float.valueOf(y).equals(other.y);
	}

	public String toString()
	{
		return String.format("(%f, %f)", x, y);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
    Stream API
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class App {
    public static void main(String[] args)
    {
        ArrayList<String> list = new ArrayList<>();

        list.add("ankara");
        list.add("istanbul");
        list.add("izmir");
        list.add("muş");
        list.add("bolu");

        int len = Console.readInt("Bir sayı giriniz:");

        List<String> lst = list
                .stream()
                .filter(s -> s.length() > len)
                .collect(Collectors.toList());

        lst.forEach(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte [1, n] arasındaki sayıların toplamı bulunmuştur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.stream.IntStream;

class App {
    public static void main(String[] args)
    {
        int n = Console.readInt("Bir sayı giriniz:");
        int sum = IntStream.rangeClosed(1, n).reduce(0, Integer::sum);

        System.out.println(sum);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte n tane [0, 99] aralığında rasgele sayı üretilmiş ve ekrana basılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String[] args)
    {
        int n = Console.readInt("Bir sayı giriniz:");
        Random r = new Random();

        IntStream.generate(() -> r.nextInt(100)).limit(n).forEach(val -> System.out.printf("%d ", val));

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte n tane rasgele sayı üretilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String[] args)
    {
        int n = Console.readInt("Bir sayı giriniz:");
        Random r = new Random();

        IntStream.generate(r::nextInt).limit(n).forEach(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün forEach metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

class App {
    public static void main(String [] args)
    {
        List<Integer> list = new ArrayList<>();
        Random r = new Random();

        for (int i = 0; i < 10; ++i)
            list.add(r.nextInt(100));

        list.stream().forEach(val -> System.out.printf("%d ", val));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Java 8 ile birlikte Iterable arayüzüne de forEach metodu eklenmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

class App {
    public static void main(String [] args)
    {
        List<Integer> list = new ArrayList<>();
        Random r = new Random();

        for (int i = 0; i < 10; ++i)
            list.add(r.nextInt(100));

        list.forEach(val -> System.out.printf("%d ", val));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün filter metodu ile koşula uyan değerlere ilişkin bir Stream referansı elde edilebilir.
    Aşağıdaki örnekte liste rasgele sayılarla doldurulmuş ve asal olanlar ekrana basılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String[] args)
    {
        List<Integer> list = new ArrayList<>();
        Random r = new Random();

        IntStream.generate(() -> r.nextInt(100)).limit(10).forEach(val -> list.add(val));

        list.forEach(val -> System.out.printf("%d ", val));
        System.out.println("\n***************");
        list.stream().filter(NumberUtil::isPrime).forEach(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün count metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        List<Integer> list = new ArrayList<>();
        Random r = new Random();

        IntStream.generate(() -> r.nextInt(100)).limit(10).forEach(list::add);

        list.forEach(val -> System.out.printf("%d ", val));
        System.out.println("\n***************");
        list.stream().filter(NumberUtil::isPrime).forEach(System.out::println);
        var count = list.stream().filter(NumberUtil::isPrime).count();

        System.out.printf("Count:%d%n", count);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte stokta bulunan tüm ürünler listelenmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", 1987, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 10, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        products.stream().filter(p -> p.getStock() > 0).forEach(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün allMatch metodu parametresi ile aldığı koşula tüm elemanlar
    uyuyorsa true döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", 1987, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 10, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        if (products.stream().allMatch(p -> p.getStock() > 0))
            System.out.println("Tüm ürünler stokta var");
        else {
            System.out.println("Stokta bulunmayan ürünler:");
            products.stream().filter(p -> p.getStock() <= 0).forEach(System.out::println);
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün anyMatch metodu parametresi ile aldığı koşula uyan en az bir eleman
    varsa true döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", -10, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 0, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        if (products.stream().anyMatch(p -> p.getStock() <= 0)) {
            System.out.println("Stokta bulunmayan ürünler");
            products.stream().filter(p -> p.getStock() <= 0).forEach(System.out::println);
        }
        else
            System.out.println("Tüm ürünler stokta var");
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün noneMatch metodu parametresi ile aldığı koşula hiçbir eleman
    uymuyor ise true döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", -10, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 0, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        if (products.stream().noneMatch(p -> p.getStock() <= 0))
            System.out.println("Tüm ürünler stokta var");
        else {
            System.out.println("Stokta bulunmayan ürünler");
            products.stream().filter(p -> p.getStock() <= 0).forEach(System.out::println);
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    IntStream sınıfı ile int türüne ilişkin bir dizi sarmalanabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4};

        IntStream.of(a).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının stream metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Arrays;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4};

        Arrays.stream(a).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün findFirst metodu ile ilk eleman elde edilebilir. Bu metot
    Optional döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", 10, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 10, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        Optional<Product> op = products.stream().filter(p -> p.getStock() <= 0).findFirst();

        if (op.isPresent()) {
            System.out.println("Stokta bulunmayan ilk ürün");
            System.out.println(op.get());
        }
        else
            System.out.println("Tüm ürünler stokta var");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün map metodu dönüştürmek amaçlı kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", 10, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 10, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        products
                .stream()
                .filter(p -> p.getStock() > 0)
                .map(p -> p.getName())
                .filter(name -> name.length() >= 6)
                .forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün map metodu dönüştürmek amaçlı kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", 10, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 10, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        products
                .stream()
                .filter(p -> p.getStock() > 0)
                .map(Product::getName)
                .filter(name -> name.length() >= 6)
                .forEach(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün mapToInt metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class App {
    public static void main(String [] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("1", "laptop", 345, BigDecimal.valueOf(1000), BigDecimal.valueOf(2999.99)));
        products.add(new Product("2", "mouse", 23, BigDecimal.valueOf(10), BigDecimal.valueOf(39.99)));
        products.add(new Product("3", "Klavye", 10, BigDecimal.valueOf(150), BigDecimal.valueOf(300.99)));
        products.add(new Product("4", "Mikrofon", 10, BigDecimal.valueOf(100), BigDecimal.valueOf(299.99)));

        products
                .stream()
                .filter(p -> p.getStock() > 0)
                .mapToInt(p -> p.getStock())
                .forEach(System.out::println);
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Stream arayüzünün of metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.stream.Stream;

class App {
    public static void main(String [] args)
    {
        int len = Console.readInt("Length?");
        String [] str =  {"ankara", "istanbul", "izmir", "muş", "bolu", "zonguldak", "antalya"};

        Stream.of(str).filter(city -> city.length() > len).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   IntStream arayüzünün reduce metodu ile stream içerisindeki elemanlara ilişkin bir işlem yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        var a = ArrayUtil.getRandomArray(10, 1, 100);

        IntStream.of(a).forEach(val -> System.out.printf("%d ", val));

        System.out.println();

        var op = IntStream.of(a).reduce((r, e) -> r + e);

        op.ifPresent(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   IntStream arayüzünün reduce metodu ile stream içerisindeki elemanlara ilişkin bir işlem yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        var a = ArrayUtil.getRandomArray(10, 1, 100);

        IntStream.of(a).forEach(val -> System.out.printf("%d ", val));

        System.out.println();

        var op = IntStream.of(a).reduce(Integer::sum);

        op.ifPresent(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   reduce metotlarının ilk değer (identity) alan versiyonları ilk değerden itibaren stream elemanlarına aldığı
   metodu uygular. Bu durumda Oprional türü dönmesi gerekmez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        var a = ArrayUtil.getRandomArray(10, 1, 100);

        IntStream.of(a).forEach(val -> System.out.printf("%d ", val));

        System.out.println();

        var result = IntStream.of(a).filter(val -> val < 0).reduce(100, Integer::sum);

        System.out.println(result);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    map ve reduce metodunun bir kullanımı: Aşağıdaki örnekte stokta bulunan ürünlerin hepsi satıldığında
    kar zarar durumu elde edilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("LPT 1000", "Laptop1", 100, new BigDecimal(1000.45), new BigDecimal(1500)));
        products.add(new Product("LPT 1001", "Laptop2", 300, new BigDecimal(1200.67), new BigDecimal(1700)));
        products.add(new Product("MOU 1004", "Mouse", 3000, new BigDecimal(10.67), new BigDecimal(60)));

        var result = products.stream()
                .filter(p -> p.getStock() > 0)
                .map(p -> p.getPrice().subtract(p.getCost()).multiply(new BigDecimal(p.getStock())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        System.out.printf("%.2f%n", result.doubleValue());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    map ve reduce metodunun bir kullanımı. Yukarıdaki örnek hem okunabilir hem de daha efektiftir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("LPT 1000", "Laptop1", -100, new BigDecimal(1000.45), new BigDecimal(1500)));
        products.add(new Product("LPT 1001", "Laptop2", 300, new BigDecimal(1200.67), new BigDecimal(1700)));
        products.add(new Product("MOU 1004", "Mouse", 3000, new BigDecimal(10.67), new BigDecimal(60)));

        BigDecimal result = products.stream()
                .map(p-> {
                    if (p.getStock() > 0)
                        return p.getPrice().subtract(p.getCost()).multiply(new BigDecimal(p.getStock()));

                    return BigDecimal.ZERO;
                }).reduce(BigDecimal.ZERO, BigDecimal::add);

        System.out.printf("%.2f%n", result.doubleValue());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte stokta bulunmayan ürünlerin toplam adetleri elde edilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("LPT 1000", "Laptop1", 100, new BigDecimal(1000.45), new BigDecimal(1500)));
        products.add(new Product("LPT 1001", "Laptop2", 300, new BigDecimal(1200.67), new BigDecimal(1700)));
        products.add(new Product("MOU 1004", "Mouse", -10, new BigDecimal(10.67), new BigDecimal(60)));

        System.out.print("Stokta bulunan ürünlerin toplam adedi:");
        products.stream()
                .filter(p -> p.getStock() > 0)
                .mapToInt(Product::getStock)
                .reduce(Integer::sum)
                .ifPresent(System.out::println);

        System.out.print("Stokta bulunmayan ürünlerin toplam adedi:");
        products.stream()
                .filter(p -> p.getStock() <= 0)
                .mapToInt(Product::getStock)
                .reduce(Integer::sum)
                .ifPresent(System.out::println);
    }
}



/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte İngilizce alfabenin tüm karakterleri ekrana basılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        IntStream
                .range(0, 26) /* [0, 26) */
                .forEach(val -> System.out.printf("%c", (char)(val + 'A')));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte factorial metodu IntStream kullanılarak yapılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        IntStream.range(0, 11).forEach(i -> System.out.printf("%d!=%d%n", i, Util.factorial(i)));
    }
}

class Util {
    public static int factorial(int n)
    {
        if (n < 0)
            return -1;

        if (n <= 1)
            return 1;

        return IntStream.rangeClosed(2, n).reduce((a, b) -> a * b).getAsInt();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte int türden dizi Integer stream yapılmıştır. Bu örnek temel türden bir diziden
   sarmalayan sınıf türünden Stream elde etmekte kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;
import java.util.stream.Stream;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4};

        Stream<Integer> stream = IntStream.range(0, a.length).mapToObj(i -> a[i]);

        stream.forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   mapToObj metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;
import java.util.stream.Stream;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4};

        Stream<Long> stream = IntStream.range(0, a.length).mapToObj(i -> a[i] * (long)a[i]);

        stream.forEach(System.out::println);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
   mapToObj metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;
import java.util.stream.Stream;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4};

        Stream<String> stream = IntStream.range(0, a.length).mapToObj(i -> a[i] + ".-madde:");

        stream.forEach(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   Stream arayüzüne ilişkin türler stream kullanıldıktan sonra kapatılır. Aşağıdaki örnekte stream kapatıldığı
   için ikinci defa stream elde edilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

class App {
    public static void main(String [] args)
    {
        Iterable<Integer> numbers = Sample.getNumbers(10, 20);

        Stream<Integer> stream = StreamSupport.stream(numbers.spliterator(), false);

        stream.forEach(System.out::println);

        System.out.println("Çift sayılar:");
        StreamSupport.stream(numbers.spliterator(), false).filter(val -> val % 2 == 0).forEach(System.out::println);
    }
}

class Sample {
    public static Iterable<Integer> getNumbers(int min, int max)
    {
        Random r = new Random();

        List<Integer> list = new ArrayList<>() {};

        IntStream.generate(() -> r.nextInt(max - min) + min).limit(10).forEach(list::add);

        return list;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
   generate metodu ile belirlenen bir duruma göre değerler elde edilebilir. Bu değerlerden istenilen sayıda alınması
   için limit metodu çağrılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        IntStream.generate(() -> r.nextInt(100)).limit(10).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   generate metodu ile belirlenen bir duruma göre değerler elde edilebilir. Bu değerlerden
   istenilen sayıda alınması için limit metodu çağrılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        IntStream.generate(() -> r.nextInt(100)).filter(val -> val % 2 == 0).limit(10).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnkte 10 tane rasgele üretilmiş çift sayı ekrana basılmaktadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        IntStream.generate(() -> r.nextInt(100)).filter(val -> val % 2 == 0).limit(10).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnkte 10 tane rasgele üretilmiş asal sayı ekrana basılmaktadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        IntStream.generate(() -> r.nextInt(100)).filter(NumberUtil::isPrime).limit(10).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte belli aralıktaki Armstrong sayıları bulunmuştur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Random;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        IntStream.rangeClosed(0, 999999).filter(NumberUtil::isArmstrong).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Aşağıdaki örnekte int türden dizinin en büyük üç elemanı elde edilmektedir. sorted metodu dizinin sıralanmış
   biçimini stream olarak verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        int [] grades = ArrayUtil.getRandomArray(30, 0, 101);

        System.out.println("Before:");

        Arrays.stream(grades).forEach(val -> System.out.printf("%d ", val));
        System.out.println();
        System.out.println("En yüksek 3 not:");
        IntStream.of(grades).sorted().skip(grades.length - 3).forEach(grade -> System.out.printf("%d ", grade));
        System.out.println();
        System.out.println("After:");
        Arrays.stream(grades).forEach(val -> System.out.printf("%d ", val));
        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Stream den List elde edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;

import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        int [] grades = ArrayUtil.getRandomArray(30, 0, 101);

        Arrays.stream(grades).forEach(val -> System.out.printf("%d ", val));
        System.out.println();

        var list = IntStream.of(grades)
                .filter(NumberUtil::isPrime)
                .mapToObj(val -> val)
                .collect(Collectors.toList());

        System.out.println(list.getClass().getName());

        list.forEach(val -> System.out.printf("%d ", val));

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    reduce metodu ilk değeri verilen bir işlem için verilen metodu
    her elemana uygular. Kümülatif bir biriktirme sağlar
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class App {

    public static void main(String[] args)
    {
        var list = IntStream.rangeClosed(1, 10).mapToObj(val -> val).collect(Collectors.toList());

        int val = list.stream().reduce(0, Operation::add);

        System.out.println(val);
    }
}

class Operation {
    public static int add(int a, int b)
    {
        return a + b;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   IntStream, DoubleStream ve LongStream interface'lerin boxed isimli metotları sırasıyla Stream<Integer>, Stream<Doubkle>
   ve Stream<Long> referanslarını döndürür. Böylelikle temel türlere ilişkin stream'den kutulanmış Stream elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;

import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        int [] grades = ArrayUtil.getRandomArray(30, 0, 101);

        Arrays.stream(grades).forEach(val -> System.out.printf("%d ", val));
        System.out.println();

        var list = IntStream.of(grades)
                .filter(NumberUtil::isPrime)
                .boxed() //.mapToObj(val -> val)
                .collect(Collectors.toList());

        list.forEach(val -> System.out.printf("%d ", val));

        System.out.println();
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Stream den liste edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        var list = IntStream.generate(() -> r.nextInt(100)).limit(10).boxed().collect(Collectors.toList());

        list.forEach(val -> System.out.printf("%d ", val));

        System.out.println();

        int val = list.stream().reduce(0, Integer::sum);

        System.out.println(val);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Stream den liste edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class App {
    public static void main(String[] args)
    {
        Random r = new Random();
        Set<Integer> set = IntStream.generate(() -> r.nextInt(100)).limit(10).boxed().collect(Collectors.toSet());

        System.out.println(set.getClass().getName());

        set.forEach(val -> System.out.printf("%d ", val));
        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Basit bir isPrime metodu ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        IntStream.rangeClosed(1, 100).filter(Util::isPrime).forEach(System.out::println);
    }
}

class Util {
    public static boolean isPrime(int val)
    {
        if (val <= 1)
            return false;

        return IntStream.rangeClosed(2, val / 2).noneMatch(i -> val % i == 0);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Basit bir isPrime metodu ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        IntStream.range(1, 100).filter(Util::isPrime).forEach(System.out::println);
    }
}

class Util {
    public static boolean isPrime(int val)
    {
        if (val <= 1)
            return false;

        return IntStream.rangeClosed(2, val / 2).allMatch(i -> val % i != 0);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Basit bir isPrime metodu ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;

class App {
    public static void main(String [] args)
    {
        IntStream.rangeClosed(1, 100).filter(Util::isPrime).forEach(System.out::println);
    }
}

class Util {
    public static boolean isPrime(int val)
    {
        if (val <= 1)
            return false;

        return !IntStream.rangeClosed(2, val / 2).anyMatch(i -> val % i == 0);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir stream in sıralı olarak elde etmek iççin sorted metotları kullanılabilir. Parametresiz sorted metodu Comparable
    türler için çalışır. Aksi durumda exception oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String[] args)
    {
        var cities = new ArrayList<CityInfo>();

        cities.add(new CityInfo(67, "zonguldak"));
        cities.add(new CityInfo(34, "istanbul"));
        cities.add(new CityInfo(35, "izmir"));
        cities.add(new CityInfo(6, "ankara"));

        cities.stream().sorted().forEach(System.out::println);
    }
}

class CityInfo implements Comparable<CityInfo> {
    private int m_plate;
    private String m_name;

    public CityInfo(int plate, String name)
    {
        m_plate = plate;
        m_name = name;
    }

    public int getPlate()
    {
        return m_plate;
    }

    public void setPlate(int m_plate)
    {
        this.m_plate = m_plate;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String m_name)
    {
        this.m_name = m_name;
    }

    @Override
    public int compareTo(CityInfo other)
    {
        return m_plate - other.m_plate;
    }

    @Override
    public String toString()
    {
        return String.format("%d:%s", m_plate, m_name);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir stream in sıralı olarak elde etmek için sorted metotları kullanılabilir. Aşağıdaki örnekte Comparator
    parametreli sorted metodu karşılaştırma kriterini almaktadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

public class App {
    public static void main(String[] args)
    {
        var cities = new ArrayList<CityInfo>();

        cities.add(new CityInfo(67, "zonguldak"));
        cities.add(new CityInfo(34, "istanbul"));
        cities.add(new CityInfo(35, "izmir"));
        cities.add(new CityInfo(6, "ankara"));
        cities.stream().sorted((c1, c2) -> c2.getPlate() - c1.getPlate()).forEach(System.out::println);
    }
}

class CityInfo {
    private int m_plate;
    private String m_name;

    public CityInfo(int plate, String name)
    {
        m_plate = plate;
        m_name = name;
    }

    public int getPlate()
    {
        return m_plate;
    }

    public void setPlate(int m_plate)
    {
        this.m_plate = m_plate;
    }
    public String getName()
    {
        return m_name;
    }

    public void setName(String m_name)
    {
        this.m_name = m_name;
    }

    @Override
    public String toString()
    {
        return String.format("%d:%s", m_plate, m_name);
    }

}

/*----------------------------------------------------------------------------------------------------------------------
    int türden bir diziden büyükten küçüğe sıralanmış bir Stream elde edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Comparator;
import java.util.stream.IntStream;

public class App {
    public static void main(String[] args)
    {
        int [] a = {-2, 3, -7, 9, 5};

        IntStream.of(a).boxed().sorted(Comparator.reverseOrder()).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    int türden bir diziden büyükten küçüğe sıralanmış bir Stream elde edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Comparator;
import java.util.stream.IntStream;

public class App {
    public static void main(String[] args)
    {
        int [] a = {-2, 3, -7, 9, 5};
        int [] sortedArray = IntStream.of(a).boxed().sorted(Comparator.reverseOrder()).mapToInt(val -> val).toArray();

        IntStream.of(a).forEach(val -> System.out.printf("%d ", val));
        System.out.println();
        IntStream.of(sortedArray).forEach(val -> System.out.printf("%d ", val));

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    distinct metodu ile elde edilen stream içerisinde tekrarlı eleman kalmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args)
    {
        List<Integer> list = new ArrayList<>();

        list.add(10);
        list.add(20);
        list.add(10);
        list.add(10);
        list.add(20);
        list.add(30);
        list.stream().distinct().forEach(System.out::println);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    distinct metodu ile elde edilen stream içerisinde tekrarlı eleman kalmaz.
    Dikkat: Dökümanlarda belirtilmese de distinct metodu eşitlik kontrolü için hashCode metoduna da bakar.

    distinct metodu tekrarlı elemanlar için ilk bulduğunu verir (stable)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args)
    {
        List<CityInfo> cities = new ArrayList<>();

        cities.add(new CityInfo(67, "zonguldak"));
        cities.add(new CityInfo(34, "istanbul"));
        cities.add(new CityInfo(34, "konya"));
        cities.add(new CityInfo(35, "izmir"));
        cities.add(new CityInfo(6, "ankara"));
        cities.add(new CityInfo(35, "bolu"));

        cities.forEach(System.out::println);

        System.out.println("***********");

        cities.stream().distinct().forEach(System.out::println);
    }
}

class CityInfo {
    private int m_plate;
    private String m_name;

    public CityInfo(int plate, String name)
    {
        m_plate = plate;
        m_name = name;
    }

    public int getPlate()
    {
        return m_plate;
    }

    public void setPlate(int plate)
    {
        m_plate = plate;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    @Override
    public int hashCode()
    {
        return m_plate;
    }

    public boolean equals(Object o)
    {
        CityInfo ci = (CityInfo)o;

        return ci.m_plate == this.m_plate;
    }

    @Override
    public String toString()
    {
        return String.format("%d:%s", m_plate, m_name);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Ürünlerin satış fiyatına azalan sırada ilk iki ürün
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.Product;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args)
    {
        List<Product> products = new ArrayList<>();

        products.add(new Product("LPT 1000", "Laptop1", 100, new BigDecimal(1000.45), new BigDecimal(1500)));
        products.add(new Product("LPT 1001", "Laptop2", 300, new BigDecimal(1200.67), new BigDecimal(1700)));
        products.add(new Product("MOU 1004", "Mouse", 3000, new BigDecimal(10.67), new BigDecimal(60)));

        products.stream()
                .sorted((p1, p2) -> p2.getPrice().compareTo(p1.getPrice()))
                .limit(2)
                .forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   skip metodu ve limit metodunun kullanımı. Aşağıdaki örnekte 10. sayı ile 20. sayılar arasındaki tüm sayılar
   elde edilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class App {
    public static void main(String[] args)
    {
        List<Integer> list;

        list = IntStream.rangeClosed(1, 30).boxed().collect(Collectors.toList());

        list.stream().limit(20).skip(9).forEach(val -> System.out.printf("%d ", val));

        System.out.println();
    }
}



/*----------------------------------------------------------------------------------------------------------------------
   generate metodu bir dizilim elde etmekte kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.stream.Stream;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Fethi", "Naşit", "Kubilay", "Ahmet", "Arek", "Erhan", "Ozan", "Deniz", "Umut"};

        Random r = new Random();

        Stream.generate(() -> names[r.nextInt(names.length)]).limit(10).forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   generate metodu bir dizilim elde etmekte kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.stream.Stream;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Fethi", "Naşit", "Kubilay", "Ahmet", "Arek", "Erhan", "Ozan", "Deniz", "Umut"};

        Random r = new Random();

        Stream.generate(() -> names[r.nextInt(names.length)]).limit(10).distinct().forEach(System.out::println);
    }
}

XXXXXXXXXXXXXXXXXXXXXX

/*----------------------------------------------------------------------------------------------------------------------
   iterate metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Stream;

public class App {
    public static void main(String[] args)
    {
        Stream.iterate(10, val -> 2 * val + 1).limit(10).forEach(System.out::println);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
   Aşağıda basit asallık testi yapan metotlar yazılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.IntStream;
import java.util.stream.Stream;

public class App {
    public static void main(String[] args)
    {
        IntStream
                .iterate(-10, val -> val + 1)
                .limit(109)
                .filter(Util::isPrime1).
                forEach(val -> System.out.printf("%d ", val));

        System.out.println();

        IntStream
                .iterate(-10, val -> val + 1)
                .limit(109)
                .filter(Util::isPrime2).
                forEach(val -> System.out.printf("%d ", val));

        System.out.println();
    }
}

class Util {
    public static boolean isPrime1(int val) //Dikkat bu şekilde yazılmamalı sadece örnek
    {
        return val <= 1 ? false : Stream.iterate(2, a -> a + 1).limit(val - 2).noneMatch(a -> val % a == 0);
    }

    public static boolean isPrime2(int val)
    {
        return val <= 1 ? false : IntStream.rangeClosed(2, val / 2).noneMatch(a -> val % a == 0);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Stream sınıfının concat metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class App {
    public static void main(String[] args)
    {
        String [] cities = {"istanbul", "ankara", "izmir"};
        List<String> citiesList = new ArrayList<>();

        citiesList.add("zonguldak");
        citiesList.add("sinop");

        Stream.concat(citiesList.stream(), Stream.of(cities)).forEach(System.out::println);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    collect metodu Collector arayüzünün 3. generic parametresindeki türden bir
    referans döndürür. Collectors sınıfının metotlarının bir çoğu
    Collector referansı döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class App {
    public static void main(String[] args)
    {
        String [] cities = {"istanbul", "ankara", "izmir"};

        List<Integer> list = Stream.of(cities).map(s -> s.length()).collect(Collectors.toList());

        list.forEach(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Collectors sınıfının metotları import static direktifi ile
    kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.List;
import java.util.stream.Stream;
import static java.util.stream.Collectors.*;

public class App {
    public static void main(String[] args)
    {
        String [] cities = {"istanbul", "ankara", "izmir"};

        List<Integer> list = Stream.of(cities).map(s -> s.length()).collect(toList());

        list.forEach(System.out::println);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Collectors sınıfının counting metodu ile stream in eleman sayısı bulunabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Stream;

import static java.util.stream.Collectors.counting;

public class App {
    public static void main(String[] args)
    {
        String [] cities = {"istanbul", "ankara", "izmir", "zonguldak", "bolu"};

        long count = Stream.of(cities).filter(s -> s.length() > 5).collect(counting());

        System.out.println(count);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Collectors sınıfının summingInt metodu ile toplam bulunabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Stream;

import static java.util.stream.Collectors.summingInt;
import static java.util.stream.Collectors.toList;

public class App {
    public static void main(String[] args)
    {
        var list = Stream.iterate(1, val -> val + 1).limit(100).collect(toList());

        int sum = list.stream().collect(summingInt(val -> val));

        System.out.println(sum);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Collectors sınıfının averagingInt metodu ile ortalama bulunabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.List;
import java.util.stream.Stream;

import static java.util.stream.Collectors.averagingInt;
import static java.util.stream.Collectors.toList;

public class App {
    public static void main(String[] args)
    {
        List<Integer> list = Stream.iterate(1, val -> val + 1).limit(100).collect(toList());

        double avg = list.stream().collect(averagingInt(val -> val));

        System.out.println(avg);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    partitioningBy metodu ile belirli bir koşula uyanlar ve uymayanlar
    bir Map içerisinde toplanabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

import java.util.Map;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Stream;
import static java.util.stream.Collectors.*;

public class App {
    public static void main(String[] args)
    {
        Person [] people = {
                new Person("Ali", 10, 6, 2000),
                new Person("Veli", 11, 7, 1997),
                new Person("Selami", 10, 6, 1978),
                new Person("Secati", 10, 8, 2005)};

        Map<Boolean, List<Person>> map = Stream.of(people).collect(partitioningBy(p -> p.getAge() >= 18));

        System.out.println("Young people:");
        List<Person> young = map.get(false);

        young.forEach(System.out::println);

        System.out.println("*******************");

        System.out.println("Adult people:");
        List<Person> adult = map.get(true);

        adult.forEach(System.out::println);
    }
}

class Person {
    private String m_name;
    private LocalDate m_birthDate;

    public Person(String name, int day, int mon, int year)
    {
        m_name = name;
        m_birthDate = LocalDate.of(year, mon, day);
    }
    //...

    public double getAge()
    {
        return ChronoUnit.DAYS.between(m_birthDate, LocalDate.now()) / 365.;
    }

    public String toString()
    {
        return String.format("%s:%.02f", m_name, this.getAge());
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    groupingBy metodu belirli bir türe göre gruplamak amaçlı kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.time.LocalDate;

import java.util.Map;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Stream;
import static java.util.stream.Collectors.*;

public class App {
    public static void main(String[] args)
    {
        Person [] people = {
                new Person("Ali", 10, 6, 1978, MaritalStatus.DIVORCED),
                new Person("Veli", 11, 7, 1997, MaritalStatus.MARRIED),
                new Person("Selami", 10, 6, 1978, MaritalStatus.SINGLE),
                new Person("Secati", 10, 8, 1976, MaritalStatus.DIVORCED)};

        Map<MaritalStatus, List<Person>> map = Stream.of(people).collect(groupingBy(Person::getMaritalStatus));

        System.out.println("Divorced people:");
        map.get(MaritalStatus.DIVORCED).forEach(System.out::println);

        System.out.println("Single people:");
        map.get(MaritalStatus.SINGLE).forEach(System.out::println);

        System.out.println("Married people:");
        map.get(MaritalStatus.MARRIED).forEach(System.out::println);
    }
}

enum MaritalStatus {SINGLE, MARRIED, DIVORCED};

class Person {
    private String m_name;
    private LocalDate m_birthDate;
    private MaritalStatus m_maritalStatus;

    public Person(String name, int day, int mon, int year, MaritalStatus maritalStatus)
    {
        //...
        m_name = name;
        m_birthDate = LocalDate.of(year, mon, day);
        m_maritalStatus = maritalStatus;
    }
    //...

    public MaritalStatus getMaritalStatus()
    {
        return m_maritalStatus;
    }

    public double getAge()
    {
        return ChronoUnit.DAYS.between(m_birthDate, LocalDate.now()) / 365.;
    }

    public String toString()
    {
        return String.format("%s:%.02f:%s", m_name, this.getAge(), m_maritalStatus);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    joining metodu ile string birleştirmesi yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Stream;

import static java.util.stream.Collectors.joining;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Ali", "Veli", "Selami"};

        String str = Stream.of(names).collect(joining());

        System.out.println(str);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    joining metodu ile string birleştirmesi yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Stream;

import static java.util.stream.Collectors.joining;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Ali", "Veli", "Selami"};

        String str = Stream.of(names).collect(joining("-"));

        System.out.println(str);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    joining metodu ile string birleştirmesi yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Stream;

import static java.util.stream.Collectors.joining;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Ali", "Veli", "Selami"};

        StringBuilder sb = new StringBuilder();

        sb.append("-").append(",");

        String str = Stream.of(names).collect(joining(sb));

        System.out.println(str);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    maxBy ve minBy metotları ilgili stream in verilen comparator
    arayüzünü implemente etmiş nesneye göre en büyük ve en küçük
    değerlerini verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.stream.Collectors.minBy;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Ali", "Veli", "Selami"};

        Optional<String> result = Stream.of(names).collect(minBy((s1, s2) -> s1.compareTo(s2)));

        if (result.isPresent()) {
            System.out.println(result.get());
        }
        else
            System.out.println("Maximum bulunamıyor");

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    maxBy ve minBy metotları ilgili stream in verilen comparator
    arayüzünü implemente etmiş nesneye göre en büyük ve en küçük
    değerlerini verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.stream.Collectors.minBy;

public class App {
    public static void main(String[] args)
    {
        String [] names = {}; //{"Ali", "Veli", "Selami"};

        Optional<String> result = Stream.of(names).collect(minBy((s1, s2) -> s1.compareTo(s2)));

        result.ifPresent(s -> System.out.println(s));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    maxBy ve minBy metotları ilgili stream in verilen comparator
    arayüzünü implemente etmiş nesneye göre en büyük ve en küçük
    değerlerini verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.stream.Collectors.minBy;

public class App {
    public static void main(String[] args)
    {
        String [] names = {}; //{"Ali", "Veli", "Selami"};

        Optional<String> result = Stream.of(names).collect(minBy((s1, s2) -> s1.compareTo(s2)));

        result.ifPresentOrElse(s -> System.out.println(s), () -> System.out.println("Bulunamıyor"));
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    maxBy ve minBy metotları ilgili stream in verilen comparator
    arayüzünü implemente etmiş nesneye göre en büyük ve en küçük
    değerlerini verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.stream.Collectors.maxBy;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Ali", "Veli", "Selami"};

        Optional<String> result = Stream.of(names).collect(maxBy((s1, s2) -> s1.compareTo(s2)));

        if (result.isPresent()) {
            System.out.println(result.get());
        }
        else
            System.out.println("Maximum bulunamıyor");

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    reducing metodu ile bir stream içerisinde bir işlem yaptırılarak
    sonuç elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.stream.Stream;

import static java.util.stream.Collectors.reducing;

public class App {
    public static void main(String[] args)
    {
        String [] names = {"Ali", "Veli", "Selami", "Abdurrahman", "Secati", "Satılmış"};

        String result = Stream.of(names).collect(reducing("", (s1, s2)-> s1 + s2));

        System.out.println(result);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    CSDDoublyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDDoublyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDDoublyLinkedList<>();

        for (int i = 0; i < 10; ++i)
            list.addItemHead(i * 10);

        for (var val : list)
            System.out.printf("%d ", val);

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    CSDDoublyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDDoublyLinkedList;

import java.util.Iterator;

class App {
    public static void main(String [] args)
    {
        var list = new CSDDoublyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemHead(i * 10);

        Iterator<Integer> iter = list.reverseIterator();

        while (iter.hasNext())
            System.out.printf("%d ", iter.next());

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    CSDDoublyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDDoublyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDDoublyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemTail(i);

        int index = list.indexOf(5);

        System.out.printf("index=%d%n", index);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDDoublyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDDoublyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDDoublyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemTail(i);

        list.walkReverse(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDDoublyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDDoublyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDDoublyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemTail(i);

        list.walk(System.out::println);
    }
}


package org.csystem.util.collection;

import java.util.Iterator;
import java.util.function.Consumer;

public class CSDDoublyLinkedList<T> implements Iterable<T> {
    private int m_size;
    private Node m_head, m_tail;

    private class Node{
        T Item;
        Node Next, Prev;

        public Node(T item)
        {
            Item = item;
        }
    }

    private class ListIterator implements Iterator<T> {
        private Node m_curNode;

        public boolean hasNext()
        {
            m_curNode = m_curNode == null ? m_head : m_curNode.Next;

            return m_curNode != null;
        }
        public T next()
        {
            return m_curNode.Item;
        }
    }

    private class ListReverseIterator implements Iterator<T> {
        private Node m_curNode;

        public boolean hasNext()
        {
            m_curNode = m_curNode == null ? m_tail : m_curNode.Prev;

            return m_curNode != null;
        }

        public T next()
        {
            return m_curNode.Item;
        }
    }

    public void addItemHead(T item)
    {
        Node node = new Node(item);

        if (m_head != null) {
            m_head.Prev = node;
            node.Next = m_head;
            m_head = node;
        }
        else
            m_head = m_tail = node;

        ++m_size;
    }

    public void addItemTail(T item)
    {
        Node node = new Node(item);

        if (m_head != null) {
            m_tail.Next = node;
            node.Prev = m_tail;
            m_tail = node;
        }
        else
            m_head = m_tail = node;

        ++m_size;
    }

    public void clear()
    {
        if (m_head == null)
            return;

        for (var node = m_head.Next; node != null; node = node.Next)
            node.Prev = null;

        m_head = m_tail = null;

        m_size = 0;
    }

    public void deleteItem(int pos)
    {
        if (pos >= m_size || pos < 0 || m_head == null)
            return;

        if (pos == 0)
            deleteItemHead();
        else if(pos == m_size - 1)
            deleteItemTail();
        else {
            Node curNode = m_head;

            for(int i = 0; i < pos; i++, curNode = curNode.Next)
                ;

            curNode.Prev.Next = curNode.Next;
            curNode.Next.Prev = curNode.Prev;

            --m_size;
        }
    }

    public void deleteItemHead()
    {
        if (m_head == null)
            return;

        if (m_head == m_tail) // size==1
            m_head = m_tail = null;
        else {
            m_head = m_head.Next;
            m_head.Prev = null;
        }

        m_size--;
    }

    public void deleteItemTail()
    {
        if (m_head == null)
            return;

        if (m_head == m_tail) // size==1
            m_head = m_tail = null;
        else {
            m_tail = m_tail.Prev;
            m_tail.Next = null;
        }
        m_size--;
    }

    public boolean empty() {return m_head == null;}

    public T get(int pos)
    {
        if (m_head == null || pos < 0 || pos >= m_size)
            throw new IndexOutOfBoundsException("invalid pos");

        Node curNode = m_head;

        for(int i = 1; i <= pos; i++, curNode = curNode.Next)
            ;

        return curNode.Item;
    }

    public T getItemHead()
    {
        if (empty())
            return null;

        return m_head.Item;
    }

    public T getItemTail()
    {
        if (empty())
            return null;

        return m_tail.Item;
    }

    public int indexOf(T item)
    {
        if (m_head == null)
            return -1;

        Node curNode = m_head;

        if (item != null) {
            for(int i = 0; i < m_size; curNode = curNode.Next, i++)
                if (item.equals(curNode.Item))
                    return i;
        }
        else
            for(int i = 0; i < m_size; curNode = curNode.Next, i++)
                if (curNode.Item == null)
                    return i;

        return -1;
    }

    public void insertItem(int pos, T item)
    {
        if (pos > m_size || pos < 0)
            throw new IndexOutOfBoundsException("Invalid position");

        if (m_head != null){
            if (pos == 0)
                addItemHead(item);
            else if(pos == m_size)
                addItemTail(item);
            else {
                Node curNode = m_head;

                for(int i = 1; i <= pos - 1; i++, curNode = curNode.Next)
                    ;

                var node = new Node(item);

                node.Next = curNode.Next;
                node.Prev = curNode;
                curNode.Next = node;
                node.Next.Prev = node;
                m_size++;
            }
        }
        else
            addItemTail(item);

    }

    public Iterator<T> iterator()
    {
        return new ListIterator();
    }

    public Iterator<T> reverseIterator()
    {
        return new ListReverseIterator();
    }

    public int lastIndexOf(T item)
    {
        if(m_head == null)
            return -1;

        Node curNode = m_tail;

        int i = m_size - 1;

        for(; i >= 0; curNode = curNode.Prev, i--) {
            if (item == null && curNode.Item == null)
                return i;

            if(curNode.Item != null && curNode.Item.equals(item))
                return i;
        }

        return -1;
    }

    public int size() {return m_size;}

    public void walkReverse(Consumer<T> con)
    {
        for (Node node = m_tail; node != null; node = node.Prev)
            con.accept(node.Item);
    }

    public void walk(Consumer<T> con)
    {
        for (var node = m_head; node != null; node = node.Next)
            con.accept(node.Item);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    CSDSinglyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDSinglyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDSinglyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemTail(i);

        list.walk(System.out::println);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDSinglyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDSinglyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDSinglyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemTail(i);

        list.walk(val -> System.out.printf("%d ", val * val));

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    CSDSinglyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDSinglyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDSinglyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemTail(i);

        System.out.println(list.getReverse(3));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CSDSinglyLinkedList sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.collection.CSDSinglyLinkedList;

class App {
    public static void main(String [] args)
    {
        var list = new CSDSinglyLinkedList<Integer>();

        for (int i = 0; i < 10; ++i)
            list.addItemTail(i);

        System.out.println(list.getReverse(3));
    }
}

package org.csystem.util.collection;

import java.util.Iterator;
import java.util.Optional;
import java.util.function.Consumer;

public class CSDSinglyLinkedList<T> implements Iterable<T> {
    private int m_size;
    private Node m_head, m_tail;

    private class Node {
        T Item;
        Node Next;

        public Node(T item)
        {
            Item = item;
        }
    }

    private class ListIterator  implements Iterator<T> {
        private Node m_curNode;

        public boolean hasNext()
        {
            m_curNode = m_curNode == null ? m_head : m_curNode.Next;

            return m_curNode != null;
        }

        public T next()
        {
            return m_curNode.Item;
        }
    }

    public void addItemHead(T item)
    {
        Node node = new Node(item);

        if (m_head == null) //is linked list empty?
            m_head = m_tail = node;
        else {
            node.Next = m_head;
            m_head = node;
        }
        ++m_size;
    }

    public void addItemTail(T item)
    {
        Node node = new Node(item);

        if (m_head == null)
            m_head = m_tail = node;
        else {
            m_tail.Next = node;
            m_tail = node;
        }
        ++m_size;
    }

    public void clear()
    {
        m_head = m_tail = null;
        m_size = 0;
    }

    public void deleteItem(int pos)
    {
        if (pos < 0 || pos >= m_size)
            return;

        if (m_head == null)
            return;

        if (pos == 0)
            deleteItemHead();
        else if (pos == m_size - 1)
            deleteItemTail();
        else {
            Node node = m_head;

            for (int i = 0; i < pos - 1; node = node.Next, ++i)
                ;

            node.Next = node.Next.Next;
            --m_size;
        }
    }

    public void deleteItemHead()
    {
        if (m_head == null)
            return;

        if (m_size == 1)
            m_tail = null;

        m_head = m_head.Next;
        --m_size;
    }

    public void deleteItemTail()
    {
        if (m_head == null)
            return;

        if (m_size != 1) {
            Node node = m_head;

            for (; node.Next.Next != null; node = node.Next)
                ;

            node.Next = null;
            m_tail = node;
        }
        else
            m_head = m_tail = null;

        --m_size;
    }

    public boolean empty() {return m_head == null;}

    public boolean insertItem(int pos, T item)
    {
        if (pos < 0 || pos > m_size)
            return false;

        if (m_head != null) {
            if (pos != 0) {
                Node curNode = m_head;

                for (int i = 1; i <= pos - 1; ++i) //pos dan bir önceki düğüm
                    curNode = curNode.Next;

                Node node = new Node(item);

                node.Next = curNode.Next;
                curNode.Next = node;
                ++m_size;
            }
            else
                addItemHead(item);
        }
        else
            addItemTail(item);

        return true;
    }

    public int indexOf(T item)
    {
        int index = 0;

        if (item != null) {
            for (var node = m_head; node != null; node = node.Next, ++index)
                if (item.equals(node.Item))
                    return index;
        }
        else
            for (Node node = m_head; node != null; node = node.Next, ++index)
                if (node.Item == null)
                    return index;

        return -1;
    }

    public Iterator<T> iterator()
    {
        return new ListIterator();
    }

    public int size() {return m_size;}

    public Optional<T> get(int pos)
    {
        if (m_head == null || pos < 0 || pos >= m_size)
            return Optional.empty();

        int i = 0;

        Node node = m_head;

        for (; i < pos; node = node.Next, ++i)
            ;

        return Optional.of(node.Item);
    }

    public T getItemHead()
    {
        if (empty())
            return null;

        return m_head.Item;
    }
    public T getItemTail()
    {
        if (empty())
            return null;

        return m_tail.Item;
    }

    public Optional<T> getReverse(int n) //Sondan n-inci elemanı bulacak
    {
        return get(m_size - n);

		/*
		//m_size tutulmamışsa (mulakat sorusu)
		Node curNode = m_head;

		for (var node = m_head; node != null; node = node.Next) {
			n--;

			if (n < 0)
				curNode = curNode.Next;
		}

		return n >= 0 ? Optional.empty() : Optional.of(curNode.Item);
		*/
    }

    public void walk(Consumer<T> con)
    {
        for (var node = m_head; node != null; node = node.Next) //Traverse
            con.accept(node.Item);
    }
}






/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

