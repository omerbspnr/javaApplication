

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının append metodu ve capacity değişimi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder(5);

		System.out.printf("Capacity:%d%n", sb.capacity());
		System.out.printf("Length:%d%n", sb.length());

		sb.append("ankara").append("istanbul").append("izmir");

		System.out.printf("Capacity:%d%n", sb.capacity());
		System.out.printf("Length:%d%n", sb.length());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının String parametreli ctor elemanı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.append("istanbul").append("izmir");

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının String parametreli ctor elemanı capacity değerini 16 + string'in karakter
	sayısı olarak belirler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("istanbul");

		System.out.printf("Capacity:%d%n", sb.capacity());
		System.out.printf("Length:%d%n", sb.length());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının charAt metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("istanbul");

		int len = sb.length();

		for (int i = 0; i < len; ++i)
			System.out.printf("%c ", sb.charAt(i));

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının delete metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.delete(0, 2); //[0, 2)

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının deleteCharAt metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.deleteCharAt(5);

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının getChars metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("Bugün hava çok güzel");

		char [] c = new char[4];

		sb.getChars(6, 10, c, 0);

		for (int i = 0; i < c.length; ++i)
			System.out.println(c[i]);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının getChars metodu ile içersindeki karakterlerin tamamından bir dizinin elde
	edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("Bugün hava çok güzel");

		char [] c = new char[sb.length()];

		sb.getChars(0, sb.length(), c, 0);

		for (int i = 0; i < c.length; ++i)
			System.out.println(c[i]);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının insert metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("Bugün hava çok güzel");

		sb.insert(6, "gerçekten ");

		System.out.println(sb);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının setLength metodu ile büyütme yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		StringBuilder sb = new StringBuilder("ankara");

		sb.setLength(10);

		System.out.println(sb + ":");
		System.out.println(sb.indexOf("\0"));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının setLength metodu ile küçültme de yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        sb.setLength(4);

        System.out.println(sb + ":");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    changeCase metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

class App {
    public static void main(String [] args)
    {
        System.out.println(StringUtil.changeCase("AnKaRa1:,"));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	ArrayUtil sınıfının reverse metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        String str = Console.read("Bir yazı giriniz:");
        char [] c = str.toCharArray();

        ArrayUtil.reverse(c);

        Console.write(new String(c));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı iki yazı için birincisi içerisinden ikinci yazıda bulunan
	karakterlerin olmadığı yazıyı  döndüren squeeze isimli metodu yazınız ve test ediniz.
	Örnek: ankara, istanbul -> kr
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;
import org.csystem.util.StringUtil;

class App {
    public static void main(String [] args)
    {
        String s1 = Console.read("Birinci yazıyı giriniz:");
        String s2 = Console.read("İkinci yazıyı giriniz:");

        Console.writeLine(StringUtil.squeeze(s1, s2));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının ensureCapacity metodu artırılacak capacity değeri artması gereken capacity değerinden
	küçükse değeri artması gereken sayı olarak belirler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        Console.writeLine("Capacity:%d", sb.capacity());

        sb.ensureCapacity(23);

        Console.writeLine("Capacity:%d", sb.capacity());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının ensureCapacity metodu artırılacak capacity değeri artması gereken capacity değerinden
	büyükse değer verilen capacity değeri olarak belirlenir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        Console.writeLine("Capacity:%d", sb.capacity());

        sb.ensureCapacity(50);

        Console.writeLine("Capacity:%d", sb.capacity());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının subSequance metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder("ankara");

        Console.writeLine(sb.subSequence(2, sb.length()));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının trimToSize metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder();

        sb.append("ankara").append("-").append("istanbul").append("-").append("izmir");

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());

        sb.trimToSize();

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	StringBuilder sınıfının trimToSize metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

class App {
    public static void main(String [] args)
    {
        StringBuilder sb = new StringBuilder();

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());

        sb.trimToSize();

        Console.writeLine("Capacity:%d", sb.capacity());
        Console.writeLine("Length:%d", sb.length());
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden girilen bir ne sayısı kadar klavyeden girilen yazıları bir dizi içerisinde
	toplatınız. Bu işlemden sonra bu dizinin içerisindeki yazıların aralarında - karakteri olacak şekilde bir
	yazı elde eden programı StringBuilder kullanarak yapınız
	ankara, istanbul, izmir, zonguldak -> ankara-istanbul-izmir-zonguldak
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.concatstringsapp.ConcatApp;

class App {
    public static void main(String [] args)
    {
        ConcatApp.run();
    }
}

package org.csystem.samples.concatstringsapp;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

public class ConcatStrings {
    private String [] m_str;
    private String m_delim;
    private String m_result;

    private void fillStr()
    {
        for (int i = 0; i < m_str.length; ++i)
            m_str[i] = Console.read("Yazı?");
    }
    public ConcatStrings(int n, char delim)
    {
        this(n, delim + "");
    }

    public ConcatStrings(int n, String delim)
    {
        m_str = new String[n];
        m_delim = delim;
        m_result = "";
    }

    public String[] getStr()
    {
        return m_str;
    }

    public String getResult()
    {
        return m_result;
    }

    public void run()
    {
        fillStr();
        m_result = ArrayUtil.join(m_str, m_delim);
    }
}

package org.csystem.samples.concatstringsapp;


import org.csystem.util.Console;

public class ConcatApp {
    public static void run()
    {
        int n = Console.readInt("Bir sayı giriniz:");
        ConcatStrings app = new ConcatStrings(n, "--");

        app.run();

        Console.writeLine(app.getResult());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfı ve add metodu aşağıdaki gibi bir kullanımda yuvarlama hatası oluşmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        BigDecimal a = new BigDecimal("0.1");
        BigDecimal b = new BigDecimal("0.2");
        BigDecimal c = a.add(b);

        Console.writeLine(c.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfının min ve max metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        BigDecimal a = BigDecimal.valueOf(0.1);
        BigDecimal b = BigDecimal.valueOf(0.2);
        BigDecimal min = a.min(b);
        BigDecimal max = a.max(b);

        Console.writeLine(min.toString());
        Console.writeLine(max.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı BigDecimal türünden bir dizinin toplamını döndüren
	sum isimli metodu ArrayUtil sınıfı içerisinde yazınız.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

import static org.csystem.util.ArrayUtil.*;

class App {
    public static void main(String [] args)
    {
        BigDecimal [] bigDecimals = {
                BigDecimal.valueOf(1.3),
                BigDecimal.valueOf(-6),
                BigDecimal.valueOf(9.567),
                BigDecimal.valueOf(5.934),
        };

        BigDecimal total = sum(bigDecimals);

        Console.writeLine(total.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfının compareTo metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        double a = Console.readDouble("Birinci sayıyı giriniz:");
        double b = Console.readDouble("İkinci sayıyı giriniz:");

        BigDecimal bda = BigDecimal.valueOf(a);
        BigDecimal bdb = BigDecimal.valueOf(b);

        Console.writeLine(bda.compareTo(bdb));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı BigDecimal türden bir dizinin en büyük elemanını döndüren max ve en küçük
	elemanını döndüren min isimli metotları ArrayUtil sınıfı içerisinde yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import java.math.BigDecimal;

class App {
    public static void main(String [] args)
    {
        BigDecimal [] bigDecimals = {
                BigDecimal.valueOf(1.3),
                BigDecimal.valueOf(-6),
                BigDecimal.valueOf(9.567),
                BigDecimal.valueOf(5.934),
        };

        Console.writeLine("min:%s", ArrayUtil.min(bigDecimals));
        Console.writeLine("max:%s", ArrayUtil.max(bigDecimals));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigDecimal sınıfının devide metodu ile bölme işleminde sonucun nasıl yuvarlanacağı ve ne kadar hassasiyet ile
	elde edileceği belirlenebilir. Çoğu zaman da belirlenmesi gerekir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigDecimal;
import java.math.RoundingMode;

class App {
    public static void main(String [] args)
    {
        BigDecimal a = BigDecimal.TEN;
        BigDecimal b = BigDecimal.valueOf(3);

        BigDecimal res = a.divide(b, 10, RoundingMode.HALF_UP);

        Console.writeLine("res=%s%n", res);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı BigDecimal türden bir dizinin ortalamasını döndüren average metotlarını
	aşağıdaki açıklamaya göre yazınız.
	- Yalnızca dizi referansı parametreli metot virgülden sonra 6 basamak ve yukarı yuvarlama biçimde çalışacaktır
	- Dizi referans, scale ve RoundingMode parametreli metot ilgili değerlere göre işlem yapacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import java.math.BigDecimal;
import java.math.RoundingMode;

class App {
    public static void main(String [] args)
    {
        BigDecimal [] bigDecimals = {
                BigDecimal.valueOf(1.3),
                BigDecimal.valueOf(-6),
                BigDecimal.valueOf(9.567),
                BigDecimal.valueOf(5.934),
        };

        BigDecimal avg = ArrayUtil.average(bigDecimals, 50, RoundingMode.CEILING);

        Console.writeLine("Average=%s", avg);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	BigInteger sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigInteger;

class App {
    public static void main(String [] args)
    {
        BigInteger bi = new BigInteger("9999999999999999999999999999999999999999999999");

        Console.writeLine(bi.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	BigInteger sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigInteger;

class App {
    public static void main(String [] args)
    {
        BigInteger bi = new BigInteger("ABC3FDE308F5FFFABC", 16);

        Console.writeLine(bi.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: NumberUtil sınıfı içerisinde yazılmış olan isPrime isimli metodu. BigInteger parametresi için
	ayrıca yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.math.BigInteger;

public class App {
    public static void main(String[] args)
    {
        for (BigInteger i = BigInteger.ZERO; i.compareTo(BigInteger.valueOf(100)) <= 0; i = i.add(BigInteger.ONE)) {
            if (NumberUtil.isPrime(i))
                Console.write("%s ", i);
        }

        Console.writeLine();

        Console.writeLine(NumberUtil.isPrime(BigInteger.valueOf(1_000_003)) ? "Asal" : "Asal değil");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte BigInteger içerisindeki değerin yüksek anlamlı byte değerleri atılarak 4 byte'lık değer
	elde edilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.math.BigInteger;

public class App {
    public static void main(String[] args)
    {
        BigInteger bi = new BigInteger("ABCDEF10ABCD", 16);

        Console.writeLine("%X", bi.intValue());
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Değişken sayıda argüman alan metotlar (elipsis parametreli metotlar) (varargs methods)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        Util.display(10, 20);
        Util.display();
        Util.display(10);
        Util.display(new int []{10, 20});
    }
}

class Util {
    public static void display(int...a)
    {
        for (int val : a)
            System.out.printf("%d ", val);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki durumda error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

class Util {
    public static void display(int [] a) //error
    {

    }
    public static void display(int...a) //error
    {
        for (int val : a)
            System.out.printf("%d ", val);

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki durumda int parametreli display metodu çağrılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        Util.display(10);
    }
}

class Util {
    public static void display(int a)
    {
        System.out.printf("a=%d%n", a);
    }

    public static void display(int...a)
    {
        for (int val : a)
            System.out.printf("%d ", val);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun varargs parametresi diğer parametrelerin en sağında olmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        Util.display(10);
    }
}

class Util {
    public static void display(int val, int...a)
    {
        System.out.printf("val=%d%n", val);

        for (int elem : a)
            System.out.printf("%d ", elem);

        System.out.println();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki kuralın bir sonucu olarak iki tane varargs parametreli metot yazılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

class Util {
    public static void display(double...a, int...b) //error
    {

    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki durumda int parametreli display çağrılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        short a = 10;

        Util.display(a);
    }
}

class Util {
    public static void display(int val)
    {
        System.out.println("int");
    }

    public static void display(short...a)
    {
        System.out.println("short...");
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Dizi dizileri de varargs olarak yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        int [] a= {1, 2, 3, 4, 5};
        int [] b = {1, 2, 3, 4, 7};

        Util.display(a, b, a, a, b, b, a);
    }
}

class Util {
    public static void display(int[]...a)
    {
        for (int [] array : a) {
            for (int val : array)
                System.out.printf("%02d ", val);

            System.out.println();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Elipsis atomu yalnızca parametre değişken bildirimlerinde kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        int...a = new int[10]; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden iki dizinin birlştirilmiş olduğu yeni bir dizi döndüren
	join isimli metodu ArrayUtil sınıfı içerisinde yazınız ve test ediniz. Metodun bir parametresi varargs
	biçiminde olacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;

import java.math.BigInteger;

public class App {
    public static void main(String[] args)
    {
        int []  a = {1, 2, 3, 4, 5, 6};
        int [] result = ArrayUtil.join(a, 10, 20, 30);

        ArrayUtil.display(result);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Programın komut satırı argümanları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki programda komut satırı argümanı verilmişse komut satırı argümanları verilmemişse klavyeden
	istenen değerler kullanılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

public class App {
    public static void main(String[] args)
    {
        if (args.length == 0)
            args = Console.read("Argümanları giriniz:").split("[ \t\r]+");

        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	CommandUtil sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CommandLineUtil;

public class App {
    public static void main(String[] args)
    {
        args = CommandLineUtil.getCommandLineArgs(args, "Argümanları giriniz:");

        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	CommandUtil sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.CommandLineUtil.*;

public class App {
    public static void main(String[] args)
    {
        args = getCommandLineArgs(args, "Argümanları giriniz:");
        controlForLengthEqual(args, 2, "Usage: copy src dest");

        for (String arg : args)
            System.out.println(arg);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	var anahtar sözcüğü Java 10 le eklenmiştir. Yerel değişken bildirimlerinde kullanılan bir anahtar sözcüktür
	Java 11 ile birlikte var anahtar sözcüğü Lambda ifadelerinde de kullanılabilmektedir. Lambda ifadeleri ileride
	ele alınacaktır
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    var anahtar sözcüğü kullanım yerleri dışında anahtar sözcük olarak ele alınmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        int var;

        var = 10;

        System.out.println(var);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    var olarak bildirilen yerel değişenlere ilk değer verilmelidir. Verilen ilk değere göre türü elde edilir.
    Ve yaşamı boyunca aynı türde devam eder
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        var a = 10;

        a = 2.3; //error
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    var parametre değişkeni ve veri elemanı bildirimlerinde kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public var a; //error
    public void foo(var a) //error
    {

    }

}

/*----------------------------------------------------------------------------------------------------------------------
    var yerel değişkenler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.app.PostalCodeInfoModelFactory.*;

public class App {
    public static void main(String[] args)
    {
        var model = create(67100, "Zonguldak");

        //...
    }
}

class PostalCodeInfoModelFactory {
    public static PostalCodeInfoModel create(int code, String name)
    {
        //...
        return new PostalCodeInfoModel(code, name);
    }
}

class PostalCodeInfoModel {
    private int m_code;
    private String m_place;

    public PostalCodeInfoModel(int code, String place)
    {
        m_code = code;
        m_place = place;
    }

    public int getCode()
    {
        return m_code;
    }

    public void setCode(int code)
    {
        m_code = code;
    }

    public String getPlace()
    {
        return m_place;
    }

    public void setPlace(String place)
    {
        m_place = place;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    var yerel değişkenler for veya for-each döngü deyimlerinde de kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        var a = new int[]{1, 2, 3, 4};

        for (var val : a)
            System.out.println(val * val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    var yerel değişkenler for veya for-each döngü deyimlerinde de kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {
        var a = new int[]{1, 2, 3, 4};

        for (var val : a)
            System.out.println(val * val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Komut satırı argümanları ile veya komut satırı argümanı verilmemişse klavyeden istenen
    n tane yazının n-1 tanesini son verilen argümanı ayraç olarak kullanacak şekilde birleştirip yeni bir String
    elde eden programı yazınız.

    java xxx ali veli selami -
    ali-veli-selami
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import static org.csystem.util.CommandLineUtil.*;

public class App {
    public static void main(String[] args)
    {
        ConcatWithDelimApp.run(args);
    }
}

class ConcatWithDelimApp {
    private ConcatWithDelimApp() {}
    public static void run(String [] args)
    {
        args = getCommandLineArgs(args, "Birleştirilecek yazıları ve sonunda ayracı giriniz:");
        controlForLengthGreaterOrEqual(args, 3, "Geçersiz kullanım: En az üç argüman girilmelidir");
        var str = ArrayUtil.join(args, args.length - 1, args[args.length - 1]);

        Console.writeLine(str);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    ArrayUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Random;

public final class ArrayUtil {
    private ArrayUtil() {}

    public static int[][] addMatrices(int [][] a, int []...b)
    {
        if (!isMatrix(a) || !isMatrix(b) || a.length != b.length || a[0].length != b[0].length)
            throw new IllegalArgumentException("Geçersiz matris(ler)");

        var row = a.length;
        var col = a[0].length;
        var m = new int[row][col];

        for (var i = 0; i < row; ++i)
            for (var j = 0; j < col; ++j)
                m[i][j] = a[i][j] + b[i][j];

        return m;
    }

    public static BigDecimal average(BigDecimal...bigDecimals)
    {
        return average(bigDecimals, 6, RoundingMode.HALF_UP);
    }

    public static BigDecimal average(BigDecimal [] bigDecimals, int scale, RoundingMode roundingMode)
    {
        return sum(bigDecimals).divide(BigDecimal.valueOf(bigDecimals.length), scale, roundingMode);
    }

    public static double average(int...a)
    {
        return (double)sum(a) / a.length;
    }

    public static int [] copy(int [] src, int[]dest)
    {
        return copy(src, dest, src.length);
    }

    public static int [] copy(int [] src, int[]dest, int size)
    {
        for (var i = 0; i < size; ++i)
            dest[i] = src[i];

        return dest;
    }

    public static int copyIfLengthGreater(String [] src, String [] dest, int val)
    {
        var index = 0;

        for (var s : src)
            if (s.length() > val)
                dest[index++] = s;

        return index;
    }

    public static void display(int ...a)
    {
        display(1, a);
    }

    public static void display(int n, int...a)
    {
        display(n, true, a);
    }

    public static void display(int n, boolean putZero, int...a)
    {
        var fmt = putZero ? String.format("%%0%dd ", n) : String.format("%%%dd ", n);

        for (var val : a)
            System.out.printf(fmt, val);

        System.out.println();
    }

    public static void display(String...str)
    {
        display(str, str.length);
    }

    public static void display(String [] str, int n)
    {
        for (var i = 0; i < n; ++i)
            System.out.println(str[i]);
    }

    public static void display(int []...a)
    {
        display(1, a);
    }

    public static void display(int n, int[]...a)
    {
        display(n, true, a);
    }

    public static void display(int n, boolean putZero, int []...a)
    {
        for (var array : a)
            display(n, putZero, array);
    }

    public static void drawHistogram(int [] h, int n, char ch)
    {
        var maxVal = max(h);

        for (var val : h) {
            var count = Math.round(val * n / maxVal);

            while (count -- > 0)
                System.out.print(ch);

            System.out.println();
        }
    }

    public static int [] getHistogramData(int [] a, int n) //[0, n]
    {
        var hist = new int[n + 1];

        for (var val : a)
            ++hist[val];

        return hist;
    }

    public static int [] getRandomArray(int n, int min, int max) //[min, max)
    {
        return getRandomArray(new Random(), n, min, max);
    }


    public static int [] getRandomArray(Random r, int n, int min, int max) //[min, max)
    {
        var a = new int[n];

        for (var i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }

    public static int[][] getRandomMatrix(int m, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(new Random(), m, n, min, max);
    }

    public static int[][] getRandomMatrix(Random r, int m, int n, int min, int max) //[min, max)
    {
        var a = new int[m][];

        for (var i = 0; i < m; ++i)
            a[i] = getRandomArray(r, n, min, max);

        return a;
    }

    public static int[][] getRandomSquareMatrix(int n, int min, int max) //[min, max)
    {
        return getRandomSquareMatrix(new Random(), n, min, max);
    }

    public static int[][] getRandomSquareMatrix(Random r, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(r, n, n, min, max);
    }

    public static boolean isEmpty(int [] a)
    {
        return a.length == 0;
    }


    public static boolean isMatrix(int [][] a)
    {
        var col = a[0].length;

        for (var i = 1; i < a.length; ++i)
            if (a[i].length != col)
                return false;

        return true;
    }

    public static boolean isSquareMatrix(int [][] a)
    {
        return isMatrix(a) && a.length == a[0].length;
    }

    public static int [] join(int [] a, int...b)
    {
        var res = new int[a.length + b.length];
        var index = 0;

        for (var val : a)
            res[index++] = val;

        for (var val : b)
            res[index++] = val;

        return res;
    }

    public static String join(String [] s, char delim)
    {
        return join(s, delim + "");
    }

    public static String join(String [] s, String delim)
    {
        return join(s, s.length, delim);
    }

    public static String join(ArrayList<String> list, char delim)
    {
        return join(list, delim + "");
    }

    public static String join(ArrayList<String> list, String delim)
    {
        var str = "";

        for (var o : list)
            str += o + delim;

        return str.substring(0, str.length() - delim.length());
    }

    public static String join(String [] s, int n, char delim)
    {
        return join(s, n, delim + "");
    }

    public static String join(String [] s, int n, String delim)
    {
        var sb = new StringBuilder();

        for (var i = 0; i < n; ++i)
            sb.append(s[i]).append(delim);

        return sb.substring(0, sb.length() - delim.length());
    }

    public static int max(int [] a)
    {
         var maxVal = a[0];

        for (var i = 1; i < a.length; ++i)
            if (maxVal < a[i])
                maxVal = a[i];

        return maxVal;
    }

    public static int max(int [][] a)
    {
        var maxVal = Integer.MIN_VALUE;

        for (var array : a)
            for (var val : array)
                if (maxVal < val)
                    maxVal = val;

        return maxVal;
    }

    public static BigDecimal max(BigDecimal [] bigDecimals)
    {
        var res = bigDecimals[0];

        for (var i = 1; i < bigDecimals.length; ++i)
            res = res.max(bigDecimals[i]);

        return res;
    }

    public static int min(int [] a)
    {
        var minVal = a[0];

        for (var i = 1; i < a.length; ++i)
            if (minVal > a[i])
                minVal = a[i];

        return minVal;
    }

    public static int min(int [][] a)
    {
        var minVal = Integer.MAX_VALUE;

        for (var array : a)
            for (var val : array)
                if (minVal > val)
                    minVal = val;

        return minVal;
    }

    public static BigDecimal min(BigDecimal [] bigDecimals)
    {
        var res = bigDecimals[0];

        for (var i = 1; i < bigDecimals.length; ++i)
            res = res.min(bigDecimals[i]);

        return res;
    }

    public static char [] reverse(char [] a)
    {
        new StringBuilder(a.length)
                .append(a)
                .reverse()
                .getChars(0, a.length, a, 0);

        return a;
    }

    public static int[] resizeActual(int [] a, int size)
    {
        if (size == a.length)
            return a;

        if (size < a.length)
            return copy(a, new int[size], size);

        return copy(a, new int[size]);
    }

    public static int[] resize(int [] a, int size)
    {
        if (size <= a.length)
            return a;

        return copy(a, new int[size]);
    }

    public static int [] reverse(int [] a)
    {
        var halfLen = a.length / 2;

        for (var i = 0; i < halfLen; ++i) {
            var temp = a[i];

            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }

        return a;
    }


    public static int sum(int...a)
    {
        return sum(0, a);
    }

    public static int sum(int init, int...a)
    {
        var total = init;

        for (var val : a)
            total += val;

        return total;
    }

    public static int sumDiagonal(int [][] a)
    {
        if (!isSquareMatrix(a))
            throw new IllegalArgumentException("Kare matris gereklidir");

        var total = 0;

        for (var i = 0; i < a.length; ++i)
            total += a[i][i];

        return total;
    }

    public static BigDecimal sum(BigDecimal [] bigDecimals)
    {
        var result = BigDecimal.ZERO;

        for (var bigDecimal : bigDecimals)
            result = result.add(bigDecimal);

        return result;
    }

    public static int [][] transpose(int [][] a)
    {
        var t = new int[a[0].length][a.length];

        for (var i = 0; i < a.length; ++i)
            for (var j = 0; j < a[i].length; ++j)
                t[j][i] = a[i][j];

        return t;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    CommandUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.util;

public final class CommandLineUtil {
    private CommandLineUtil() {}

    private static void doWorkForControl(String msg)
    {
        Console.Error.writeLine(msg);
        System.exit(-1);
    }

    public static void controlForLengthEqual(String [] args, int val, String msg)
    {
        if (args.length != val)
            doWorkForControl(msg);
    }

    public static void controlForLengthGreater(String [] args, int val, String msg)
    {
        if (args.length <= val)
            doWorkForControl(msg);
    }

    public static void controlForLengthGreaterOrEqual(String [] args, int val, String msg)
    {
        if (args.length < val)
            doWorkForControl(msg);
    }

    public static void controlForLengthLess(String [] args, int val, String msg)
    {
        if (args.length >= val)
            doWorkForControl(msg);
    }

    public static void controlForLengthLessOrEqual(String [] args, int val, String msg)
    {
        if (args.length > val)
            doWorkForControl(msg);
    }

    public static String [] getCommandLineArgs(String [] args, String msg)
    {
        if (args.length == 0)
            return Console.read(msg).split("[ \t\r]+");

        return args;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.math.BigInteger;

public final class NumberUtil {
	private static final BigInteger TWO = BigInteger.valueOf(2); // For Java versions before 9
	private static final BigInteger THREE = BigInteger.valueOf(3);
	private static final BigInteger FIVE = BigInteger.valueOf(5);
	private static final BigInteger SEVEN = BigInteger.valueOf(7);
	private static final BigInteger ELEVEN = BigInteger.valueOf(11);

	private static int [] getDigits(long val, int n)
	{
		val = Math.abs(val);
		var count = val == 0 ? 1 : (int)(Math.log10(val) / n + 1);
		var divisor = (int)Math.pow(10, n);
		var digits = new int[count];

		for (var i = count - 1; i >= 0; --i) {
			digits[i] = (int)(val % divisor);
			val /= divisor;
		}

		return digits;
	}

	private static String numToStrMax3DigitsTR(int n)
	{
		if (n == 0)
			return "sıfır";

		var ones = new String[]{"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
		var tens = new String[]{"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};
		var str = n < 0 ? "eksi" : "";

		n = Math.abs(n);

		var a = n / 100;
		var b = n / 10 % 10;
		var c = n % 10;

		if (a != 0) {
			if (a != 1)
				str += ones[a];
			str += "yüz";
		}

		if (b != 0)
			str += tens[b];

		if (c != 0)
			str += ones[c];

		return str;
	}

	private NumberUtil() {}

	public static long factorial(int n)
	{
		if (n < 0)
			return  -1;

		var result = 1L;

		for (var i = 2L; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(long val)
	{
		return getDigits(val, 1);
	}

	public static int [] getDigitsInThrees(long val)
	{
		return getDigits(val, 3);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)(Math.log10(Math.abs(val)) + 1);
	}

	public static int getDigitsSum(int val)
	{
		var sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getFibonacciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		var prev1 = 0;
		var prev2 = 1;
		var result = 0;

		for (var i = 2; i < n; ++i) {
			result = prev1 + prev2;
			prev1 = prev2;
			prev2 = result;
		}

		return result;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		var count = 0;
		var val = 0;

		for (var i = 2; count < n; ++i)
			if (isPrime(i)) {
				++count;
				val = i;
			}

		return val;
	}

	public static int [] getPrimes(int n)
	{
		var count = 0;
		var primes = new int[n];

		for (var i = 2; count < n; ++i)
			if (isPrime(i)) {
				primes[count] = i;
				++count;
			}

		return primes;
	}

	public static int getReverse(int val)
	{
		var rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		var n = getDigitsCount(val);
		var temp = val;
		var sum = 0;

		while (temp != 0) {
			sum += Math.pow(temp % 10, n);
			temp /= 10;
		}

		return sum == val;
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static boolean isPrime(BigInteger val)
	{
		if (val.compareTo(BigInteger.ONE) <= 0)
			return false;

		if (val.mod(TWO).equals(BigInteger.ZERO))
			return val.equals(TWO);

		if (val.mod(THREE).equals(BigInteger.ZERO))
			return val.equals(THREE);

		if (val.mod(FIVE).equals(BigInteger.ZERO))
			return val.equals(FIVE);

		if (val.mod(SEVEN).equals(BigInteger.ZERO))
			return val.equals(SEVEN);

		var sqrtVal = val.sqrt();

		for (var i = ELEVEN; i.compareTo(sqrtVal) <= 0; i = i.add(TWO))
			if (val.mod(i).equals(BigInteger.ZERO))
				return false;

		return true;
	}

	public static boolean isPrime(long val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		var sqrtVal = (long)Math.sqrt(val);

		for (var i = 11L; i <= sqrtVal; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPrime(int val)
	{
		return isPrime((long)val);
	}

	public static int min(int a, int b, int c)
	{
		return (a < b) ? (a < c ? a : c) : (b < c ? b : c);
	}

	public static int max(int a, int b, int c)
	{
		return (a > b) ? (a > c ? a : c) : (b > c ? b : c);
	}

	public static String numToStrTR(long n)
	{
		//TODO:Homework
		return numToStrMax3DigitsTR((int)n);
	}

}

/*----------------------------------------------------------------------------------------------------------------------
    StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public final class StringUtil {
	private static char getRandomChar(Random r, String s)
	{
		return s.charAt(r.nextInt(s.length()));
	}

	private StringUtil() {}


	public static String changeCase(String s)
	{
		var sb = new StringBuilder(s);

		var len = sb.length();

		for (var i = 0; i < len; ++i) {
			var ch = sb.charAt(i);

			if (Character.isUpperCase(ch))
				sb.setCharAt(i, Character.toLowerCase(ch));
			else if (Character.isLowerCase(ch))
				sb.setCharAt(i, Character.toUpperCase(ch));
		}

		return sb.toString();
	}

	public static int getCount(String s1, String s2)
	{
		var count = 0;
		var index = 0;

		while ((index = s1.indexOf(s2, index)) != -1) {
			++count;
			++index;
		}

		return count;
	}

	public static String getLetters(String s)
	{
		var str = "";
		var len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String getRandomString(int n, String str)
	{
		return getRandomString(new Random(), n, str);
	}

	public static String getRandomString(Random r, int n, String str)
	{
		var c = new char[n];

		for (var i = 0; i < n; ++i)
			c[i] = getRandomChar(r, str);

		return new String(c);
	}

	public static String getRandomStringTR(int n)
	{
		return getRandomStringTR(new Random(), n);
	}

	public static String getRandomStringTR(Random r, int n)
	{
		var alphabet = "ABCÇDEFGĞHIİJKLMNOÖPRSŞTUÜVYZabcçdefgğhıijklmnoöprsştuüvyz";

		return getRandomString(r, n, alphabet);
	}

	public static boolean isPalindirome(String s)
	{
		var str = getLetters(s);

		var halfLen = str.length() / 2;
		var len = str.length();

		for (var i = 0; i < halfLen; ++i) {
			var chLeft = Character.toLowerCase(str.charAt(i));
			var chRight = Character.toLowerCase(str.charAt(len - 1 - i));

			if (chLeft != chRight)
				return false;
		}

		return true;
	}

	public static boolean isPangramEN(String str)
	{
		var alphabet = "abcdefghijklmnopqrstuvwxyz";

		return isPangram(str.toLowerCase(), alphabet);
	}

	public static boolean isPangramTR(String str)
	{
		var alphabet = "abcçdefgğhıijklmnoöprsştuüvyz";

		return isPangram(str.toLowerCase(), alphabet);
	}

	public static boolean isPangram(String str, String alphabet)
	{
		var len = alphabet.length();

		for (var i = 0; i < len; ++i) {
			var ch = alphabet.charAt(i);

			if (str.indexOf(ch) == -1)
				return false;
		}

		return true;
	}

	public static String padLeft(String s, int len, char ch)
	{
		var sLen = s.length();

		if (len <= sLen)
			return s;

		return repeat(len - sLen, ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		var sLen = s.length();

		if (len <= sLen)
			return s;

		return s + repeat(len - sLen, ch);

	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeWhitespaces(String s)
	{
		var str = "";

		int len = s.length();

		for (var i = 0; i < len; ++i) {
			var ch = s.charAt(i);

			if (!Character.isWhitespace(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		return repeat(n, ch + "");
	}

	public static String repeat(int n, String s)
	{
		var len = s.length();
		var c = new char[n * len];

		for (var i = 0; i < c.length; i += len) {
			for (var k = 0; k < len; ++k)
				c[i + k] = s.charAt(k);
		}

		return new String(c);
	}

	public static String reverse(String s)
	{
		return new StringBuilder(s).reverse().toString();
	}

	public static String [] split(String str, String delim, StringSplitOptions options)
	{
		var regex = "[";

		var delimLen = delim.length();

		for (var i = 0; i < delimLen; ++i) {
			char ch = delim.charAt(i);

			regex += ch == ']' || ch == '[' ? "\\" + ch : ch;
		}

		regex += ']';
		if (StringSplitOptions.REMOVE_EMPTY_ENTRIES == options)
			regex += '+';

		return str.split(regex);
	}


	public static String squeeze(String s1, String s2)
	{
		var len = s1.length();
		var sb = new StringBuilder(len);

		for (var i = 0; i < len; ++i) {
			var ch = s1.charAt(i);

			if (s2.indexOf(ch) == -1)
				sb.append(ch);
		}

		return sb.toString();
	}

	public static String toUpper(String str)
	{
		return str.toUpperCase();
	}

	public static String trimLeft(String s)
	{
		var i = 0;
		var len = s.length();

		for (; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}

	public static String trimRight(String s)
	{
		var i = s.length() - 1;

		for (; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının fill metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = new int[10];

        Arrays.fill(a, 67);

        ArrayUtil.display(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının fill metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        boolean [] flags = new boolean[10];

        Arrays.fill(flags, true);

        for (var flag : flags)
            Console.writeLine(flag);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının fill metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Console;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        boolean [] flags = new boolean[10];

        Arrays.fill(flags, 2, 5, true); //[2, 5)

        for (var flag : flags)
            Console.writeLine(flag);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
       int [] a = ArrayUtil.getRandomArray(10, 0 ,101);

       ArrayUtil.display(2, a);

       int [] newArray = Arrays.copyOf(a, 20);

        ArrayUtil.display(2, newArray);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
       int [] a = ArrayUtil.getRandomArray(10, 0 ,101);

       ArrayUtil.display(2, a);

        a = Arrays.copyOf(a, 20);

        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları eleman sayısı küültülmüş yeni bir dizi döndürebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
       int [] a = ArrayUtil.getRandomArray(10, 0 ,101);

       ArrayUtil.display(2, a);

        a = Arrays.copyOf(a, 5);

        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metotları eleman sayısı küültülmüş yeni bir dizi döndürebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int n = 10;
        int newSize = 20;
        int [] a = ArrayUtil.getRandomArray(n, 0 ,101);

        ArrayUtil.display(2, a);

        a = Arrays.copyOf(a, newSize);
        Arrays.fill(a, n, newSize, -1);
        ArrayUtil.display(2, a);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOf metodu ile bir dizinin kopyası çıkartılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4};
        int [] b;

        b = Arrays.copyOf(a, a.length);

        ArrayUtil.display(a);
        ArrayUtil.display(b);

        Console.writeLine(a == b);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	ArrayUtil sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/

package org.csystem.app;

import org.csystem.util.ArrayUtil;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5};

        ArrayUtil.display(ArrayUtil.resize(a, 10));
        ArrayUtil.display(a);
        ArrayUtil.display(ArrayUtil.resizeActual(a, 3));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının copyOfRange metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5, 6, 7, 8};
        int [] b;

        b = Arrays.copyOfRange(a, 2, 4);

        ArrayUtil.display(a);
        ArrayUtil.display(b);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının equals metotları ile aynı türden diziler eşitlik karşılaştırmasına sokulabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5, 6, 7, 8};
        int [] b = {1, 2, 3, 4, 5, 6, 7, 8};

        System.out.println(Arrays.equals(a, b));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: int türden iki matrisin eşit olup olmadığını test eden equals isimli metodu ArrayUtil
    sınıfına ekleyiniz. Matris olmaması durumunda metot false değerini döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.Console;

public class App {
    public static void main(String[] args)
    {
        int [][] a = {{1, 2, 3}, {4, 5, 6}};
        int [][] b = {{1, 2, 3}, {4, 5, 7}};

        Console.writeLine(ArrayUtil.equals(a, b));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir dizi dizisinin tüm satırlarını ikinci paramatresi ile aldığı varargs
    değişkene göre değerlerle dolduran fill metodunu yazınız. Satır sayısından az sayıda değer verilmesi durumunda
    verilen değerler kadar doldurulacaktır.

    int [][] a = new int[3][4];

    fill(a, 10, 20, 30)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

public class App {
    public static void main(String[] args)
    {
        int [][] a = new int[3][4];

        ArrayUtil.fill(a, 3, 5, 7);

        ArrayUtil.display(a);


    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının compare metodu dizleri karşılaştırmak için kullanılır. Birinci parametresi ile
    aldığı dizi ikinci parametresi ile aldığı diziden küçükse yani ilk farklı elemanlar elde edildiğinde birinci dizinin
    ilgili elemanı küçükse negatif, büyükse pozitif, eğer diziler eşitse sıfır değerini döndürür.
    Bu metot Java 9 ile eklenmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {1, -6, 3, 4, 5, 6, 7, 8};
        int [] b = {1, 3};

        System.out.println(Arrays.compare(a, b));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir dizi dizisinin Arrays sınıfının compare maetotlarının
    karşılaştırma kriterine göre en büyük dizisinin bir kopyasını döndüren getMaxComparedArray isimli metodu yazınız
    ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

public class App {
    public static void main(String[] args)
    {
        int [][] a = {{1, 2, 3}, {4, 8, 10}, {7}};

        var min = ArrayUtil.getMinComparedArray(a);
        var max = ArrayUtil.getMaxComparedArray(a);

        ArrayUtil.display(min);
        ArrayUtil.display(max);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının sort metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var a = ArrayUtil.getRandomArray(20, 1, 100);

        ArrayUtil.display(2, a);
        Arrays.sort(a);
        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının sort metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var a = ArrayUtil.getRandomArray(20, 1, 100);

        ArrayUtil.display(2, a);
        Arrays.sort(a, 2, 6);
        ArrayUtil.display(2, a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının toString metotları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var a = ArrayUtil.getRandomArray(20, 1, 100);

        ArrayUtil.display(2, a);

        System.out.println(Arrays.toString(a));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının metotlarının bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        var deviceInfo = new DeviceInfo("test", "192.168.234", 2567, 50500, 4545);

        System.out.println(deviceInfo.toString());
    }
}

class DeviceInfo {
    private String m_name;
    private String m_host;
    private int [] m_ports;

    public DeviceInfo(String name, String host, int...ports)
    {
        m_name = name;
        m_host = host;
        m_ports = Arrays.copyOf(ports, ports.length);
        Arrays.sort(m_ports);
    }

    //...

    public String toString()
    {
        return String.format("%s:%s:%s", m_name, m_host, Arrays.toString(m_ports));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Arrays sınıfının compareUnsigned metotları ile işaretsiz karşılaştırma yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Arrays;

public class App {
    public static void main(String[] args)
    {
        int [] a = {0x80000B00, 0x9000AB00};
        int [] b = {0x0000B00, 0x0000AB00};

        ArrayUtil.display(a);
        ArrayUtil.display(b);

        System.out.println(Arrays.compare(a, b));
        System.out.println(Arrays.compareUnsigned(a, b));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Integer sınıfının işaretsiz sayılar için işlem yapan parseUnsignedInt metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int val = Integer.parseUnsignedInt(kb.nextLine());

        System.out.println(val);
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Bir metodun kendini kendinisini çağırması ile (recursion) ile başka bir metodu çağırması arasında
    teknik olarak bir fark yoktur. Özyinelemeli metotlar bir şekilde sonlandırılmazas sürekli kendisi çağırdığından
    exception oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.foo();
    }
}

class Sample {
    public static void foo()
    {
        foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Özyinelemeli metotlarını çalışmasını anlatan basit bir örnek
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.foo(4);
    }
}

class Sample {
    public static void foo(int val)
    {
        System.out.printf("Giriş:%d%n", val);
        if (val == 0)
            return;

        foo(val - 1);
        System.out.printf("Çıkış:%d%n", val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    RecursionUtil sınıfının factorial metodu
        public static long factorial(int n)
        {
            long res = 1;

            if (n <= 0)
                return 1;

            res = n * factorial(n - 1);

            return res;
        }
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

public class App {
    public static void main(String[] args)
    {
        FactorialTest.run();
    }
}

class FactorialTest {
    public static void run()
    {
        for (int n = 0; n <= 17; ++n)
            System.out.printf("%d!=%d%n", n, RecursionUtil.factorial(n));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir yazının tersten iteratif yöntemle yazdırılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        WriteReverseTest.run();
    }
}

class WriteReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            Util.writeReverse(str);

            System.out.println();

            if (str.equals("exit"))
                break;
        }
    }
}

class Util {
    public static void writeReverse(String str)
    {
        int len = str.length();

        while (len -- > 0)
            System.out.print(str.charAt(len));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bir yazının tersten özyinelemeli olarak yazdırılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        WriteReverseTest.run();
    }
}

class WriteReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            RecursionUtil.writeReverse(str);

            System.out.println();

            if (str.equals("exit"))
                break;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir yazı tersyüz etme işleminin iteratif olarak yapılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        GetReverseTest.run();
    }
}

class GetReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            String s = Util.getReverse(str);

            System.out.println(s);

            if (str.equals("exit"))
                break;
        }
    }
}

class Util {
    public static String getReverse(String str)
    {
        int left = 0;
        int right = str.length() - 1;
        char [] c = str.toCharArray();

        while (left < right) {
            char temp = c[left];
            c[left++] = c[right];
            c[right--] = temp;
        }

        return new String(c);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir yazı tersyüz etme işleminin özyinelemeli olarak yapılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        GetReverseTest.run();
    }
}

class GetReverseTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String str = kb.nextLine();

            String s = RecursionUtil.getReverse(str);

            System.out.println(s);

            if (str.equals("exit"))
                break;
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Fibonnaci sayısının bulunması işleminin özyinelemeli olarak çözümü

    Fibonacci: 0 1 1 2 3 5 8 13 21 34 ...
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        GetFibonnaciTest.run();
    }
}

class GetFibonnaciTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("n değerini giriniz:");
            int n = Integer.parseInt(kb.nextLine());
            if (n == 0)
                break;

            int val = RecursionUtil.getFibonacci(n);

            System.out.printf("%d. Fibonacci sayısı:%d%n", n, val);
        }
    }
}


/*---------------------------------------------------------------------------------------------------------------------
    Soru: Bir sayıyı System.out.write kullanarak yani sadece char ekrana basan bir metot kullanarak
    yazdıran programı yazınız (özyinelemeli çözüm)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.RecursionUtil;

import java.util.Scanner;

public class App {
    public static void main(String[] args)
    {
        WriteNumberTest.run();
    }
}

class WriteNumberTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());
            RecursionUtil.writeNumber(n);
            System.out.println();

            if (n == 0)
                break;
        }
    }
}

package org.csystem.util;

import java.io.PrintStream;

public final class RecursionUtil {
    private static final PrintStream ms_out = System.out;

    private static void getReverse(char[] c, int left, int right)
    {
        if (left >= right)
            return;

        char temp;

        temp= c[left];
        c[left] = c[right];
        c[right] = temp;

        getReverse(c, left + 1, right - 1);
    }

    private static void writeReverse(String str, int i)
    {
        if (i == str.length())
            return;

        writeReverse(str, i + 1);
        ms_out.print(str.charAt(i));
    }

    private RecursionUtil()
    {}

    public static long factorial(int n)
    {
        if (n <= 0)
            return 1;

        return n * factorial(n - 1);
    }

    public static String getReverse(String str)
    {
        char [] c = str.toCharArray();

        getReverse(c, 0, c.length - 1);

        return new String(c);
    }

    public static int getFibonacci(int n)
    {
        if (n <= 2)
            return n - 1;

        return getFibonacci(n - 1) + getFibonacci(n - 2);
    }

    public static void writeNumber(int val)
    {
        if (val < 0) {
            ms_out.write('-');
            val = -val;
        }

        if (val / 10 != 0)
            writeNumber(val / 10);

        ms_out.write((char)(val % 10 + '0'));
    }

    public static void writeNumber(int val, int radix)
    {
        if (val < 0) {
            ms_out.write('-');
            val = -val;
        }

        if (val / radix != 0)
            writeNumber(val / radix, radix);

        ms_out.write((char)(val % radix >= 10 ? val % radix - 10 + 'A' : '0' + val % radix));
    }

    public static void writeReverse(String s)
    {
        writeReverse(s, 0);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Java' da içiçe tür bildirimleri geçerlidir. Sınıf içerisinde sınıf bildirimleri genel olarak Java'da
    4(dört) şekilde yapılabilir:
    1. static sınıf bildirimi (nested)
    2. non-static sınıf bildirimi (inner)
    3. Yerel sınıf bildirimi (local)
    3. İsimsiz sınıf bildirimi (anonymous)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
    Hiç bir tür içerisinde bulunmayan bir sınıf (top level classes) static olarak bildirilemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class App {
    public static void main(String[] args)
    {

    }
}

static class A { //error

}

/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıf içerisinde başka bir sınıf static olarak bildirilebilir. Yani içteki sınıf dıştaki sınıfın bir
    elemanıdır (member). Dolayısıyla bir eleman static olabileceğinden (ctor hariç) sınf da static anahtar sözcüğü
    ile bildirilebilir. Tüm sınıf elemanlarında olduğu gibi içte bildirilen bir sınıf erişim belirleyici alabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    public static class B {
        //...
    }

    private static class C {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilmiş sınıflar normal sınıflarda olduğu gibi elemanlara sahip olabilirler. static bildirilmiş
    sınıflara onu kapsayan sınıf dışından kapsadığı sınıf ismi ve nokta operatörü ile erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B b = new A.B();

        b.x = 10;
        b.foo();

        A.B.bar();
    }
}

class A {
    public static class B {
        public int x;

        public void foo()
        {

        }

        public static void bar()
        {

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilmiş sınıflara erişim için import static deyimi kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.app.A.B;

class App {
    public static void main(String[] args)
    {
        B b = new B();

        b.x = 10;
        b.foo();

        B.bar();
    }
}

class A {
    public static class B {
        public int x;

        public void foo()
        {

        }

        public static void bar()
        {

        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Kapsayan sınıfta static olarak bildirilen bir sınıfın elemanlarına erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.tar(10);
    }
}

class A {
    public void tar(int val)
    {
        B x = new B();

        x.foo();
        x.x = val;

        B.bar();
    }
    public static class B {
        public int x;

        public void foo()
        {
            System.out.println("foo");
        }

        public static void bar()
        {
            System.out.println("bar");
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Kapsayan sınıfta static olarak bildirilen bir sınıfın private elemanlarına da erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.tar(10);
    }
}

class A {
    public void tar(int val)
    {
        B x = new B();

        x.foo();
        x.m_x = val;

        B.bar();
    }

    public static class B {
        private int m_x;

        public void foo()
        {
            System.out.println("foo");
        }

        public static void bar()
        {
            System.out.println("bar");
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilen bir sınıf kapsayan sınıfın private elemanlarına da erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B x = new A.B();

        x.foo();
    }
}

class A {
    private int m_x;
    public void tar(int val)
    {
        System.out.println("A.tar");
    }

    public static class B {
        private int m_x;

        public void foo()
        {
            System.out.println("foo");

            A x = new A();

            x.tar(20);
            x.m_x = 10;
        }

        public static void bar()
        {
            System.out.println("bar");
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    static bildirilen bir sınıf kapsayan sınıfın private elemanlarına da erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B x = new A.B();

        x.foo();
    }
}

class A {
    private static void foo()
    {
        System.out.println("A.foo");
    }
    public static class B {
        public void foo()
        {
            System.out.println("B.foo");
            A.foo();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static bildirilen bir sınıf kapsayan sınıfın private elemanlarına da erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A.B.foo();
    }
}

class A {
    private static void foo()
    {
        System.out.println("A.foo");
    }
    public static class B {
        public static void foo()
        {
            System.out.println("B.foo");
            A.foo();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki gibi bir tasarımda static bildirilmiş sınıf kullanılabilir (builder pattern)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        var builder = new AlertDialog.Builder();

       // builder.setTitle("Dikkat");
        builder.setMessage("Kapatmak istediğinize emin misiniz?");
        builder.setButton(Button.YESNO);
        //builder.setMessageIcon(MessageIcon.QUESTION);
        var dlg = builder.build();

        dlg.show();
    }
}

enum Button {OK, YESNO, YESNOCANCEL}
enum MessageIcon {INFORMATION, QUESTION, ALERT, WARNING}

class AlertDialog {
    private String m_title;
    private String m_message;
    private Button m_button;
    private MessageIcon m_messageIcon;

    private AlertDialog()
    {
        m_title = "";
        m_message = "";
        m_button = Button.OK;
        m_messageIcon = MessageIcon.INFORMATION;
    }

    public static class Builder {
        private AlertDialog m_alertDialog;

        public Builder()
        {
            m_alertDialog = new AlertDialog();
        }

        public void setTitle(String title)
        {
            //...
            m_alertDialog.m_title = title;
        }

        public void setMessage(String message)
        {
            //...
            m_alertDialog.m_message = message;
        }

        public void setButton(Button button)
        {
            //...
            m_alertDialog.m_button = button;
        }

        public void setMessageIcon(MessageIcon messageIcon)
        {
            //...
            m_alertDialog.m_messageIcon = messageIcon;
        }

        public AlertDialog build()
        {
            return m_alertDialog;
        }
    }

    public void show()
    {
        System.out.printf("Title:%s%n", m_title);
        System.out.printf("Message:%s%n", m_message);
        System.out.printf("Button:%s%n", m_button);
        System.out.printf("Message Icon:%s%n", m_messageIcon);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Android geliştirmede kullanılan meşhur R sınıfı içerisinde static bildirilmiş sınıflar olacak biçimde tasarlanmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        //...
    }
}


class View {
    //...
}

class EditText extends View {
    //...
}

class TextView extends View {
    //...
}

class Context {
    public View findViewById(int id)
    {
        ///
        return new View();
    }

}
class Activity extends Context {
    //...
    private EditText m_editTextName;
    private TextView m_textViewName;

    public void onCreate()
    {
        //...
        m_editTextName = (EditText)findViewById(R.id.MAINACTIVITY_EDITTEXT_NAME);
        m_textViewName = (TextView)findViewById(R.id.MAINACTIVITY_TEXTVIEW_NAME);
    }
    //...
}

class R {
    public static class id {
        public static final int MAINACTIVITY_EDITTEXT_NAME = 0x123456;
        public static final int MAINACTIVITY_TEXTVIEW_NAME = 0x123457;
    }

    public static class string {
        public static final int label_name = 0x123455;
        public static final int ok_button_text = 0x123458;
    }
    public static class color {
        public static final int white_color = 0x12987;
    }

    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıf içerisinde non-static olarak bildirilmiş bir sınıf olabilir (inner class)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    //...
    public class B {

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıfın static elemanları olamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    //...
    public class B {
        public static int a; //error

        public static void foo() //error
        {

        }

        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıf türürün nesne kapsayan sınıf dışında <referans>.new sentaksı ile
    yaratılabilir. Yani bir inner sınıf türünden nesne için ait olduğu bir kapsayan sınıf nesnesi olmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a1 = new A();
        A.B y = a1.new B();
        A.B z = a1.new B();
        A a2 = new A();
        A.B t = a2.new B();
    }
}

class A {
    public class B {

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıf o nesnenin ilişkin olduğu kapsayan sınıf nesnesinin non-static veri elemanlarına
    doğrudan erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();
        A.B b = a.new B();

        b.foo(34);
        System.out.printf("a.val:%d%n", a.getVal());

        var c = a.new B();

        c.foo(67);

        System.out.printf("a.val:%d%n", a.getVal());
    }
}

class A {
    private int m_val;

    public int getVal() {return m_val;}

    public class B {
        public void foo(int val)
        {
            m_val = val;
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    non-static bildirilmiş bir sınıf o nesnenin ilişkin olduğu kapsayan sınıf nesnesinin non-static veri elemanlarına
    doğrudan erişebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.doWorkForVal(-20);

        System.out.println(a.getVal());
        //...
    }
}

class A {
    private int m_val;

    private class B {
        public void doWork(int val)
        {
            m_val = Math.abs(val);
        }
    }

    public int getVal() {return m_val;}

    public void doWorkForVal(int val)
    {
        B x = new B();

        x.doWork(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.doWorkForVal(-20);

        System.out.println(a.getVal());
        //...
    }
}

class A {
    private int m_val;

    private class B {
        public void doWork(int val)
        {
            m_val = Math.abs(val);
        }
    }

    public int getVal() {return m_val;}

    public static void doWorkForVal(int val)
    {
        B x = new B(); //error:

        x.doWork(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Tekrar: non-static metotlarının çağrılarının arakoda çevrilmiş temsili karşılığı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        x.foo(10);

        //Temsili arakod karşılığı
        A.foo(x, 10);
    }
}

class A {
    private int m_val;
    public void foo(int val)
    {
        m_val = val;
    }

    //Temsili arakod karşılığı:
    public static void foo(A a, int val)
    {
        a.m_val = val;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Tekrar: this referansı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        x.foo(10);
    }
}

class A {
    private int m_val;
    public void foo(int val)
    {
        this.m_val = val;
        this.bar();
    }

    public void bar()
    {

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Tekrar: this referansı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class A {
    private int val;

    public A(int val)
    {
        this.val = val;
    }
    public int getVal() {return val;}

    public void setVal(int val)
    {
        //...
        this.val = val;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki örnekte x referansına ilişkin aşağıdaki gibi this referansı kullanılarak yaratılmış olur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A a = new A();

        a.doWorkForVal(-20);

        System.out.println(a.getVal());
        //...
    }
}

class A {
    private int m_val;

    private class B {
        public void doWork(int val)
        {
            m_val = Math.abs(val);
        }
    }

    public int getVal() {return m_val;}

    public void doWorkForVal(int val)
    {
        B x = this.new B();

        x.doWork(val);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    this expression
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        A.B y = x.new B();

        y.foo();
    }
}

class A {
    private int m_val;

    public void foo()
    {
        System.out.println("A.foo");
    }

    public class B {
        private int m_val;
        public void foo()
        {
            System.out.println("B.foo");
            A.this.foo();
            A.this.m_val = 10;
            this.m_val = 20;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    this expression
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        A x = new A();

        x.a = 20;
        A.B y = x.new B();

        y.bar();
    }
}

class Sample {
    public static void doWork(A a)
    {
        a.foo();
    }
}

class A {
    public int a;
    public void foo()
    {
        System.out.printf("a=%d%n", a);
        System.out.println("A.foo");
    }

    public class B {
        public void bar()
        {
            System.out.println("B.bar");
            Sample.doWork(A.this);
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Zincir çağırma kalıbı (fluent pattern)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.foo().bar().tar().foo();
    }
}

class Sample {
    //...
    public Sample foo()
    {
        System.out.println("foo");

        return this;
    }

    public Sample bar()
    {
        System.out.println("bar");

        return this;
    }

    public Sample tar()
    {
        System.out.println("tar");

        return this;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Builder kalıbının fluent kalıbı ile kullanımı (fluent builder)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        var builder = new AlertDialog.Builder();

        var dlg = builder
                .setTitle("Dikkat")
                .setMessage("Emin misiniz?")
                .setButton(Button.OK)
                .build();

        dlg.show();

    }
}

enum Button {OK, YESNO, YESNOCANCEL}
enum MessageIcon {INFORMATION, QUESTION, ALERT, WARNING}

class AlertDialog {
    private String m_title;
    private String m_message;
    private Button m_button;
    private MessageIcon m_messageIcon;

    private AlertDialog()
    {
        m_title = "";
        m_message = "";
        m_button = Button.OK;
        m_messageIcon = MessageIcon.INFORMATION;
    }

    public static class Builder {
        private AlertDialog m_alertDialog;

        public Builder()
        {
            m_alertDialog = new AlertDialog();
        }

        public Builder setTitle(String title)
        {
            //...
            m_alertDialog.m_title = title;

            return this;
        }

        public Builder setMessage(String message)
        {
            //...
            m_alertDialog.m_message = message;

            return this;
        }

        public Builder setButton(Button button)
        {
            //...
            m_alertDialog.m_button = button;

            return this;
        }

        public Builder setMessageIcon(MessageIcon messageIcon)
        {
            //...
            m_alertDialog.m_messageIcon = messageIcon;

            return this;
        }

        public AlertDialog build()
        {
            return m_alertDialog;
        }
    }

    public void show()
    {
        System.out.printf("Title:%s%n", m_title);
        System.out.printf("Message:%s%n", m_message);
        System.out.printf("Button:%s%n", m_button);
        System.out.printf("Message Icon:%s%n", m_messageIcon);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    static sınıfların bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        CountdownTimerEvent.StartEvent startEvent = new CountdownTimerEvent.StartEvent();
        TimerEvent.ProgressEvent progressEvent = new TimerEvent.ProgressEvent();

        //...
    }
}

class CountdownTimerEvent {
    public static class StartEvent {
        //...
    }

    public static class ProgressEvent {
        //...
    }

    public static class StopEvent {
        //...
    }
}

class TimerEvent {
    public static class StartEvent {
        //...
    }

    public static class ProgressEvent {
        //...
    }

    public static class StopEvent {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf içerisinde enum türü bildirilebilir. enum türlerinin doğası gereği bildirimin static olup olmamasının
    bir önemi yoktur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    private enum Color {RED, GREEN, BLUE}
    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir sınıf bildirimi bir metot içerisinde yapılıyorsa bu sınıflara yerel (local) sınıflar denir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {

        }

        class B {

        }
    }


    public void bar()
    {
        class A {

        }

        class B {

        }

        class C {

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar faaliyet alanı bakımından bildirildikleri yerden bildirildikleri bloğun sonuna kadar
    görülebilirdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {

        }

        A x = new A();

        class B {
            public void foo()
            {

            }
        }

        B y = new B();

        y.foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar faaliyet alanı bakımından bildirildikleri yerden bildirildikleri bloğun sonuna kadar
    görülebilirdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        for (int i = 0; i < 10; ++i) {
            class A {

            }

            A x = new A();
        }

        A y; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aynı faaliyet alanı içerisinde aynı isimde yerel sınıf bildirimi geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {

        }

        for (int i = 0; i < 10; ++i) {
            class A { //error

            }

            A x = new A();
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki durum geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        for (int i = 0; i < 10; ++i) {
            class A {

            }

            A x = new A();
        }

        class A {

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar erişim belirleyici ile bildirilemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        public class A { //error

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar static olarak bildirilemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        static class A { //error

        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar başka bir sınıftan türetilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class X {

}

class Sample {
    public void foo()
    {
        class A extends X {
            //...
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel bir sınıf başka bir yerel sınıftan türetilebilir. Bu durumda taban sınıf isminin geçerli olması
    için taban yerel sınıfın türemiş yerel sınıftan önce bildirilmesi gerekir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {

    }
}

class Sample {
    public void foo()
    {
        class A {
            //...
        }

        class  B extends  A {
            //...
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel bir sınıf kendisinden önce bildirilen yerel değişkenleri ve parametre değişkenlerini yakalayabilir (capture)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Sample.foo(20);
    }
}

class Sample {
    public static void foo(int val)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz");
        int a = Integer.parseInt(kb.nextLine());

        class Util {
            public boolean isEven() {return val % 2 == 0;}
            public boolean isOdd() {return a % 2 != 0;}
        }

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar içerisinde yakalanan yerel veya parametre değişkenleri faaliyet alanı içerisinde tek bir değer
    alabilirler. Yani değerleri değiştirilemez. Java 8 ile birlikte yakalnmış olan yerel veya parametre
    değişkenlerine "effective final" değişkenler denir. Java 8 öncesinde yakalanabilecek değişkenler final
    yapılmak zorundaydı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Sample.foo(20);
    }
}

class Sample {
    public static void foo(int val)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz");
        int a = Integer.parseInt(kb.nextLine());

        class Util {
            public boolean isEven() {return val % 2 == 0;} //error
            public boolean isOdd() {return a++ % 2 != 0;} //error:
        }

        val = 12;

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıfların static elemanları olamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.foo(20);
    }
}

class Sample {
    public static void foo(int val)
    {
        class A {
            public static int a; //error

            public static void foo(int a) //error
            {

            }
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar içerisinde sınıfın veri elemanları kullanılabilir hatta değişiklik de yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample.val = 10;
        Sample.foo(20);

        System.out.println(Sample.val);
    }
}

class Sample {
    public static int val;

    public static void foo(int a)
    {
        class Util {
            public boolean isEven() {return a % 2 == 0;}
            public boolean isOdd() {return Sample.val++ % 2 != 0;}
        }

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar içerisinde sınıfın veri elemanları kullanılabilir hatta değişiklik de yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.val = 11;

        s.foo(20);

        System.out.println(s.val);
    }
}

class Sample {
    public int val;

    public void foo(int a)
    {
        class Util {
            public boolean isEven() {return a % 2 == 0;}
            public boolean isOdd() {return Sample.this.val++ % 2 != 0;}
        }

        var util = new Util();

        System.out.println(util.isEven() ? "Çift" : "Tek");
        System.out.println(util.isOdd() ? "Tek" : "Çift");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar bazı durumlarda test yapmakta kullanılabilir. Aşağıdaki işlemi ileride daha profesyonel tekniklerle
    yapacağız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.displaySqrt(-20);
    }
}

class Sample {
    public static final boolean DEBUG = false;

    private void foo(int val)
    {
        if (DEBUG) {
            class TestUtil {
                public boolean isNonnegative()
                {
                    return val >= 0;
                }
            }
            var tu = new TestUtil();

            if (!tu.isNonnegative()) {
                System.out.println("Invalid value");
                System.exit(-1);
            }
        }
        System.out.println(Math.sqrt(val));
    }

    public void displaySqrt(int val)
    {
        if (val >= 0)
            foo(val);
        else
            System.out.println("Geçersiz değer");
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Yerel sınıflar bazı durumlarda test yapmakta kullanılabilir. Aşağıdaki işlemi ileride daha profesyonel tekniklerle
    yapacağız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample();

        s.displaySqrt(20);
    }
}

class SampleTest {
    public static void test(int val)
    {
        class TestUtil {
            public boolean isNonnegative()
            {
                return val >= 0;
            }
        }
        var tu = new TestUtil();

        if (!tu.isNonnegative()) {
            System.out.println("Invalid value");
            System.exit(-1);
        }

        System.out.println("OK");
    }
}

class Sample {
    public static final boolean DEBUG = false;

    private void foo(int val)
    {
        if (DEBUG)
            SampleTest.test(val);

        System.out.println(Math.sqrt(val));
    }

    public void displaySqrt(int val)
    {
        if (val >= 0)
            foo(val);
        else
            System.out.println("Geçersiz değer");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Anahtar Notlar: İşlemli atama operatörlerinin genel biçimi
    T1 t1;
    T2 t2;

    t1 op= t2

    t1 = (T1)(t1 op t2);
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        int a = 10;

        a += Math.pow(a, 3); // a = (int)(a + Math.pow(a, 3));

        System.out.println(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıf bildiriminin genel biçimi:
    new <tür>([argümanlar]) {
        //...
    }
    Yukarıdaki bildirim bir anonim sınıf bildirimidir aynı zamanda da bir nesne yaratılması işlemidir. Yani anonim
    sınıf bildirimi new operatörüne yazılan türden türetilmiş olan bir sınıfın hem bildirimi hemde o sınıf türünden
    nesne yaratılması görevini verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample() {};
        Sample k = new Sample() {};

        System.out.println(s.getClass().getName());
        System.out.println(k.getClass().getName());
    }
}

class Sample {

}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıf bir türetme (inheritance) işlemi olduğundan aşağıdaki kod geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample() {}; //error:
        Sample k = new Sample() {}; //error:

        System.out.println(s.getClass().getName());
        System.out.println(k.getClass().getName());
    }
}

final class Sample {

}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte foo metodu çağrıldığında foo metodunu çağıran referansın gösterdiği nesnenin referans sayısı bir
    artırılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;


class App {
    public static void main(String[] args)
    {
        Mample m = new Mample();

        new Sample().foo(m);
        //referans sayacı:1
        m.setSample(new Sample());
        //...
    }
}

class Mample {
    private Sample m_sample;

    public void setSample(Sample s)
    {
        m_sample = s;
    }
}

class Sample {
    public void foo(Mample m)
    {
        m.setSample(this);
        System.out.println("Sample.foo");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki durumda bellek sızıntısı (memory leak) oluşur. yaratılan nesne program sonuna kadar garbage collected
    duruma gelemeyeceği için ölemez
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        new Sample().foo();
        //...
    }
}

class Sample {
    public Sample s;

    public void foo()
    {
        s = this;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte liste boşaltına kadar tüm yaratılan nesneler kesin yaşarlar
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.ArrayList;

class App {
    public static void main(String[] args)
    {
        for (int i = 0; i < 10; ++i)
            new Sample();

        System.out.println(Sample.list.size());

        Sample.list.clear();
    }
}

class Sample {
    public final static ArrayList list = new ArrayList();

    public Sample()
    {
        list.add(this);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıflar abstract sınıflar türünden yaratılıyorsa bu durumda abstract sınıfın tüm abstract metotları
    override edilmek zorundadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        Sample s = new Sample() {
            public void foo()
            {
                System.out.println("Anonim Sample.foo");
            }
            public void bar()
            {
                System.out.println("Anonim Sample.bar");
            }
        };

        s.foo();
    }
}

abstract class Sample {
    public abstract void foo();
    public abstract void bar();

    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıfların abstract sınıflardan türetilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        var helper = new OperationHelper(10);

        System.out.println(helper.doOperation(20));
    }
}

class OperationHelper {
    private UnaryOperations m_unaryOperations;

    public OperationHelper(int val)
    {
        m_unaryOperations = new UnaryOperations(val) {
            public int apply(int val)
            {
                return val + this.val;
            }
        };

        System.out.println(m_unaryOperations.getClass().getName());
    }

    public int doOperation(int val)
    {
        return m_unaryOperations.apply(val);
    }
}

abstract class UnaryOperations {
    protected int val;

    protected UnaryOperations(int val)
    {
        this.val = val;
    }

    public abstract int apply(int val);
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte UnaryOperations sınıfının ctor'u protected olmasına karşın anonim sınıf
    bildirimi yapıldığı için sorun oluşmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.UnaryOperations;

class App {
    public static void main(String[] args)
    {
        var helper = new OperationHelper(10);

        System.out.println(helper.doOperation(20));
    }
}

class OperationHelper {
    private UnaryOperations m_unaryOperations;

    public OperationHelper(int val)
    {
        m_unaryOperations = new UnaryOperations(val) {
            public int apply(int val)
            {
                return val + this.val;
            }
        };

        System.out.println(m_unaryOperations.getClass().getName());
    }

    public int doOperation(int val)
    {
        return m_unaryOperations.apply(val);
    }
}

package org.csystem.util;

public abstract class UnaryOperations {
    protected int val;

    protected UnaryOperations(int val)
    {
        this.val = val;
    }

    public abstract int apply(int val);
}

/*----------------------------------------------------------------------------------------------------------------------
    Anonim sınıflar da yerel sınıflarda olduğu kendisinden önce bildirilen yerel değişkenleri
    ve parametre değişkenleri yakalayabilirler.
    Bu durumda yine final olmayan bir yerel değişken veya parametre değişkeni için effectively
    final kuralları geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.UnaryOperation;

class App {
    public static void main(String[] args)
    {
        var helper = new OperationHelper(10);

        System.out.println(helper.doOperation(20));
    }
}

class OperationHelper {
    private UnaryOperation m_unaryOperations;

    public OperationHelper(int a)
    {
        m_unaryOperations = new UnaryOperation() {
            public int apply(int val)
            {
                return a + val;
            }
        };
    }

    public int doOperation(int val)
    {
        return m_unaryOperations.apply(val);
    }
}

package org.csystem.util;

public abstract class UnaryOperation {
    //...
    public abstract int apply(int val);
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağdaki örnekte OperationHelper sınıfı işlemi de dışarıdan alacak şekilde tasarlanmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Operation;
import org.csystem.util.OperationHelper;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int value = Integer.parseInt(kb.nextLine());

        var operation = new Operation() {
            public int apply(int val)
            {
                return val * value;
            }
            public int apply(int a, int b)
            {
                return value + a + b;
            }
        };

        var helper = new OperationHelper(operation);

        System.out.println(helper.doUnaryOperation(10));
        System.out.println(helper.doBinaryOperation(2, 3));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki işlem aşağıdaki gibi de yapılabilir. Bu durumda okunabilirliğe dikkat edilmesi
    gerekir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Operation;
import org.csystem.util.OperationHelper;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int value = Integer.parseInt(kb.nextLine());

        var helper = new OperationHelper(new Operation() {
            public int apply(int val)
            {
                return val * value;
            }
            public int apply(int a, int b)
            {
                return value + a + b;
            }
        });

        System.out.println(helper.doUnaryOperation(10));
        System.out.println(helper.doBinaryOperation(2, 3));
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki yukarıdakiler içerisinde en okunabilir olanıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.Operation;
import org.csystem.util.OperationHelper;

import java.util.Scanner;

class App {
    public static void main(String[] args)
    {
        Application.run();
    }
}

class Application {
    private static Operation getOperation(int value)
    {
        return new Operation() {
            public int apply(int val)
            {
                return val * value;
            }
            public int apply(int a, int b)
            {
                return value + a + b;
            }
        };
    }

    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int value = Integer.parseInt(kb.nextLine());

        var helper = new OperationHelper(getOperation(value));
        System.out.println(helper.doUnaryOperation(10));
        System.out.println(helper.doBinaryOperation(2, 3));
    }
}

package org.csystem.util;

public class OperationHelper {
    private Operation m_unaryOperation;

    public OperationHelper(Operation unaryOperation)
    {
        m_unaryOperation = unaryOperation;
    }

    public int doBinaryOperation(int a, int b)
    {
        return m_unaryOperation.apply(a, b);
    }

    public int doUnaryOperation(int val)
    {
        return m_unaryOperation.apply(val);
    }
}

package org.csystem.util;

public abstract class Operation {
    //...
    public abstract int apply(int val);
    public abstract int apply(int a, int b);
}

/*----------------------------------------------------------------------------------------------------------------------
    Timer sınıfı sınıfı timer işlemlerinde kullanılan temel sınıflardan biridir. Bu sınıfın scheduleXXX metotları
    ile ayrı bir akış oluşturulur ve girilen perioda göre TimerTask referansı ile aldğı türe ilişkin
    run metodu çağrılır. Aşağıdaki örnekte main metodu bitse bile timer ın devam ettiğine dikkat ediniz. Bu tarz
    arka plan akışlara non-daemon thread denir. Bu konu ileride ele alınacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Timer t = new Timer();

        t.schedule(new TimerTask() {
            public void run()
            {
                System.out.print(".");
            }
        }, 0, 30);

        System.out.println("Tekrar yapınız");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte TimerTask sınıfının cancel metodu ile TimerTask durudurulmuştur. Ancak Timer
    durdurulmamıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç tane nokta konsun?");
        int n = Integer.parseInt(kb.nextLine());

        Timer t = new Timer();

        t.schedule(new TimerTask() {
            private int m_count;

            public void run()
            {
                if (m_count == n) {
                    cancel();
                    return;
                }
                System.out.print('.');
                ++m_count;

            }
        }, 0, 1000);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte Timer durdurulmuştur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç tane nokta konsun?");
        int n = Integer.parseInt(kb.nextLine());

        Timer t = new Timer();

        t.schedule(new TimerTask() {
            private int m_count;

            public void run()
            {
                if (m_count == n) {
                    t.cancel();
                    return;
                }

                System.out.print('.');
                ++m_count;

            }
        }, 0, 1000);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte TimeUnit enum türü kullanılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.TimerUtil;

import java.util.Scanner;
import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç tane nokta konsun?");
        int n = Integer.parseInt(kb.nextLine());

        TimerUtil.show(n, '.', 0, 2, TimeUnit.SECONDS);
    }
}

package org.csystem.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

public final class TimerUtil {
    public static void show(int count, char ch, long delay, long period, TimeUnit timeUnit)
    {
        long delayInMs = TimeUnit.MILLISECONDS.convert(delay, timeUnit);
        long periodInMs = TimeUnit.MILLISECONDS.convert(period, timeUnit);

        Timer t = new Timer();

        t.schedule(new TimerTask() {
            private int m_count;

            public void run()
            {
                if (m_count == count) {
                    t.cancel();
                    return;
                }

                System.out.print(ch);
                ++m_count;
            }
        }, delayInMs, periodInMs);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Basit bir digital saat örneği
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Time;

import java.util.Timer;
import java.util.TimerTask;

class App {
    public static void main(String[] args)
    {
        Timer timer = new Timer();

        timer.schedule(new TimerTask() {
            public void run()
            {
                Time now = new Time();

                System.out.printf("%s\r", now);
            }
        }, 0, 1000);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Basit bir Timer sınıfı ve test kodu. Bu sınıf Timer sınıfı kullanılarak geliştirilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.CSDTimer;
import org.csystem.util.ITimerTask;

import java.util.concurrent.TimeUnit;

class App {
    public static void main(String[] args)
    {
        CSDTimer timer = new CSDTimer(0, 1, TimeUnit.SECONDS);

        timer.start(new ITimerTask() {
            public void run()
            {
                System.out.print(".");
            }
        });
        System.out.println("Tekrar yapınız");
    }
}

package org.csystem.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

public class CSDTimer {
    private Timer m_timer;
    private long m_delay;
    private long m_period;

    public CSDTimer(long delay, long period, TimeUnit timeUnit)
    {
        m_timer = new Timer();
        m_delay = TimeUnit.MILLISECONDS.convert(delay, timeUnit);
        m_period = TimeUnit.MILLISECONDS.convert(period, timeUnit);
    }

    public void start(ITimerTask timerTask)
    {
        m_timer.schedule(new TimerTask() {
            public void run()
            {
                timerTask.run();
            }
        }, m_delay, m_period);
    }

    public void cancel()
    {
        m_timer.cancel();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıda açıklanan sınıfı yazınız:
    Açıklamalar:
    1. Sınıfın ismi CoundownTimer olacaktır

    2. Sınıf abstract olarak yazılacak ve tek bir ctor'unda millisaniye cinsinden toplam zamanı ve
    period değerini milisaniye cinsinden alacaktır. Örnek bir kullanım aşağıdaki gibidir:

    new CountdownTimer(10000, 1000) {...}

    3. Sınıfın onTick ve onCompleted isimli iki adet abstract metodu olacaktır. onTick metodu
    her periyotta çağrılan, onCompleted metodu ise geriye sayım bittiğinde çağrılan metot olarak
    alınacaktır. onTick metodunun her çağrıldığında kalan zamanı milisaniye cinsinden alan bir
    parametesi olacaktır. Örnek bir kullanım:

     new CountdownTimer(10000, 1000) {
        public void onTick(long remaininMs)
        {
            //Her adımda yapılacak iş
        }

        public void onCompleted()
        {
            // Geri sayım bittiğinde yapılacak iş
        }
     }
    4. Sınıfın final start metodu ile timer başlatılatacaktır
    5. Sınfın cancel isimli metodu geriye sayım timer'ını durdurmak için kullanılacaktır
----------------------------------------------------------------------------------------------------------------------*/



/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

