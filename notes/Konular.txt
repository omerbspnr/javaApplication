- Java Uygulama kursu -
--------------------------------------------------------------------------------------------------------------
                                            01.03.2020
--------------------------------------------------------------------------------------------------------------

- Bir algoritmanın karmaşıklığı iki şeye bağlıdır.
    - Hız
    - Kaynak kullanımı


- Big O notation
    - Büyük O harfinin içerisine n'e bağlı bir denklem yazılır.
      O(1)// Sabit karmaşıklık // döngü yok anlamında, Örneğin dizi erişimi
      O(n) // lineer(doğrusal) karmaşıklık // tek döngü içeren algoritma // dizinin elemanları toplamı
      O(n ^ 2) // Karesel karmaşıklık iç içe döngü içeren(iki tane) algoritma // matrisin  elemanları toplamı
      O(n ^ 3) // Küpsel karmaşıklık
--------------------------------------------------------------------------------------------------------------
                                            StrinBuilder class
--------------------------------------------------------------------------------------------------------------

- String sınıfı immutable(Gösterdiği nesneyi değiştirimez) özelliğe sahip iken,
  StringBuilder sınıfının içerisindeki veri değiştirilebilir.

- String sınıfı türünden runtime'da atanan(Örneğin klavyeden girilen yada new operatörü ile oluşturaln) aynı
  yazılar birbirinden farklı adresler üretir.
    - Yukarıdaki olayda derleyicinin olayın içinde olmadığı için aynı yer ayrılmaz.
    - String s = "ankara";
    - String str = "ankara"; // derleyici "ankara" yazısı için tek bir adres üretir.

- Derleme zamanında çözülecek bir sorun var ise derleme zamanında çözülür.


- StringBuilder sınıfı String sınıfının mutable halidir(StringBuilder içerde char türünden dizi tutar, String sınıfı
  içerisinde CharSequence denilen bir tür vardır.)

- StringBuilder sınıfının size ve capacity denSpor düSpor dünyasından unutulmaz açıklamalar - HABERLER
  size içeride tutulan değişkenin uzunluğunu döndürür.
  Capacity ise maksimum artırılabilecek size'ı gösterir.(Capacity aşıldığında StringBuilder yeni bir yer tahsis edilir)

- amortized constant time (Çoğu zaman O(1) bazen ise O(n) karmaşıklığa çıkabilen karmaşıklıktır.)

- StringBuilder amortized constant time karmaşıklığı ile çalışan bir yapıya sahiptir.

- StringBuilder sınıfı içsel olarak tuttuğu dizinin elemanına capacity denir. Bizim tuttuğumuz veri eleman sayısına
  size, yada length denir.

- StringBuilder String sınıfı için yardımcı bir türdür.

- StringBuilder ctor'ları
    - default (16 karakterlik yer tutar.)
    - int capacity parametreli ctor (capacity'nin tarafımızdan belirlendiği durumlar)
    - String parametreli (String.length'i artı 16 karakterlik yer tutar.)

- Java'da bir programcı bir nesnenin hayatına son veremez.(C++' daki delete işlemi dinamik bir nesnenin hayatını sona erdirir.)

- StringBuilder türüne String türünden bir nesne atanmaz.

- StringBuilder sınıfının String parametreli ctor elemanı vardır.
    StringBuilder sb = new StringBuilder(String s);

- StringBuilder sınıfının toString fonksiyonu String döndürür.

- String ve StringBuilder sınıfının indexOf methodları char parametre ile değil, string paremetre ile çalışır.

--------------------------------------------------------------------------------------------------------------
                                            07.03.2020
--------------------------------------------------------------------------------------------------------------


- StringBuilder sınıfı türünden nesne initialize edilirken verilen Stringin uzunluğu artı 16 byte'lık yer ayırır.

- delete metodu StringBuilder sınıfında verilen range'i silip kaydırma yapar.

- getChars metodu verilen bir char array'inin içini doldurur. Herhangi bir StringBuilder sınıfının
    sb.getChars(int srcBegin,int srcEnd,char [] chars, int destBegin); //

- terim olarak append ve add fiilleri programlama da sona eklemek için kullanılır.

- insert belirli bir konuma ekleme yapar. bunun sonunda bir kaydırma işlemi yapılır.

- StringBuilder sınıfının setLength fonksiyonu length'i artırır ve geri kalan kısmı null character ile doldurur.

- setLength isimli fonksiyonu aynı zamanda küçültme de yapmamızı sağlar.

- StringBuilder sınıfının fonksiyonları
    - ensureCapacity(int val); // artırılacak minimum kapasiti değerinden küçük ise kendisi minimum değeri atar.
      Değilse bizim bildirdiğimiz değeri artar.

      StringBuilder sb = new StringBuilder("ankara"); // capacity 22
      sb.ensureCapacity(23); // capacity 46 artması gereken değer 46 olacağı için 46'ya çıkmıştır.
      sb.ensurecapacity(150); // capacity 150

    - Ya bizim verdiğimiz gereken değere çeker yada artmasa gereken değere çeker.

    - ensureCapacity değeri varolan değerden daha küçük bir değere artar.


- setCharAt fonksiyonu geçersiz length durumlarında exception throw eder.
- StringBuilder sınıfının char arayan bir indexOf fonksiyonu yoktur. String sınıfının vardır.

- subSequence(int start, int end) methodu yazı olabilen sınıflar için kullanılabilir. charSequence türüne geri döner.
  charSequence demek String demek değildir. Ama String demek charSequence demektir.

- trimToSize(); Sınıfın capacity'sini length'ine eşitler.

--------------------------------------------------------------------------------------------------------------
                                            BigDecimal class
--------------------------------------------------------------------------------------------------------------

- switch deyimlerinde double türleriyle karşılaştırma yapılamaz.

- double sayıları karşılaştırılken epsilon değeri ile karşılaştırılır.

- double sayıların kritik yerlerde kullanımı özellikle finansal uygulamalar da ortaya çıkar ve sorunları burada belli olur.

- BigDecimal sınıfı immutable'dır.
- Sınıflarda referans karşılaştırması ile nesnelerin gösterdikleri değerlerin aynı olup olmadığını
  == operatörü ile değil sınıfın ilgili metodları ile(equals, compareTo), metodları ile yapılmalıdır.
- BigDecimal sınıfının add metodu iki BigDecimal türünden nesneyi toplar.


- BigDecimal sınııfının valueOf metodu double türler için yuvarlama hatası olmaz. Verilen sayının kanonikal formunu döndürür.
  Sayı fonksiyona verilmeden önce yuvarlanmış ise kanonikal forma göre de  yuvarlanmış şekilde sayıdan nesne üretir.

- BigDecimal sınıfının min ve max metotları member metot'tur.

- BigDecimal sınıfının public static final bazı  veri elemanları
    - BigDecimal.ZERO
    - BigDecimal.TEN
    - BigDecimal.ONE


--------------------------------------------------------------------------------------------------------------
                                            08.03.2020
--------------------------------------------------------------------------------------------------------------


- BigDecimal sınıfının compareTo metodu karşılaştırma yapar.
    bd1.compareTo(bd2)
    Değer +1 ise bd1 > bd2
    değer -1 ise bd2 > bd1
    değer 0 ise bd1 == bd2 olur.


- iki tane sayının max'ını elde ederken yeni bir nesne elde edilmez. Verilen adreslerden hangisinin gösterdiği
  değer büyük ise o referans geri döndürülür.


- BigDecimal sınıfının non-static divide metodu,
    a.divide(Bigdecimal number, int scale, RoundingMode )
        scale .'dan sonra kaç tane basamak verileceğini bilir.
        RoundingMode'da enum türünden bir sınıftır.RoundingMode'ın belirli değerleri vardır.(RoundingMode.HALF_UP //gibi)
        Yuvurlamanın nasıl yapılacağını belirtmeliyiz.



--------------------------------------------------------------------------------------------------------------
                                Bir Library(Jar dosyası) nasıl oluşturulur(intellij için)
--------------------------------------------------------------------------------------------------------------
- Java da her bir moduül birer projedir.
- Her bir modülün birer main'i olabilir.
- Jar dosyaları aşağıdaki biçimde oluşturulur.
    1- Öncelikli olarak sınıfın içindeki kodlar yazılmış olmalı
    2- project structure'dan artifact(çıktı olarak kullanılır)'s kısmından yeni bir artifact oluşturulur.
    3- Artifact'in üst taraftaki ısmı değil ancak aşağı taraftaki ismi başına alan adı şeklralinde eklenir.
       (org-csystem-mathlib) - olmasının nedeni dosya olacağı için nokta koyamamızdan kaynaklıdır.
    4- Build kısmından oluşturulan artifact'ler build artifacts seçeneği ile build edilir.
--------------------------------------------------------------------------------------------------------------
                                Bir Library(Jar dosyası) nasıl projeye eklenir(intellij için)
--------------------------------------------------------------------------------------------------------------

- Öncelikli olarak library'ler projeye eklenirken proje klasörümüzde bu jar dosyalarını bulunduracağımız,
  bir klasör de olması daha iyi olur.(İsmi libs olabilir)
  Bu klasörde bulunan dosyaları eklemek için projects structure'dan library sekmesine tıklayarak ilgili
  jar dosyaları projelerimizi ekliyoruz. Bu dosyaları projemizde ekleyeceğimiz modülü seçebiliriz.

--------------------------------------------------------------------------------------------------------------
                                                14.03.2020
--------------------------------------------------------------------------------------------------------------

- SimpleProductMenuApp uygulaması yapıldı.


--------------------------------------------------------------------------------------------------------------
                                                15.03.2020
--------------------------------------------------------------------------------------------------------------

- Çalışabilen bir jar için içindeki main fonksiyonu da seçilmelidir(ArrayUtil çalışabilen bir jar değildir.).
  Burada çalışabilen jar'a örnek olarak simple product menuapp'si örnek olarak verilebilir.

--------------------------------------------------------------------------------------------------------------
                                                BIGINTEGER
--------------------------------------------------------------------------------------------------------------

- ONE, TEN TWO, ZERO gibi final static public veri elemanları vardır.

- Önemli fonksiyonlar
    - String parametreli ctor// BigInteger(string val);
    - String ve int radix paramatreli
      //BigInteger(string val, int radix); radix paramatresi  hangi sayı sistemine göre sayının okunacağını belirtir.
       BigInteger("ababab", 16); // sayı 16'lık sistemde okunur.
       BigInteger("765", 8); // sayı 8'lik sayı sistemini göre okunur.
    - static valueOf metodu(long val);

    - sınıfın IntValue ve DoubleValue metodları mevcuttur. Tür dönüşümü yapıp artık bitleri atar.

    - mod almak için mod metodu kullanılır.

- BigInteger sınıfında new operatörü ile yaratılan bir nesne ile final değişkenlerin(BigInteger.ZERO gibi)  == operatörü
  ile karşılaştılması doğru sonucu vermez.
  BigInteger zero = new BigInteger("0");
  System.out.println(zero == BigInteger.ZERO);//false döndürür. Çünkü referans karşılaştırılmasında
  sınıf immutable olmasına rağmen referansın biri new keyword'u ile yaratıldığından dolayı farklı sonuçlar verir.
  Eğer değer valueOf ile alınmış olsaydı sonuç doğru olurdu.(Burası final static değerler için geçerlidir.)

- == operatörü ile yapılan bir karşılaştırma her zaman referans karşılaştırması olur. Bu durumda new operatörü ile yaratılmış
  aynı değere sahip nesneler her zaman farklı adresleri gösterirler.

- Eğer sınıflar'ın valueOf metodu var ise ve immutable sınıf iseler valuOf metodu aynı adres değerlerini döndürür.
    BigInteger.valufeOf(2) == BigInteger.valueOf(2);

--------------------------------------------------------------------------------------------------------------
                            DEĞİŞKEN SAYIDA ARGÜMAN İLE ÇALIŞAN METODLAR.(VARARGS METODLAR)
--------------------------------------------------------------------------------------------------------------

- Metod ne şekilde yazılırsa yazılsın metodun içindeki parametre değişkeni dizi referansıdır.
- Böyle fonksiyonlar değişken sayıda yani
      Util.display(10,20,30,40); // derleyici burada new int[]{10,20,30,40} şeklinde gönderir.
      Util.display();
      Util.display(new int[]{1,2})
  argümanları ile çağırılabilir.

- class Uitl {
    public static void display(int ...a) // değişken sayıda int türünü alabilir.
    {
        //... atomuna elipsis atomu denir.
    }
  }

- elipsis atomu dilden dile farklı şekilde yazılabilir.

- varags bir metod [] referansı ile overload edilemez.
    public void display(int [] a);
    public void display(int ...a); // ikisinin aynı anda olması errordur.

- Bunun dışında fonksiyon herhangi bir parametre ile overload edilebilir.

- Bir metodun bir elipsis parametresi var ise elipsis parametresi en sondaki parametre olmalıdır.
    void display(int ... a, int n) ;//error

- Bir metodun birden fazla elipsis parametresi olamaz.
  public static void display(int ...a, String ...b) // error

- printf fonksiyonun birincisi parametresi String s, ikinci parametresi Object ... args'dır.

- iki tane varags parametreli metod yazılmak istenirse biri dizi referansı yapılmalıdır.

- matrisler le elipsis işlemi yapmak için fonksiyon parametresi
  class Util {
    public static void display(int [] ... a)
    {

    }
  }

- varargs metodlar sadece fonksiyon bildiriminde bulunabilir.

- Burada fonksiyona geçilecek parametre ya elipsis atomundan önceki atom türünden 0 yada en az 1 adet olmalı,
  yada elipsis atomunu da kapsayacak şekilde (int ... a için int [], int [] ... a için  int [] []) bir adet argüman
  gönderilebilir. birden fazla parametresi var ise


--------------------------------------------------------------------------------------------------------------
                                                21.03.2020
--------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------
                                                KOMUT SATIRI ARGÜMANLARI
--------------------------------------------------------------------------------------------------------------

- Özellikle bazı server uygulamalarında kullanılmaktadır.
- komut satırı argümanlarının uygulamaya geçilmesi için uygulamanın konsolda çalışması gerekmektedir.
- komut satırından uygulamayı çalıştırmak için, console'dan
    - java org.csystem.app.App <argümanlar>

    - eğer uygulama bir jar dosyası olarak çıkarıldı ise
      java -jar şeklinde <applicationname> <argümanlar> şeklinde çalıştırılmalıdır.
--------------------------------------------------------------------------------------------------------------
                                                var keyword
--------------------------------------------------------------------------------------------------------------

- Java 10 ile eklenmiştir. Yerel değişken bildirimlerinde kullanılır.
- Java 11 ile birlikte lambda ifadelerinde de kullanılmaya başlanmıştır.

- var anahtar sözcüğü değişken ismi olarak kullanılabilir.

- var anahtar sözcüğü ile belirtilen değişkene ilk değer verilmesi zorunludur.
  Çünkü değişken türünü  verilen ilk değere göre belirlenir
  var a = 10; // a'nın türü 10 olarak belirlenmiştir.

- var anahtar  sözcüğünün büyük özelliği kod yazımını basitleştirmektir.

- var anahtar sözcüğü parametre değişkeni bildiriminde kullanılamaz.

- var bir sınıfın veri elemanı olarak ta belirlenemez.

- sadece yerel değişkenler ve lambda ifadelerinde kullanılır.

-

--------------------------------------------------------------------------------------------------------------
                                                22.03.2020
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
                                                Arrays sınıfı
--------------------------------------------------------------------------------------------------------------

- Diziler üzerinde  işlem yapmak için kullanılan bir sınıftır.
- ctor'u private'tır. Metodlarının hepsi static'dir.

- Arrays sınıfının temel işlemler yapan metodları
    - fill metodları
        Arrays.fill(T [] a, int val); // verilen array'i verilen değer ile doldurur;
        Arrays.fill(T [] a, int fromIndex, int toIndex, int val) [fromIndex, toIndex)

    - T [] a copyOf metodu // yeni bir dizi tahsis eder ve değerleri kopyalar, yeni üretilen diziyi küçültebilir.

    - Arrays.fill(T [] a, int newLength); // yeni bir dizi döndürür. newLength ile o uzunlukta bir dizi üretir ve
      dizinin değerlerini kopyalar. diziyi aynı zamanda küçültedebilidir.(Yani eleman sayısı küçültülmüş yeni bir dizi
      verebilir.)

    - T []  copyOfRange(T [] a, int fromIndex,  int toIndex); // copyOf [fromIndex, twoIndex]

    - booleans equals(T [] a, T [] b); // dizilerin eşitlik karşılaştırması yapar.

    - int compare(T [] a, T [] b); // T burada herhangi bir tür anlamındadır.
        - Java 9 ile beraber eklenmiştir.
        - Eğer ilk parametredeki dizi büyük ise pozitif, küçük ise negatif, birbirine eşit iseler 0 değerini döner.
        - ilk farklı değer'den büyük olanın değerini döndürür.
        - length'ler farklı ve iki  array'in ilk n(n burada küçük dizinin size'ına kadardır) değeri karşılaştırır.
          eğer burada farklı bir değer var ise döner, eğer değerler eşit ise hangi dizinin size'ı daha büyük ise o
          dizinin bulunduğu konuma göre (Size'ı büyük olan dizi ilk parametre ise pozitif değer, ikinci ise negatif)
          değer döner.



    void sort(T [] a);
        - verilen diziyi büyükten küçüğe sıralar.
    void sort(T [] a, int fromIndex, int toIndex)
        - diziyi [fromIndex, toIndex) bu aralıkta sıralar.

        Küçükten büyüğe de çalışır ancak bunun için collection'lar konusunu görmemiz gerekir.

    String toString metodları
        Bir diziyi alıp Stringe dönüştürür [] içine alıp delim olaral ,  kullanılır.
        Yazıya çevirirken String sınıfının valueOf metodunu kullanır.

- Javadaki bütün tam sayı türleri pozitif ve negatif sayıları tutulabilir(Yani unsigned bir primitive tür yoktur).

     Arrays.compareUnsigned(int [] a, int [] b)
        - burada sayının negatif değerleri için sayının bitlerini 2'ye tamamlayarak pozitif değere döndürür.

- Genel olarak veri tutan(Data class) Sadece veri tutmaya yarayan sınıfların, toString'i olur.

--------------------------------------------------------------------------------------------------------------
                                                04.04.2020
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
                                                İçiçe sınıf bildirimleri
--------------------------------------------------------------------------------------------------------------

- 4 biçimde yapılabilir.
    1-) static sınıf bildirimi (nested)
    2-) non-static sınıf bildirimi (inner)
    3-) yerel sınıf bildirimi
    4-) isimsiz sınıf bildirimi


---- Static sınıf(nested) bildirimi ----

- Hiç bir sınıf içerisinde bulunmayan bir sınıf (top level classes) static olarak bildirilimez.
    package org.csystem.app;
    static class  Mycass {} // error

- Bir sınıf içerisinde başka bir sınıf static olarak bildirilebilir. İçteki sınıf dıştaki sınıfın bir elemanıdır.
  Dolayısıyla bir eleman static olabileceğinden sınıfta statik anahtar sözcüğü ile bildirilebilir.

- Tüm elemanlarda olduğu gibi içte bildirilen bir sınıf erişim belirleyicisi olabilir.(public, protected, private, non-modifier)
  Top level classes'ların private olması gibi bir durumu yokken bu inner class'lar için bu durum geçerlidir.

- Static bildirilmiş sınıflar  normal sınaflarda olduğu gibi memberlara(method yada değişkene) sahip olabilirler.

- static bildirilmiş sınıflar onu kapsayan sınıf dışından, kapsadığı sınıf ismi ve . operatörü ile erişilebilir.
    Myclass.innerMyclass b = new Myclass.innerMyclass();
    class Myclass {
        public static class innerMyclass{}
    }

- Bu composition ile karıştırmamak geerekir bu tamamen yeni bir tür bildirimidir.

- import static direktifi ile bu static class'a nitelemeden kullanabiliriz.
    import static org.csystem.app.Myclass.innerMyclass;

- Kapsayan sınıfta static olarak bildirilen sınıfın elemanlarına erişilebilir.

- top level bir sınıftan ilgili sınıfın static member class'ların private elemanına erişilebilir.

- static bir sınıftan kapsayan sınıfın private elemanlarına erişim sağlanabilir.

- static bir sınıfın en büyük artısı içtekinin dıştaki sınıfın yada dıştaki sınıfın içteki sınıfın
  private elemanlarına erişimimizin olmasıdır.

- static sınıflar Builder design pattern'inde sıkça kullanılır. Bunun nedeni sınıfa sanki istediğimiz
  değerler ile yaratma şansımızı verir.

- StringBuilder sınıfıda bir Builder design paterninin sonucudur. Ancak böyle bir şeyin implemente ediliş şekli
  daha farklıdır.

------- non-static(inner) sınıf bildirimi -------

- Bir sınıfın içerisindeki sınıf non-static bildirilmiş ise böyle sınıflara inner class denir

-  inner class'ın static bir member yada static bir methodu olamaz.

- non-static bir sınıf(inner class) türünden bir nesne yaratmak için
    <top_class_name>.<inner_class_name> <variablename> = <top  class reference>.new <innerclass name>();
    A a1 = new A();
    A.B y = a1.new B();
    A.B z = a1.new B(); // şeklinde yapılabilir.

    class A {
      class B{}
    }

- içsel bildirilen bir nesnenin non-static bildirilmiş nesnesine ortada içsel türden bir nesne
  yok ise errordur.
- non static(inner) bildirilmiş bir nesne kapsayan sınıf dışında <referans>.new sentaksı ile
  yaratılabilir.

- inner class'lığın inheritance'lık ile alakası yoktur. Ancak ve ancak bir ilişki veirlecek ise
  aggregation olabilir.

- inner class'lar ilişkin olduğu kapsayan sınıf nesnesinin non-static ve static veri elemanlarına doğrudan erişebilir.

- inner class'lar da içteki nesneyi yaratılabilmek için onu kapsayan sınıf türünden bir nesneye ihtiyaç vardır.

- Genelde inner türden nesneleri dışarıda değilde sınıfın içinde yaratırız.

- static bir fonksiyondan sınıfın non-static bir inner class'ı yaratılamaz.
  Çünkü inner class'ın türünden bir nesne içinde kapsayan türden bir referansın kime ait olacağını
  belirlenemez.

- javac içsel static ve içsel non-static sınıflar için .class dosyasını A$B.class şeklinde
  oluşturur.

- this anahtar sözcüğü non-static metod ile çağırılan referansın adresini gösterir.

- this sınıfının inner class'lar ile kullanılımı

class A {
    private int m_val;
    public void foo()
    {
        System.out.println("A.foo")
    }
    class B {
        private int m_val;
        public void foo()
        {
            System.out.println("B.foo")
            A.this.foo(); // this expression
            this.m_val = 10;
            A.this.m_val = 20; //
        }
    }
}


- inner class'larda kapsayan sınıfın bir elemanı ile aynı ise sahip bir member var ise
  top class'ın member'ına erişmek için <top_class_name>.this.member sentaksı kullanılır.
  Bu duruma this expression denir.
  class A {
    private int x;
    class B {
        private int x;
        public void foo()
        {
            System.out.println(A.this.x);
        }
    }
  }
--------------------------------------------------------------------------------------------------------------
                                                05.04.2020
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
                                                Recursive algoritmalar
--------------------------------------------------------------------------------------------------------------

- Özyineleme gerektiğinde kullanılması gereken bir durumdur. Çalışılırken dikkat edilmesi gerekir. Örneğin gömülü
  sistemlerde recursive algoritma hiç tercih edilmez.

- recursive algoritmalar kendini ne kadar çok çağırırsa stack'i o kadar doldurur.

- Eğer recursive algoritmalar yerine  algoritma döngü ile  yapılabiliyor ise(Eğer recursive ile çok daha hızlı
  yapılmıyor ise) recursive function tercih edilmemelidir.

- örneğin factorial fonksiyonu recursive şeklinde yazılmak yerine iteratif şeklinde yazılması daha iyidir.

--------------------------------------------------------------------------------------------------------------
                                                11.04.2020
--------------------------------------------------------------------------------------------------------------

- sınıf içerisinde enum türü bildirilebilir. Doğası gereği new operatörü ile yaratılamayacağı için statik bildirilsin
  yada bildirilmesin statik kabul edilir. Hatta statik bildirilmesine gerek yoktur.


- local classes(yerel sınıflar) :
    - Bir sınıfın bir metodu içerisinde bildirilen sınıflara  yerel sınıflar denir.

    class Sample {
        public void foo(){
            class A {

            }
            class B{

            }
        }
        public void bar(){
            class A {

            }
            class B{

            }
        }
    }

- Java da her bir sınıf kodu için bir .class dosyası üretilir.
    - local sınıflar için durum : Sample$1A.class şeklinde oluşturur(<taban sınıfı>$<localsınıf ismi>)

- yerel sınıflar faaliyet alanı bakımından bildirildileri fonksiyonun içinde bildirildikleri yerden
  bloğun sonuna kadar görülebilirler.

- yerel sınıflar erişim belirleyicisi  yada statik bildirilmesi gibi bir durumu yoktur. Böyle bir durumda bildirilmesi
  errordur.
  class A {
    public void foo()
    {
          public class B {} // error
          static class C {} // error
    }
  }

- yerel sınıflar başka bir sınıftan(local bir sınıf olabilir.) türetilebilir.(Burada base class'ın türemiş sınıfın
  görebileceği scope içerisinde olması gereklidir sadece).

- yerel bir sınıf kendisinden önce bildirilen yerel değişkenleri ve parametre değişkenlerini yakalayabilir.
  (Buna capture denir.)

  class Sample {
    public void foo(int val)
    {
        int a = 15;
        class Util {
            public boolean isEven(){return val % 2 == 0;}
            public boolean isOdd(){ return val % 2 != 0;}
        }
        var util = new Util();
        sout(util.isEven());
        sout(util.isOdd());
    }
  }

- Java da yerel fonksiyonlar olmadığı için  onların görevini yerel sınıflar ile yapılır.

- Bir yerel değişken bir local sınıf içerisinde kullanılmış(yakalanmış) ise ikinci bir değer atanamaz.
  Değiştirilmiş bir yerel değişkende yakalanamaz.

- Java 8'den itibaren yakalanmış olan yerel veya parametre değişkenlerine effectively final denir.
  Java 8 öncesinde ise yakalanabilecek değişkenler final bildirilmek zorundaydı

- java 8 öncesinde yerel değişkenler de final kullanımı böyle durumlar için geçerliydi

----- Anonim sınıflar -----

- isimsiz bir sınıf nasıl yazılır, Anonim sınıf bildiriminin genel biçimi aşağıdaki gibidir
  new <tür>([argümanlar]) {};

- Yukarıdaki bildirim bir anonim sınıf bildirimidir, aynı zamanda da bir nesne yaratılması
  işlemidir. Anonim sınıf bildirimi new operatörüne yazılan sınıf türünden türetilmiş olan bir sınıfın
  hem bildirimi hem de o sınıf türünden nesne yaratılması anlamına gelir.

   new Sample(){}; // Bu anonim bir sınıf bildirimidir.
   class Sample {}

- final bir sınıf türünden anonim sınıf yazılamaz.
    new Sample(){}; // error.
    final class Sample {}

- anonim sınıf yazımı aynı zamanda bir bildirimdir. Bu yüzden anonim sınıfı yazarken ilgili
  taban sınıfın fonksiyonları anonim sınıf içerisinde override edilebilir.

   Sample s = new Sample() {
                public void foo()
                {
                    sout("Anonim class");
                }
              };

  class Sample {
    public void foo(){}
  }

- anonim sınıfının bir çok kullanımı
--------------------------------------------------------------------------------------------------------------
                                                12.04.2020
--------------------------------------------------------------------------------------------------------------

- abstract sınıftan türetilmiş anonim sınıflar
    - Anonim sınıflar abstract sınıflardan türetilirse, abstract sınıfın tüm abstract metodları
      override edilmek zorundadır. Override edilmemesi halinde error oluşur.

    - Abstract türünden referans'lar genellikle bir fonksiyonun parametre değişkeni olarak kullanılır.

- anonim sınıflar farklı paketteki bir sınıf türünden isim ile yaratılıyor  ise bu sınıfların protected bölümüne
  erişebilir.

- anonim sınıflar da yerel sınıflarda olduğu gibi kendisinden önce bildirilen yerel değişkenleri veya
  parametre değişkenlerini yakalayabilirler. Bu durumda yine final olmayan bir yerel değişken veya parametre değişkeni
  için effectively final kuralları geçerlidir.

- callback : Ne yapılacağını dışarıdan alacağımız(Yani bir bakıma functor sınıflardır.)

- callback tarzı sınıflar genel olarak belirli periodlar ile çalışan metodlara geçilen metodlardır.  Böyle metodlara
  timer metodlar denir.

--- Timer class ----
    - Timer işlemlerinde kullanılan en temel sınıflardan biridir.
    - Kursta şu anda saddece default ctor'u kullanılacaktır.
    - sınıfın scheduleXXX metorları ile ayrı bir akış oluşturulur. ve girilen perioda göre TimerTask referansı
      ile aldığı türe ilişkin run metodu çağırılır. TimerTask parametresine, TimerTask türünden anonim bir sınıf
      geçilebilir.


--- Timeunit enum'ı -----
    - Timeunit enum'ı girilien değerin hangi saniye cinsinden olduğunu belirtir.(1,TimeUnit.HOURS) // Burada girilen 1
      sayısı saat cinsinden verilmiştir. yani kullanıcıya TimerTask için milliseconds türünden değil saat, saniye, dakika
      cinsinden istenildiği gibi verme gösterme imkanı sunulmuştur.



--------------------------------------------------------------------------------------------------------------
                                            19.04.2020
--------------------------------------------------------------------------------------------------------------

- anonim sınıflar sadece abstract sınıflardan değil ayrıca somut türlerden türetilebilir.

- anoninm sınıflara non-static initializer yazılabilir. non-static initializer kullanılarak nesnelere değer verilebilir.
- Burada eğer non-static initializer taban sınıfın nesnelerine erişiyor ise bu nesnelere ilk değer veriyormuş gibi
  kullanılabilir.

- Point p = new Point(){ {x = 10; y = 20;} }; // şeklinde bir kod sanki Point türüne kullanıcı tarafından istenilen bir
  değer atanıyormuş.


- anonoim sınıf herhangi bir  sınıftan türetiliyor ise hem yeni bir sınıf bildirimi hemde nesne yaratma işlemidir.
- anonim interface ise bir interface bildirimi ve implementasyonudur.

- teknik olarak ya bir interface'i implemente edecek yada anonim bir sınıftan türetilecektir.

- anonim bir sınıf birden fazla interface'i implemente edecek şeklinde yazılamaz.

- Bir metodun başka bir çağıracağı metodu yapabilmesine high  order function denir(Ne yapacaığını dışarıdan almak).
  Timer sınıfının schedule metodu tamamen böyledir(Ne yapacağını TimerTask interface'inden alıyoruz.).

- Java da doğrudan bir metod verilmesi gibi bir durum yoktur.



--------------------------------------------------------------------------------------------------------------
                                            Lambda ifadeleri(Lamba expressions)
--------------------------------------------------------------------------------------------------------------


- içerisinde bir ve yalnız bir tane abstract metod olan interface'lere fonksiyonel interface denir.
    interface IX {
        void foo();
        default void bar()
        {
        }
    } // IX interface'i bir functional interface'dir. Çünkü bar metotu abstract değildir.

- Java 8 ile birlikte eklenmiştir.

--- Lambda ifadelerinin genel biçimi ------

- Lambda ifadeleri uygulanabilecek her yerde uygulanılmalıdır(always applicable).

    1- (değişken_listesi) -> ifade
    2- (değişken listesi) -> {...}
    3- değişken -> ifade
    4- değişken -> {...}
    5- () -> ifade
    6- () -> {}
    7- (<tür değişken listesi>) -> ifade
    8- (<tür değişken listesi>) -> {}

- Yukarıdaki 8 yazım şekli lamba ifadelerinin genel implementasyon biçimidir.

- Lambda ifadeleri ancak ve ancak uygun fonksiyonel arayüz(interface) referanslarına atanabilir. Arayüz dışında herhangi
  bir referansa yada fonksiyonel olmayan arayüz referanslarına atanamaz(örneğin abstract bir sınıf referansı, yada
  fonksiyonel  olmayan bir interface referansına atanamaz.).

- Lambda ifadesi ile fonksiyonel bir arayüzün o bir tane olan fonksiyonunu override etmek yerine(Burada kastedilen
  aşağıda implemente edilmiştir.) onun yerine geçen kodu kısa bir biçimde yazmış oluruz.

--------------------------------------------------------------------------------------------------------------
                                            25.04.2020
--------------------------------------------------------------------------------------------------------------

- Lambda ifadeleri bir ifade olduğu için bir türleri vardır.

- Lambda ifadesi tam olarak atandığı fonksiyonel arayüz referansının ilgili abstract metodunu override edilmiş
  hali gibidir.

- Fonksiyonel arayüzler sanki  metot tutabilen bir türmüş gibi davranan arayüzlerdir. Lambda'lar da sanki
  bu fonksiyon türüymüş ve fonksiyonel arayüze atanan bir tür gibidir.


- callback kavramı tam olarak bir programa ne yapacağımızı bizim vermemizdir. Diyebiliriz. Burada yazılan kütüphane bir
  callback ister ve ona geçilen callback'i çağırır.

- Java da ki bu fonksiyonel arayüzler aynı bir function pointer gibi davranırlar
- lambda ifadelerinde oktan öncesi kısım bize parametrik yapıyı gösterir.

- Lambda ifadeleri için derleyici arka planda başka bir sınıf yad anonim sınıf oluşturmaz.

- Lambda ifadelerine ilişkin olarak, ilgili ifade bir çok kez yeniden kullanılabilir.

- Lambda ifadeleri uygun fonksiyonel inteface'lere atanabilir. Lambda ifadeleri tür çıkarımı yapılacak ise
  tür çıkarımını kendisi yapacaktır.

- Lambda ifadesinde tek bir değişken var ise tür tarafına yazılan parantezlere gerek yoktur.
  IIntUnaryOperator op = a -> a * a; // burada oktan önceki yer bir bildirim gibidir. Burada sadece a değişkeni
  bildirilmiştir.
  IIntBinaryOperator op = (a, b) -> a + b; // burada a ve b değişkenleri bildirilmiştir.

- Eğer birden fazla işlem yapılacak ise method gövdesi biçiminde yazılabilirler.
     IIntBinaryOperator op = (a, b) -> {
        sout(a + " " + b);
        return a + b;
     }

- ilgili functional interface generic bildirilse bile tür çıkarımını kendisi yapabilir.
    IBinaryOperator<Integer> opInt = (a, b) -> a + b;
    IBinaryOperator<String> opStr = (name, surname) -> name + " " + surname;

interface IBinaryOperator<T> {
    T apply(T a, T b);
}

- anonim sınıflar lambda ifadelerinin yerine geçerken, lamba ifadeleri anonim sınıflar yerine kullanılamaz.
  Kullanabilen her yerde lamba ifadeleri kullanılabilir.

- Lambda ifadelerinin parametre değişkenleri yerel değişken kabul edilir ve ilgili Lambda ifadesi boyunca görülebilir.

- Lambda ifadelerinde bildirilen bir yerel değişken ile aynı isimde başka bir yerel değişken o scope boyunca yeniden bildirilemez.

- Lambda ifadeleri de yerel ve anonim sınıflar gibi bulunduğu kod bloğundaki bir değişkeni yakalayabilir. Burada
  yakalanan değişken değiştirilemez.

- Fonksiyonel arayüzler generic interface'ler ile kullanılada bilir.
  Basit bir convert işlemi

  IFunction  s2l = a -> a.length();
  s2l.apply("ankara");//6 çıkar
  interface IFunction<T, R> {
    R apply(T t);
  }

- lambda parametreleri içerisinde tür yada var keywordu kullanılabilir. Ancak tür kullanılse bile lambda ifadelerinin atanacağı
  referans var keyword'u ile belirtilemez.

- Java 11 ile parametre tür dğeişkenleri var ile bildirilebilir.
    IBinaryOperator binaryOperator(var a, var b) -> a + b; // since java 11;
    interface IBinaryOperator {
        int apply(int a, int b);
    }

- fonksiyonel arayüz referanslarına eğer elimizde parametrik yapısı tam uyumlu bir reference var ise bu metot ::
  (çözünürlük) operatörü ile doğrudan atanabilir.
- metod reference'lar non-static metodlar ile de yapılabilir.Ortada bir refence olması gerekir.



- metot reference'ın genel biçimi statik metodlar için <class Name>::function_name;//şeklindedir.

- metot reference'ın non-static metotlar için genel biçimi ise <reference>::function_name;

- Metod reference'ları non-static fonksiyonları(Örneğin String length fonksiyonu), sanki bir statik metotmuş gibi
  kullanılabilir. Bu tammen run-time'da static fonksiyonların non-static fonksiyonlara çevrilmesi ile alakalıdır.

- <Sınıf ismi>::new sentaksı ctor çağrılmasını sağlayan sentaksıdır. Bu durumda interface'in ilgili sınıf türüne dönen
  bir tan abstract metodu olmalıdır. Ayrıca sınıfın da bu abstract metodun parametrik yapısına uygun bir ctor'u
  bulunmalıdır. Burada ctor parametresiz ise parametresiz bir abstract metod bulunmalıdır.

- ctor parametreli yazılmış ise ona göre de interface'in  parametreli yazılmış olması gerekir. Bizde Yazacağımızı yapıyı
  buna göre düzenlemeliyiz.

--------------------------------------------------------------------------------------------------------------
                                            26.04.2020
--------------------------------------------------------------------------------------------------------------


-------- Metot referans çeşitleri -------
- Pratikte kullanılan 4 çeşit metot referans vardır.
    1-) static metot referansları(reference to a static metod)
    2-) Bir nesneye ilişkin non-static metotun reference(reference to an instance(non-static) method of particular object)
    3-) Bir türe ilişkin  non-static metot referansı (reference to an instance(non-static) metot of any object of particular type)
    4-) Ctor referansı(Reference to a ctor)

- Java da generic sınıfların wrapper sınıflar için kullanılabilen bütün interface'lerin ayrıca primitive türler için
  ayrıca temel türler için olan kısmı ayrıca yapılır.



----- Java'nın function paketi ------

- java.util paketi altındadır.

- predicate interface'ler
    - geri dönüş değeri boolean olan abstract fonksiyonu test ile isimlendirilmiş, veriyi alıp test eden interface'dir.

- Supplier grupları
    - Parametre almadan tür döndüren sınıflardır(Random sınıfının nextInt metodu için kullanılabilir.).

- callback : bir metod dışarıdan hangi metodu çağıracağını alırsa böyle sınıflara call back denir. Bu tarz meotdlar high
  order metodlar denir.

- function paketinin detaylarını değil daha çok kullanımını göz önünde bulundurmalıyız.

- function sınıfının bütün interface'lerini ezberlemek değil, kullanarak akılda kalması sağlanmalıdır.

----- optional sınıfı -----

- Java 8 ile eklenmiştir, Generic bir sınıftır. Bu tarz türlere nullable type'lar denir.

- Optional türü bir nesne var ise kullanılıp, eğer nesne yok ise  herhangi bir şey yapmayacaktır. Optinal sınıfı ortada
  bir işi exception olmadan halletmenin yöntemidir.

------------------------------------------------------------------------------------------------------------------------
                                            02.05.2020
------------------------------------------------------------------------------------------------------------------------

- CommandPromptApp uygulaması yapıldı

------------------------------------------------------------------------------------------------------------------------
                                            03.05.2020
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
                                            Optional sınıfı
------------------------------------------------------------------------------------------------------------------------

- Sınıfın static empty metodu ile boş bir optional nesnesi elde edilir.
- Sınıfın isPresent metodu ile bir optional nesnesinin dolu olup olmadığını test ederiz. isEmpty ilede argüman geçilen
  nesnenin boş olup olmadığı test edilir.
- Optional sınıfının of metodu ile bir bilgi Optional türüne dönüştürülür. Java da bir yerden sonra valueOf metodları of
  metodları olarak isimlendirilmiştir.

- Optional içerisindeki isPresent ve empty fonksiyonları bir flag ile kontrol edilerek yapılır.

- sınıfın non-static get fonksiyonu ilgili optional referansın sarmaladığı değeri geri döndürür.

- Optional sınıfının ctor'u private'tır.

- sınıfın ofNullable metodu aldığı parametre null ise boş null değil ise dolu optional referansı döndürür.

- bunu of metodu ile yapamayız, of metoduna null geçmek exception fırlatılmasına sebep olur.

- orElse metodu eğer kullanılan referans boş ise geçilen default değeri, dolu ise içerisindekini verecektir.

- orElseThrow metodu eğer verilen referans boş ise bir exception throw edilecektir.

- ifPresent'in Consumer<? super T> action parametreli metodu eğer verilen optional referansı dolu ise yapılacka işi gösterir.

- Consumer interface'i kendisine gönderilen parametre ile bir iş yapıp void değeri döndürür.

- filter fonksiyonu argüman olarak geçilen predicate sağlanıyor ise, bu predicate' sağlayanlar için
  ilgili referansı, sağlanmıyor ise empty Optipnal döner.

- map fonksiyonu : parametresi Function interface'i türündendir. Bir optional sınıfından başka bir optional elde etmemizi
  sağlar. map empty bir optional referansı ile çağırılırsa empty Optional türüne döner.

- Function(BiFunction da dahil) açılımına göre verilen paramatrelere göre farklı bir değer üretir.

- Optional sınıfının kullanım çeşitleri
    1-) fonksiyonun geri dönüş değeri
    2-) fonksiyon parametresi
    3-) Sınıfların veri elemanları da optional olabilir.
------------------------------------------------------------------------------------------------------------------------
                                            Date sınıfı(Java'nın standart kütüphanesinin)
------------------------------------------------------------------------------------------------------------------------

